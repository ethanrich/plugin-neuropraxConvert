## DO NOT EDIT! Generated from bwdist.cc
%!shared bw
%!
%! bw = [0   1   0   1   0   1   1   0
%!       0   0   0   1   1   0   0   0
%!       0   0   0   1   1   0   0   0
%!       0   0   0   1   1   0   0   0
%!       0   0   1   1   1   1   1   1
%!       1   1   1   1   0   0   0   1
%!       1   1   1   0   0   0   1   0
%!       0   0   1   0   0   0   1   1];
%!test
%! out = [ 1.00000   0.00000   1.00000   0.00000   1.00000   0.00000   0.00000   1.00000
%!         1.41421   1.00000   1.00000   0.00000   0.00000   1.00000   1.00000   1.41421
%!         2.23607   2.00000   1.00000   0.00000   0.00000   1.00000   2.00000   2.00000
%!         2.00000   1.41421   1.00000   0.00000   0.00000   1.00000   1.00000   1.00000
%!         1.00000   1.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
%!         0.00000   0.00000   0.00000   0.00000   1.00000   1.00000   1.00000   0.00000
%!         0.00000   0.00000   0.00000   1.00000   1.41421   1.00000   0.00000   1.00000
%!         1.00000   1.00000   0.00000   1.00000   2.00000   1.00000   0.00000   0.00000];
%! out = single (out);
%!
%! assert (bwdist (bw), out, 0.0001);  # default is euclidean
%! assert (bwdist (bw, "euclidean"), out, 0.0001);
%! assert (bwdist (logical (bw), "euclidean"), out, 0.0001);
%!test
%! out = [ 1   0   1   0   1   0   0   1
%!         1   1   1   0   0   1   1   1
%!         2   2   1   0   0   1   2   2
%!         2   1   1   0   0   1   1   1
%!         1   1   0   0   0   0   0   0
%!         0   0   0   0   1   1   1   0
%!         0   0   0   1   1   1   0   1
%!         1   1   0   1   2   1   0   0];
%! out = single (out);
%!
%! assert (bwdist (bw, "chessboard"), out);
%!test
%! out = [ 1   0   1   0   1   0   0   1
%!         2   1   1   0   0   1   1   2
%!         3   2   1   0   0   1   2   2
%!         2   2   1   0   0   1   1   1
%!         1   1   0   0   0   0   0   0
%!         0   0   0   0   1   1   1   0
%!         0   0   0   1   2   1   0   1
%!         1   1   0   1   2   1   0   0];
%! out = single (out);
%!
%! assert (bwdist (bw, "cityblock"), out);
%!test
%! out = [ 1.00000   0.00000   1.00000   0.00000   1.00000   0.00000   0.00000   1.00000
%!         1.41421   1.00000   1.00000   0.00000   0.00000   1.00000   1.00000   1.41421
%!         2.41421   2.00000   1.00000   0.00000   0.00000   1.00000   2.00000   2.00000
%!         2.00000   1.41421   1.00000   0.00000   0.00000   1.00000   1.00000   1.00000
%!         1.00000   1.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
%!         0.00000   0.00000   0.00000   0.00000   1.00000   1.00000   1.00000   0.00000
%!         0.00000   0.00000   0.00000   1.00000   1.41421   1.00000   0.00000   1.00000
%!         1.00000   1.00000   0.00000   1.00000   2.00000   1.00000   0.00000   0.00000];
%! out = single (out);
%!
%! assert (bwdist (bw, "quasi-euclidean"), out, 0.0001);
%!
%! bw(logical (bw)) = 3; # there is no actual check if matrix is binary or 0 and 1
%! assert (bwdist (bw, "quasi-euclidean"), out, 0.0001);
%!
%! bw(logical (bw)) = -2; # anything non-zero is considered object
%! assert (bwdist (bw, "quasi-euclidean"), out, 0.0001);
%!test
%! bw =    [  1   1   1   1   0   1   1   1   1
%!            1   1   1   1   0   1   1   1   1
%!            1   1   0   1   1   1   1   1   1
%!            0   1   1   1   1   1   1   1   1];
%!
%! dist = [   0   0   0   0   1   0   0   0   0
%!            0   0   0   0   1   0   0   0   0
%!            0   0   1   0   0   0   0   0   0
%!            1   0   0   0   0   0   0   0   0];
%! dist = single (dist);
%!
%! c =    [   1   5   9  13  13  21  25  29  33
%!            2   6  10  14  14  22  26  30  34
%!            3   7  10  15  19  23  27  31  35
%!            8   8  12  16  20  24  28  32  36];
%! c = uint32 (c);
%!
%! [dout, cout] = bwdist (bw, "euclidean");
%! assert (dout, dist)
%! assert (cout, c)
%!test
%! bw = [  0   1   1   0   0   0   1   0
%!         0   0   0   0   0   0   0   0
%!         1   1   0   0   0   0   0   0
%!         0   0   0   0   0   0   1   0
%!         0   0   0   0   1   0   0   1
%!         0   0   0   0   0   0   0   0
%!         1   0   0   0   0   0   0   0
%!         0   0   1   0   0   1   1   0];
%! out = single ([
%! 1.00000   0.00000   0.00000   1.00000   2.00000   1.00000   0.00000   1.00000
%! 1.00000   1.00000   1.00000   sqrt(2)   sqrt(2)+1 sqrt(2)   1.00000   sqrt(2)
%! 0.00000   0.00000   1.00000   2.00000   2.00000   sqrt(2)   1.00000   sqrt(2)
%! 1.00000   1.00000   sqrt(2)   sqrt(2)   1.00000   1.00000   0.00000   1.00000
%! 2.00000   2.00000   2.00000   1.00000   0.00000   1.00000   1.00000   0.00000
%! 1.00000   sqrt(2)   2.00000   sqrt(2)   1.00000   sqrt(2)   sqrt(2)   1.00000
%! 0.00000   1.00000   1.00000   sqrt(2)   sqrt(2)   1.00000   1.00000   sqrt(2)
%! 1.00000   1.00000   0.00000   1.00000   1.00000   0.00000   0.00000   1.00000
%! ]);
%! assert (bwdist (bw, "quasi-euclidean"), out);
%!error <unknown METHOD> bwdist (bw, "not a valid method");
%!test
%! ## Special case of there being no foreground element (bug #50874)
%! expected_dist = single (Inf (2, 2));
%! expected_idx = uint32 ([0 0; 0 0]);
%!
%! [dist, idx] = bwdist (false (2, 2));
%! assert (dist, expected_dist)
%! assert (idx, expected_idx)
%!
%! [dist, idx] = bwdist (zeros (2, 2));
%! assert (dist, expected_dist)
%! assert (idx, expected_idx)
%!test
%! ## Special case of 1D input (bug #50874)
%! assert (bwdist ([1 0]), single ([0 1]))
%! assert (bwdist ([1 0]'), single ([0 1]'))
%! assert (bwdist ([0 1 0 0 0 0 1 1]), single ([1 0 1 2 2 1 0 0]))
%! assert (bwdist ([1 1 0 0 0 0 1 1]'), single ([0 0 1 2 2 1 0 0])')
%! assert (bwdist ([1 0], "euclidean"), single ([0 1]))
%! assert (bwdist ([1 0], "chessboard"), single ([0 1]))
%! assert (bwdist ([1 0], "cityblock"), single ([0 1]))
%! assert (bwdist ([1 0], "quasi-euclidean"), single ([0 1]))
%!test
%! ## test 1D input with 2nd output argument (indices) (bug #50874)
%! expected_dist = single ([1 0 1]);
%! expected_idx = uint32 ([2 2 2]);
%!
%! [dist, idx] = bwdist ([0 1 0]);
%! assert (dist, expected_dist)
%! assert (idx, expected_idx)
%!
%! [dist, idx] = bwdist ([0 1 0]');
%! assert (dist, expected_dist')
%! assert (idx, expected_idx')
%!
%! expected_dist = single ([0 0 1 0 0]);
%! expected_idx = uint32 ([1 2 2 4 5]);
%! [dist, idx] = bwdist ([1 1 0 1 1]);
%! assert (dist, expected_dist)
%! assert (idx, expected_idx)
%!
%! expected_dist = single ([1 0 1 2 1 0 0 0 1 1 0 0 0 0 1 2 3 4]);
%! expected_idx = uint32 ([2 2 2 2 6 6 7 8 8 11 11 12 13 14 14 14 14 14]);
%! [dist, idx] = bwdist ([0 1 0 0 0 1 1 1 0 0 1 1 1 1 0 0 0 0]);
%! assert (dist, expected_dist)
%! assert (idx, expected_idx)
%!
%! expected_dist = single ([0 0 1 2 1 0 0 0 1 1 0 0 0 0 1 2 1 0]);
%! expected_idx = uint32 ([1 2 2 2 6 6 7 8 8 11 11 12 13 14 14 14 18 18]);
%! [dist, idx] = bwdist ([1 1 0 0 0 1 1 1 0 0 1 1 1 1 0 0 0 1]);
%! assert (dist, expected_dist)
%! assert (idx, expected_idx)
%!test
%! assert (bwdist ([0 0]), single ([Inf, Inf]))
%! assert (bwdist ([0 0]'), single ([Inf, Inf]'))
%!xtest
%! ## This is Matlab incompatible because the bottom right corners is
%! ## equally distant to the top right and bottom left corners.  However,
%! ## both are correct answers, and the returned value is just
%! ## implementation dependent.
%! bw = logical ([
%!   0 0 1
%!   0 0 0
%!   1 0 0
%! ]);
%! expected_dist = single ([
%!    2.0     1.0     0.0
%!    1.0   sqrt(2)   1.0
%!    0.0     1.0     2.0
%! ]);
%! expected_idx = uint32 ([
%!    3   7   7
%!    3   3   7
%!    3   3   3
%! ]);
%! [dist, idx] = bwdist (bw);
%! assert (dist, expected_dist)
%! assert (idx, expected_idx)
