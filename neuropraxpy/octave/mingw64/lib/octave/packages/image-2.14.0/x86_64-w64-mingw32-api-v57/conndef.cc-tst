## DO NOT EDIT! Generated from conndef.cc
%!assert (conndef (1, "minimal"), [1; 1; 1]);
%!assert (conndef (2, "minimal"), [0 1 0; 1 1 1; 0 1 0]);
%!test
%! C = zeros (3, 3, 3);
%! C(:,2,2) = 1;
%! C(2,:,2) = 1;
%! C(2,2,:) = 1;
%! assert (conndef (3, "minimal"), C);
%!test
%! C = zeros (3, 3, 3, 3);
%! C(:,:,2,1) = [0   0   0
%!               0   1   0
%!               0   0   0];
%! C(:,:,1,2) = [0   0   0
%!               0   1   0
%!               0   0   0];
%! C(:,:,2,2) = [0   1   0
%!               1   1   1
%!               0   1   0];
%! C(:,:,3,2) = [0   0   0
%!               0   1   0
%!               0   0   0];
%! C(:,:,2,3) = [0   0   0
%!               0   1   0
%!               0   0   0];
%! assert (conndef (4, "minimal"), C);
%!assert (conndef (1, "maximal"), ones (3, 1));
%!assert (conndef (2, "maximal"), ones (3, 3));
%!assert (conndef (3, "maximal"), ones (3, 3, 3));
%!assert (conndef (4, "maximal"), ones (3, 3, 3, 3));
%!assert (nnz (conndef (3, "minimal")), 7)
%!assert (nnz (conndef (4, "minimal")), 9)
%!assert (nnz (conndef (5, "minimal")), 11)
%!assert (nnz (conndef (6, "minimal")), 13)
%!assert (find (conndef (3, "minimal")), [5 11 13 14 15 17 23](:))
%!assert (find (conndef (4, "minimal")), [14 32 38 40 41 42 44 50 68](:))
%!assert (find (conndef (5, "minimal")),
%!        [   41   95  113  119  121  122  123  125  131  149  203](:))
%!assert (find (conndef (6, "minimal")),
%!        [  122  284  338  356  362  364  365  366  368  374  392  446  608](:))
%!error conndef ()
%!error <must be a positive integer> conndef (-2, "minimal")
%!error conndef (char (2), "minimal")
%!error conndef ("minimal", 3)
%!error <TYPE must be "maximal" or "minimal"> conndef (3, "invalid")
%!error <CONN must be in the set \[4 6 8 18 26\]> conndef (10)
%!assert (conndef (2, "minimal"), conndef (4))
%!assert (conndef (2, "maximal"), conndef (8))
%!assert (conndef (3, "minimal"), conndef (6))
%!assert (conndef (3, "maximal"), conndef (26))
%!assert (conndef (18), reshape ([0 1 0 1 1 1 0 1 0
%!                                1 1 1 1 1 1 1 1 1
%!                                0 1 0 1 1 1 0 1 0], [3 3 3]))
%!test iptcheckconn ( 4, "func", "var")
%!test iptcheckconn ( 6, "func", "var")
%!test iptcheckconn ( 8, "func", "var")
%!test iptcheckconn (18, "func", "var")
%!test iptcheckconn (26, "func", "var")
%!test iptcheckconn (1, "func", "var")
%!test iptcheckconn (ones (3, 1), "func", "var")
%!test iptcheckconn (ones (3, 3), "func", "var")
%!test iptcheckconn (ones (3, 3, 3), "func", "var")
%!test iptcheckconn (ones (3, 3, 3, 3), "func", "var")
%!error <func: VAR must be in the set \[4 6 8 18 26\]>
%!      iptcheckconn (3, "func", "VAR");
%!error <func: VAR center is not true>
%!      iptcheckconn ([1 1 1; 1 0 1; 1 1 1], "func", "VAR");
%!error <func: VAR must either be a logical array or a numeric scalar>
%!      iptcheckconn ([1 2 1; 1 1 1; 1 1 1], "func", "VAR");
%!error <func: VAR is not symmetric relative to its center>
%!      iptcheckconn ([0 1 1; 1 1 1; 1 1 1], "func", "VAR");
%!error <func: VAR is not 1x1, 3x1, 3x3, or 3x3x...x3>
%!      iptcheckconn (ones (3, 3, 3, 4), "func", "VAR");
