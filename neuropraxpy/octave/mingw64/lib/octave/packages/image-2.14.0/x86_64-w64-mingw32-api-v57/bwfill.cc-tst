## DO NOT EDIT! Generated from bwfill.cc
%!test
%! A = [0 1 0 0 1; 1 0 1 0 0; 1 0 1 1 0; 1 1 1 0 0; 1 0 0 1 0];
%! R4 = logical(ones(5));
%! R8 = logical([1 1 0 0 1; 1 0 1 0 0; 1 0 1 1 0; 1 1 1 0 0; 1 0 0 1 0]);
%! assert (bwfill (A,1,1,4), R4)
%! assert (bwfill (A,1,1,8), R8)
%! assert (bwfill (A,1,1), R8)
%! B = logical([0 1 0 0 1; 1 0 1 0 0; 1 0 1 1 0; 1 1 1 0 0; 1 0 0 1 0]);
%! assert (bwfill (A,3,3,4), B)
%! assert (bwfill (A,3,3,8), B)
%! assert (bwfill (A,3,3), B)
%! C = logical ([0 1 1 1 1; 1 0 1 1 1; 1 0 1 1 1; 1 1 1 1 1; 1 0 0 1 1]);
%! assert (bwfill (A,3,1,8), C)
%! assert (bwfill (A,3,1,4), R4)
%! assert (bwfill (A, [3 1], [1 3], 4), R4);
%! D = logical([0 1 1 1 1; 1 0 1 1 1; 1 0 1 1 1; 1 1 1 1 1; 1 0 0 1 1]);
%! assert (bwfill (A, [3 1], [1 3], 8), D);
%! assert (bwfill (A, [3 1], [1 3]), D);
%! E = logical ([0 1 0 0 1; 1 0 1 0 0; 1 0 1 1 0; 1 1 1 0 0; 1 0 0 1 0]);
%! assert (bwfill (A, "holes", 4), E);
%! F = logical ([1 1 0 0 1; 1 1 1 0 0; 1 1 1 1 0; 1 1 1 0 0; 1 0 0 1 0]);
%! assert (bwfill (A, "holes", 8), F);
%! assert (bwfill (A, "holes"), F);
%!error id=Octave:invalid-fun-call bwfill ()
%!error id=Octave:invalid-fun-call bwfill ("aaa")
%!error id=Octave:invalid-fun-call bwfill (rand (5) > 0.5)
%!error id=Octave:invalid-fun-call bwfill (rand (5) > 0.5, 2)
%!error <bwfill: connectivity must be 4 or 8> bwfill (rand (5) > 0.5, "holes", 1)
%!error <bwfill: connectivity must be 4 or 8> bwfill (rand (5) > 0.5, 2, 2, 5)
%!error id=Octave:invalid-fun-call bwfill (rand (5) > 0.5, "xxx")
%!error id=Octave:invalid-fun-call bwfill (rand (5) > 0.5, 2, 2, 4, 5)
%!error id=Octave:invalid-fun-call bwfill (rand (5) > 0.5, "holes", 4, 2)
