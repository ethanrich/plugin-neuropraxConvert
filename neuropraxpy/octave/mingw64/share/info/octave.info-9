This is octave.info, produced by makeinfo version 6.8 from octave.texi.

INFO-DIR-SECTION Math
START-INFO-DIR-ENTRY
* Octave: (octave).             Interactive language for numerical computations.
END-INFO-DIR-ENTRY

Copyright © 1996-2022 The Octave Project Developers

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.


File: octave.info,  Node: Character Strings in Oct-Files,  Next: Cell Arrays in Oct-Files,  Prev: Matrices and Arrays in Oct-Files,  Up: Oct-Files

A.1.3 Character Strings in Oct-Files
------------------------------------

A character string in Octave is just a special ‘Array’ class.  Consider
the example:

     #include <octave/oct.h>
     
     DEFUN_DLD (stringdemo, args, , "String Demo")
     {
       if (args.length () != 1)
         print_usage ();
     
       octave_value_list retval;
     
       charMatrix ch = args(0).char_matrix_value ();
     
       retval(1) = octave_value (ch, '\'');  // Single Quote String
     
       octave_idx_type nr = ch.rows ();
     
       for (octave_idx_type i = 0; i < nr / 2; i++)
         {
           std::string tmp = ch.row_as_string (i);
     
           ch.insert (ch.row_as_string (nr-i-1).c_str (), i, 0);
           ch.insert (tmp.c_str (), nr-i-1, 0);
         }
     
       retval(0) = octave_value (ch, '"');  // Double Quote String
     
       return retval;
     }

   An example of the use of this function is

     s0 = ["First String"; "Second String"];
     [s1,s2] = stringdemo (s0)
     ⇒ s1 = Second String
             First String

     ⇒ s2 = First String
             Second String

     typeinfo (s2)
     ⇒ sq_string
     typeinfo (s1)
     ⇒ string

   One additional complication of strings in Octave is the difference
between single quoted and double quoted strings.  To find out if an
‘octave_value’ contains a single or double quoted string use one of the
predicate tests shown below.

     if (args(0).is_sq_string ())
       octave_stdout << "First argument is a single quoted string\n";
     else if (args(0).is_dq_string ())
       octave_stdout << "First argument is a double quoted string\n";

   Note, however, that both types of strings are represented by the
‘charNDArray’ type, and so when assigning to an ‘octave_value’, the type
of string should be specified.  For example:

     octave_value_list retval;
     charNDArray ch;
     ...
     // Create single quoted string
     retval(1) = octave_value (ch);   // default constructor is sq_string
                OR
     retval(1) = octave_value (ch, '\'');  // explicitly create sq_string

     // Create a double quoted string
     retval(0) = octave_value (ch, '"');


File: octave.info,  Node: Cell Arrays in Oct-Files,  Next: Structures in Oct-Files,  Prev: Character Strings in Oct-Files,  Up: Oct-Files

A.1.4 Cell Arrays in Oct-Files
------------------------------

Octave’s cell type is also available from within oct-files.  A cell
array is just an ‘Array’ of ‘octave_value’s, and thus each element of
the cell array can be treated like any other ‘octave_value’.  A simple
example is

     #include <octave/oct.h>
     #include <octave/Cell.h>
     
     DEFUN_DLD (celldemo, args, , "Cell Demo")
     {
       if (args.length () != 1)
         print_usage ();
     
       Cell c = args(0).cell_value ();
     
       octave_value_list retval;
       retval.resize (c.numel ());    // faster code by pre-declaring size
     
       for (octave_idx_type i = 0; i < c.numel (); i++)
         {
           retval(i) = c(i);          // using operator syntax
           //retval(i) = c.elem (i);  // using method syntax
         }
     
       return retval;
     }

   Note that cell arrays are used less often in standard oct-files and
so the ‘Cell.h’ header file must be explicitly included.  The rest of
the example extracts the ‘octave_value’s one by one from the cell array
and returns them as individual output arguments.  For example:

     [b1, b2, b3] = celldemo ({1, [1, 2], "test"})
     ⇒
     b1 =  1
     b2 =

        1   2

     b3 = test


File: octave.info,  Node: Structures in Oct-Files,  Next: Sparse Matrices in Oct-Files,  Prev: Cell Arrays in Oct-Files,  Up: Oct-Files

A.1.5 Structures in Oct-Files
-----------------------------

A structure in Octave is a map between a number of fields represented
and their values.  The Standard Template Library ‘map’ class is used,
with the pair consisting of a ‘std::string’ and an Octave ‘Cell’
variable.

   A simple example demonstrating the use of structures within oct-files
is

     #include <octave/oct.h>
     #include <octave/ov-struct.h>
     
     DEFUN_DLD (structdemo, args, , "Struct Demo")
     {
       if (args.length () != 2)
         print_usage ();
     
       if (! args(0).isstruct ())
         error ("structdemo: ARG1 must be a struct");
     
       octave_scalar_map arg0 = args(0).scalar_map_value ();
       //octave_map arg0 = args(0).map_value ();
     
       if (! args(1).is_string ())
         error ("structdemo: ARG2 must be a character string");
     
       std::string arg1 = args(1).string_value ();
     
       octave_value tmp = arg0.contents (arg1);
       //octave_value tmp = arg0.contents (arg1)(0);
     
       if (! tmp.is_defined ())
         error ("structdemo: struct does not have a field named '%s'\n",
                arg1.c_str ());
     
       octave_scalar_map st;
     
       st.assign ("selected", tmp);
     
       return octave_value (st);
     }

   An example of its use is

     x.a = 1; x.b = "test"; x.c = [1, 2];
     structdemo (x, "b")
     ⇒ selected = test

   The example above specifically uses the ‘octave_scalar_map’ class
which is for representing a single struct.  For structure arrays, the
‘octave_map’ class is used instead.  The commented code shows how the
demo could be modified to handle a structure array.  In that case, the
‘contents’ method returns a ‘Cell’ which may have more than one element.
Therefore, to obtain the underlying ‘octave_value’ in the single struct
example we would write

     octave_value tmp = arg0.contents (arg1)(0);

where the trailing ‘(0)’ is the ‘()’ operator on the ‘Cell’ object.  If
this were a true structure array with multiple elements we could iterate
over the elements using the ‘()’ operator.

   Structures are a relatively complex data container and there are more
functions available in ‘oct-map.h’ which make coding with them easier
than relying on just ‘contents’.


File: octave.info,  Node: Sparse Matrices in Oct-Files,  Next: Accessing Global Variables in Oct-Files,  Prev: Structures in Oct-Files,  Up: Oct-Files

A.1.6 Sparse Matrices in Oct-Files
----------------------------------

There are three classes of sparse objects that are of interest to the
user.

‘SparseMatrix’
     A double precision sparse matrix class

‘SparseComplexMatrix’
     A complex sparse matrix class

‘SparseBoolMatrix’
     A boolean sparse matrix class

   All of these classes inherit from the ‘Sparse<T>’ template class, and
so all have similar capabilities and usage.  The ‘Sparse<T>’ class was
based on Octave’s ‘Array<T>’ class and users familiar with Octave’s
‘Array’ classes will be comfortable with the use of the sparse classes.

   The sparse classes will not be entirely described in this section,
due to their similarity with the existing ‘Array’ classes.  However,
there are a few differences due the nature of sparse objects, and these
will be described.  First, although it is fundamentally possible to have
N-dimensional sparse objects, the Octave sparse classes do not allow
them at this time; All instances of the sparse classes *must* be
2-dimensional.  This means that ‘SparseMatrix’ is actually more similar
to Octave’s ‘Matrix’ class than it is to the ‘NDArray’ class.

* Menu:

* Array and Sparse Class Differences::
* Creating Sparse Matrices in Oct-Files::
* Using Sparse Matrices in Oct-Files::


File: octave.info,  Node: Array and Sparse Class Differences,  Next: Creating Sparse Matrices in Oct-Files,  Up: Sparse Matrices in Oct-Files

A.1.6.1 Array and Sparse Class Differences
..........................................

The number of elements in a sparse matrix is considered to be the number
of nonzero elements, rather than the product of the dimensions.
Therefore,

     SparseMatrix sm;
     ...
     int nnz = sm.nelem ();

returns the number of nonzero elements (like the interpreter function
‘nnz’).  If the user really requires the number of elements in the
matrix, including the nonzero elements, they should use ‘numel’ rather
than ‘nelem’.  Note that for very large matrices, where the product of
the two dimensions is larger than the representation of an unsigned int,
‘numel’ can overflow.  An example is ‘speye (1e6)’ which will create a
matrix with a million rows and columns, but only a million nonzero
elements.  In this case, the number of rows multiplied by the number of
columns is more than two hundred times the maximum value that can be
represented by an unsigned 32-bit int.  The use of ‘numel’ should,
therefore, be avoided unless it is known that it will not overflow.

   Extreme care is also required when using the ‘elem’ method or the
‘()’ operator which perform essentially the same function.  The reason
is that if a sparse object is non-const, then Octave will assume that a
request for a zero element in a sparse matrix is in fact a request to
create this element so it can be filled.  Therefore, a piece of code
like

     SparseMatrix sm;
     ...
     for (int j = 0; j < nc; j++)
       for (int i = 0; i < nr; i++)
         std::cerr << " (" << i << "," << j << "): " << sm(i,j) << "\n";

is a great way of turning a sparse matrix into a dense one, and a very
slow way at that since it reallocates the sparse object for each zero
element in the matrix.

   A simple way of preventing the above from happening is to create a
temporary constant version of the sparse matrix.  Note that only the
container for the sparse matrix will be copied, while the actual
representation of the data will be shared between the two versions of
the sparse matrix; This is not a costly operation.  The example above,
re-written to prevent sparse-to-dense conversion, is

     SparseMatrix sm;
     ...
     const SparseMatrix tmp (sm);
     for (int j = 0; j < nc; j++)
       for (int i = 0; i < nr; i++)
         std::cerr << " (" << i << "," << j << "): " << tmp(i,j) << "\n";

   Finally, because the sparse types aren’t represented by a contiguous
block of memory, the ‘fortran_vec’ method of ‘Array<T>’ is not
available.  It is, however, replaced by three separate methods ‘ridx’,
‘cidx’, and ‘data’, that access the raw compressed column format that
Octave sparse matrices are stored in.  These methods can be used in a
manner similar to ‘elem’ to allow the matrix to be accessed or filled.
However, it is up to the user to respect the sparse matrix compressed
column format or the matrix will become corrupted.


File: octave.info,  Node: Creating Sparse Matrices in Oct-Files,  Next: Using Sparse Matrices in Oct-Files,  Prev: Array and Sparse Class Differences,  Up: Sparse Matrices in Oct-Files

A.1.6.2 Creating Sparse Matrices in Oct-Files
.............................................

There are two useful strategies for creating a sparse matrix.  The first
is to create three vectors representing the row index, column index, and
data values, and from these create the matrix.  The second alternative
is to create a sparse matrix with the appropriate amount of space, and
then fill in the values.  Both techniques have their advantages and
disadvantages.

   Below is an example of creating a small sparse matrix using the first
technique

     int nz, nr, nc;
     nz = 4, nr = 3, nc = 4;

     ColumnVector ridx (nz);
     ColumnVector cidx (nz);
     ColumnVector data (nz);

     ridx(0) = 1; cidx(0) = 1; data(0) = 1;
     ridx(1) = 2; cidx(1) = 2; data(1) = 2;
     ridx(2) = 2; cidx(2) = 4; data(2) = 3;
     ridx(3) = 3; cidx(3) = 4; data(3) = 4;
     SparseMatrix sm (data, ridx, cidx, nr, nc);

which creates the matrix given in section *note Storage of Sparse
Matrices::.  Note that the compressed matrix format is not used at the
time of the creation of the matrix itself, but is used internally.

   As discussed in the chapter on Sparse Matrices, the values of the
sparse matrix are stored in increasing column-major ordering.  Although
the data passed by the user need not respect this requirement,
pre-sorting the data will significantly speed up creation of the sparse
matrix.

   The disadvantage of this technique for creating a sparse matrix is
that there is a brief time when two copies of the data exist.  For
extremely memory constrained problems this may not be the best technique
for creating a sparse matrix.

   The alternative is to first create a sparse matrix with the desired
number of nonzero elements and then later fill those elements in.
Sample code:

     int nz, nr, nc;
     nz = 4, nr = 3, nc = 4;
     SparseMatrix sm (nr, nc, nz);
     sm(0,0) = 1; sm(0,1) = 2; sm(1,3) = 3; sm(2,3) = 4;

   This creates the same matrix as previously.  Again, although not
strictly necessary, it is significantly faster if the sparse matrix is
created and the elements are added in column-major ordering.  The reason
for this is that when elements are inserted at the end of the current
list of known elements then no element in the matrix needs to be moved
to allow the new element to be inserted; Only the column indices need to
be updated.

   There are a few further points to note about this method of creating
a sparse matrix.  First, it is possible to create a sparse matrix with
fewer elements than are actually inserted in the matrix.  Therefore,

     int nr, nc;
     nr = 3, nc = 4;
     SparseMatrix sm (nr, nc, 0);
     sm(0,0) = 1; sm(0,1) = 2; sm(1,3) = 3; sm(2,3) = 4;

is perfectly valid.  However, it is a very bad idea because as each new
element is added to the sparse matrix the matrix needs to request more
space and reallocate memory.  This is an expensive operation that will
significantly slow this means of creating a sparse matrix.  It is
possible to create a sparse matrix with excess storage, so having NZ
greater than 4 in this example is also valid.  The disadvantage is that
the matrix occupies more memory than strictly needed.

   Of course, it is not always possible to know the number of nonzero
elements prior to filling a matrix.  For this reason the additional
unused storage of a sparse matrix can be removed after its creation with
the ‘maybe_compress’ function.  In addition to deallocating unused
storage, ‘maybe_compress’ can also remove zero elements from the matrix.
The removal of zero elements from the matrix is controlled by setting
the argument of the ‘maybe_compress’ function to be ‘true’.  However,
the cost of removing the zeros is high because it implies re-sorting the
elements.  If possible, it is better for the user to avoid adding the
unnecessary zeros in the first place.  An example of the use of
‘maybe_compress’ is

     int nz, nr, nc;
     nz = 6, nr = 3, nc = 4;

     SparseMatrix sm1 (nr, nc, nz);
     sm1(0,0) = 1; sm1(0,1) = 2; sm1(1,3) = 3; sm1(2,3) = 4;
     sm1.maybe_compress ();   // No zero elements were added

     SparseMatrix sm2 (nr, nc, nz);
     sm2(0,0) = 1; sm2(0,1) = 2; sm(0,2) = 0; sm(1,2) = 0;
     sm1(1,3) = 3; sm1(2,3) = 4;
     sm2.maybe_compress (true);  // Zero elements were added

   The use of the ‘maybe_compress’ function should be avoided if
possible as it will slow the creation of the matrix.

   A third means of creating a sparse matrix is to work directly with
the data in compressed row format.  An example of this advanced
technique might be

     octave_value arg;
     ...
     int nz, nr, nc;
     nz = 6, nr = 3, nc = 4;   // Assume we know the max # nz
     SparseMatrix sm (nr, nc, nz);
     Matrix m = arg.matrix_value ();

     int ii = 0;
     sm.cidx (0) = 0;
     for (int j = 1; j < nc; j++)
       {
         for (int i = 0; i < nr; i++)
           {
             double tmp = m(i,j);
             if (tmp != 0.)
               {
                 sm.data(ii) = tmp;
                 sm.ridx(ii) = i;
                 ii++;
               }
           }
         sm.cidx(j+1) = ii;
      }
     sm.maybe_compress ();  // If don't know a priori the final # of nz.

which is probably the most efficient means of creating a sparse matrix.

   Finally, it may sometimes arise that the amount of storage initially
created is insufficient to completely store the sparse matrix.
Therefore, the method ‘change_capacity’ exists to reallocate the sparse
memory.  The above example would then be modified as

     octave_value arg;
     ...
     int nz, nr, nc;
     nz = 6, nr = 3, nc = 4;   // Guess the number of nz elements
     SparseMatrix sm (nr, nc, nz);
     Matrix m = arg.matrix_value ();

     int ii = 0;
     sm.cidx (0) = 0;
     for (int j = 1; j < nc; j++)
       {
         for (int i = 0; i < nr; i++)
           {
             double tmp = m(i,j);
             if (tmp != 0.)
               {
                 if (ii == nz)
                   {
                     nz += 2;   // Add 2 more elements
                     sm.change_capacity (nz);
                   }
                 sm.data(ii) = tmp;
                 sm.ridx(ii) = i;
                 ii++;
               }
           }
         sm.cidx(j+1) = ii;
      }
     sm.maybe_compress ();  // If don't know a priori the final # of nz.

   Note that both increasing and decreasing the number of nonzero
elements in a sparse matrix is expensive as it involves memory
reallocation.  Also because parts of the matrix, though not its
entirety, exist as old and new copies at the same time, additional
memory is needed.  Therefore, if possible avoid changing capacity.


File: octave.info,  Node: Using Sparse Matrices in Oct-Files,  Prev: Creating Sparse Matrices in Oct-Files,  Up: Sparse Matrices in Oct-Files

A.1.6.3 Using Sparse Matrices in Oct-Files
..........................................

Most of the same operators and functions for sparse matrices that are
available from the Octave interpreter are also available within
oct-files.  The basic means of extracting a sparse matrix from an
‘octave_value’, and returning it as an ‘octave_value’, can be seen in
the following example.

     octave_value_list retval;

     SparseMatrix sm = args(0).sparse_matrix_value ();
     SparseComplexMatrix scm = args(1).sparse_complex_matrix_value ();
     SparseBoolMatrix sbm = args(2).sparse_bool_matrix_value ();
     ...
     retval(2) = sbm;
     retval(1) = scm;
     retval(0) = sm;

   The conversion to an ‘octave_value’ is handled by the sparse
‘octave_value’ constructors, and so no special care is needed.


File: octave.info,  Node: Accessing Global Variables in Oct-Files,  Next: Calling Octave Functions from Oct-Files,  Prev: Sparse Matrices in Oct-Files,  Up: Oct-Files

A.1.7 Accessing Global Variables in Oct-Files
---------------------------------------------

Global variables allow variables in the global scope to be accessed.
Global variables can be accessed within oct-files by using the support
functions ‘global_varval’ and ‘global_assign’ from the current
interpreter’s symbol table.  Both functions take as first argument a
string representing the variable name to be obtained or assigned.  The
second argument of ‘global_assign’ is the value to be assigned.  An
example of the use of these two functions is

     #include <octave/oct.h>
     #include <octave/interpreter.h>
     
     DEFMETHOD_DLD (globaldemo, interp, args, , "Global Demo")
     {
       if (args.length () != 1)
         print_usage ();
     
       octave_value retval;
     
       std::string s = args(0).string_value ();
     
       octave::symbol_table& symtab = interp.get_symbol_table ();
     
       octave_value tmp = symtab.global_varval (s);
     
       if (tmp.is_defined ())
         retval = tmp;
       else
         retval = "Global variable not found";
     
       symtab.global_assign ("a", 42.0);
     
       return retval;
     }

   An example of its use is

     global a b
     b = 10;
     globaldemo ("b")
     ⇒ 10
     globaldemo ("c")
     ⇒ "Global variable not found"
     num2str (a)
     ⇒ 42


File: octave.info,  Node: Calling Octave Functions from Oct-Files,  Next: Calling External Code from Oct-Files,  Prev: Accessing Global Variables in Oct-Files,  Up: Oct-Files

A.1.8 Calling Octave Functions from Oct-Files
---------------------------------------------

There is often a need to be able to call another Octave function from
within an oct-file, and there are many examples of such within Octave
itself.  For example, the ‘quad’ function is an oct-file that calculates
the definite integral by quadrature over a user-supplied function.

   There are also many ways in which a function could be given as input.
It might be passed as one of

  1. Function Handle

  2. Anonymous Function Handle

  3. String

   The code below demonstrates all four methods of passing a function to
an oct-file.

     #include <octave/oct.h>
     #include <octave/parse.h>
     
     DEFMETHOD_DLD (funcdemo, interp, args, nargout, "Function Demo")
     {
       int nargin = args.length ();
     
       if (nargin < 2)
         print_usage ();
     
       octave_value_list newargs;
     
       for (octave_idx_type i = nargin - 1; i > 0; i--)
         newargs(i-1) = args(i);
     
       octave_value_list retval;
     
       if (args(0).is_function_handle () || args(0).is_inline_function ()
           || args(0).is_string ())
         retval = interp.feval (args(0), newargs, nargout);
       else
         error ("funcdemo: INPUT must be string, inline, or function handle");
     
       return retval;
     }

   The first input to the demonstration code is a user-supplied function
and the remaining arguments are all passed to the function.

     funcdemo (@sin, 1)
     ⇒ 0.84147
     funcdemo (@(x) sin (x), 1)
     ⇒ 0.84147
     funcdemo ("sin", 1)
     ⇒ 0.84147
     funcdemo (@atan2, 1, 1)
     ⇒ 0.78540

   When the user function is passed as a string the treatment of the
function is different.  In some cases it is necessary to have the user
supplied function as an ‘octave_function’ object.  In that case the
string argument can be used to create a temporary function as
demonstrated below.

     std::octave fcn_name = unique_symbol_name ("__fcn__");
     std::string fcode = "function y = ";
     fcode.append (fcn_name);
     fcode.append ("(x) y = ");
     fcn = extract_function (args(0), "funcdemo", fcn_name,
                             fcode, "; endfunction");
     ...
     if (fcn_name.length ())
       clear_function (fcn_name);

   There are two important things to know in this case.  First, the
number of input arguments to the user function is fixed, and in the
above example is a single argument.  Second, to avoid leaving the
temporary function in the Octave symbol table it should be cleared after
use.  Also, by convention all internal function names begin and end with
the character sequence ‘__’.


File: octave.info,  Node: Calling External Code from Oct-Files,  Next: Allocating Local Memory in Oct-Files,  Prev: Calling Octave Functions from Oct-Files,  Up: Oct-Files

A.1.9 Calling External Code from Oct-Files
------------------------------------------

Linking external C code to Octave is relatively simple, as the C
functions can easily be called directly from C++.  One possible issue is
that the declarations of the external C functions may need to be
explicitly defined as C functions to the compiler.  If the declarations
of the external C functions are in the header ‘foo.h’, then the tactic
to ensure that the C++ compiler treats these declarations as C code is

     #ifdef __cplusplus
     extern "C"
     {
     #endif
     #include "foo.h"
     #ifdef __cplusplus
     }  /* end extern "C" */
     #endif

   Calling Fortran code, however, can pose more difficulties.  This is
due to differences in the manner in which compilers treat the linking of
Fortran code with C or C++ code.  Octave supplies several macros that
allow consistent behavior across a number of compilers.

   The underlying Fortran code should use the ‘XSTOPX’ function to
replace the Fortran ‘STOP’ function.  ‘XSTOPX’ uses the Octave exception
handler to treat failing cases in the Fortran code explicitly.  Note
that Octave supplies its own replacement BLAS ‘XERBLA’ function, which
uses ‘XSTOPX’.

   If the code calls ‘XSTOPX’, then the ‘F77_XFCN’ macro should be used
to call the underlying Fortran function.  The Fortran exception state
can then be checked with the global variable
‘f77_exception_encountered’.  If ‘XSTOPX’ will not be called, then the
‘F77_FCN’ macro should be used instead to call the Fortran code.

   There is no great harm in using ‘F77_XFCN’ in all cases, except that
for Fortran code that is short running and executes a large number of
times, there is potentially an overhead in doing so.  However, if
‘F77_FCN’ is used with code that calls ‘XSTOP’, Octave can generate a
segmentation fault.

   An example of the inclusion of a Fortran function in an oct-file is
given in the following example, where the C++ wrapper is

     #include <octave/oct.h>
     #include <octave/f77-fcn.h>
     
     extern "C"
     {
       F77_RET_T
       F77_FUNC (fortransub, FORTSUB)
         (const F77_INT&, F77_DBLE*, F77_CHAR_ARG_DECL F77_CHAR_ARG_LEN_DECL);
     }
     
     DEFUN_DLD (fortrandemo, args, , "Fortran Demo")
     {
       if (args.length () != 1)
         print_usage ();
     
       NDArray a = args(0).array_value ();
     
       double *av = a.fortran_vec ();
       octave_idx_type na = a.numel ();
     
       OCTAVE_LOCAL_BUFFER (char, ctmp, 128);
     
       F77_XFCN (fortransub, FORTSUB,
                 (na, av, ctmp F77_CHAR_ARG_LEN (128)));
     
       return ovl (a, std::string (ctmp));
     }

and the Fortran function is

           subroutine fortransub (n, a, s)
           implicit none
           character*(*) s
           real*8 a(*)
           integer*4 i, n, ioerr
           do i = 1, n
             if (a(i) .eq. 0d0) then
               call xstopx ('fortransub: divide by zero')
             else
               a(i) = 1d0 / a(i)
             endif
           enddo
           write (unit = s, fmt = '(a,i3,a,a)', iostat = ioerr)
          $       'There are ', n,
          $       ' values in the input vector', char(0)
           if (ioerr .ne. 0) then
             call xstopx ('fortransub: error writing string')
           endif
           return
           end

   This example demonstrates most of the features needed to link to an
external Fortran function, including passing arrays and strings, as well
as exception handling.  Both the Fortran and C++ files need to be
compiled in order for the example to work.

     mkoctfile fortrandemo.cc fortransub.f
     [b, s] = fortrandemo (1:3)
     ⇒
       b = 1.00000   0.50000   0.33333
       s = There are   3 values in the input vector
     [b, s] = fortrandemo (0:3)
     error: fortrandemo: fortransub: divide by zero


File: octave.info,  Node: Allocating Local Memory in Oct-Files,  Next: Input Parameter Checking in Oct-Files,  Prev: Calling External Code from Oct-Files,  Up: Oct-Files

A.1.10 Allocating Local Memory in Oct-Files
-------------------------------------------

Allocating memory within an oct-file might seem easy, as the C++
new/delete operators can be used.  However, in that case great care must
be taken to avoid memory leaks.  The preferred manner in which to
allocate memory for use locally is to use the ‘OCTAVE_LOCAL_BUFFER’
macro.  An example of its use is

     OCTAVE_LOCAL_BUFFER (double, tmp, len)

that returns a pointer ‘tmp’ of type ‘double *’ of length ‘len’.

   In this case, Octave itself will worry about reference counting and
variable scope and will properly free memory without programmer
intervention.


File: octave.info,  Node: Input Parameter Checking in Oct-Files,  Next: Exception and Error Handling in Oct-Files,  Prev: Allocating Local Memory in Oct-Files,  Up: Oct-Files

A.1.11 Input Parameter Checking in Oct-Files
--------------------------------------------

Because oct-files are compiled functions they open up the possibility of
crashing Octave through careless function calls or memory faults.  It is
quite important that each and every function have a sufficient level of
parameter checking to ensure that Octave behaves well.

   The minimum requirement, as previously discussed, is to check the
number of input arguments before using them to avoid referencing a
nonexistent argument.  However, in some cases this might not be
sufficient as the underlying code imposes further constraints.  For
example, an external function call might be undefined if the input
arguments are not integers, or if one of the arguments is zero, or if
the input is complex and a real value was expected.  Therefore,
oct-files often need additional input parameter checking.

   There are several functions within Octave that can be useful for the
purposes of parameter checking.  These include the methods of the
‘octave_value’ class like ‘is_real_matrix’, ‘is_numeric_type’, etc.
(see ‘ov.h’).  Often, with a knowledge of the Octave m-file language,
you can guess at what the corresponding C++ routine will.  In addition
there are some more specialized input validation functions of which a
few are demonstrated below.

     #include <octave/oct.h>
     
     DEFUN_DLD (paramdemo, args, nargout, "Parameter Check Demo")
     {
       if (args.length () != 1)
         print_usage ();
     
       NDArray m = args(0).array_value ();
     
       double min_val = -10.0;
       double max_val = 10.0;
     
       octave_stdout << "Properties of input array:\n";
     
       if (m.any_element_is_negative ())
         octave_stdout << "  includes negative values\n";
     
       if (m.any_element_is_inf_or_nan ())
         octave_stdout << "  includes Inf or NaN values\n";
     
       if (m.any_element_not_one_or_zero ())
         octave_stdout << "  includes other values than 1 and 0\n";
     
       if (m.all_elements_are_int_or_inf_or_nan ())
         octave_stdout << "  includes only int, Inf or NaN values\n";
     
       if (m.all_integers (min_val, max_val))
         octave_stdout << "  includes only integers in [-10,10]\n";
     
       return octave_value_list ();
     }

An example of its use is:

     paramdemo ([1, 2, NaN, Inf])
     ⇒ Properties of input array:
          includes Inf or NaN values
          includes other values than 1 and 0
          includes only int, Inf or NaN values


File: octave.info,  Node: Exception and Error Handling in Oct-Files,  Next: Documentation and Testing of Oct-Files,  Prev: Input Parameter Checking in Oct-Files,  Up: Oct-Files

A.1.12 Exception and Error Handling in Oct-Files
------------------------------------------------

Another important feature of Octave is its ability to react to the user
typing <Control-C> during extended calculations.  This ability is based
on the C++ exception handler, where memory allocated by the C++
new/delete methods is automatically released when the exception is
treated.  When writing an oct-file which may run for a long time the
programmer must periodically use the macro ‘OCTAVE_QUIT’, in order to
allow Octave to check and possibly respond to a user typing <Control-C>.
For example:

     for (octave_idx_type i = 0; i < a.nelem (); i++)
       {
         OCTAVE_QUIT;
         b.elem (i) = 2. * a.elem (i);
       }

   The presence of the ‘OCTAVE_QUIT’ macro in the inner loop allows
Octave to detect and acknowledge a <Control-C> key sequence.  Without
this macro, the user must either wait for the oct-file function to
return before the interrupt is processed, or the user must press
<Control-C> three times which will force Octave to exit completely.

   The ‘OCTAVE_QUIT’ macro does impose a very small performance penalty;
For loops that are known to be small it may not make sense to include
‘OCTAVE_QUIT’.

   When creating an oct-file that uses an external library, the function
might spend a significant portion of its time in the external library.
It is not generally possible to use the ‘OCTAVE_QUIT’ macro in this
case.  The alternative code in this case is

     BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
     ...  some code that calls a "foreign" function ...
     END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;

   The disadvantage of this is that if the foreign code allocates any
memory internally, then this memory might be lost during an interrupt,
without being deallocated.  Therefore, ideally Octave itself should
allocate any memory that is needed by the foreign code, with either the
‘fortran_vec’ method or the ‘OCTAVE_LOCAL_BUFFER’ macro.

   The Octave ‘unwind_protect’ mechanism (*note The unwind_protect
Statement::) can also be used in oct-files.  In conjunction with the
exception handling of Octave, it ensures that certain recovery code is
always run even if an exception occurs.  An example of the use of this
mechanism is

     #include <octave/oct.h>
     #include <octave/unwind-prot.h>
     
     void
     my_err_handler (const char *fmt, ...)
     {
       // Do nothing!!
     }
     
     void
     my_err_with_id_handler (const char *id, const char *fmt, ...)
     {
       // Do nothing!!
     }
     
     DEFUN_DLD (unwinddemo, args, nargout, "Unwind Demo")
     {
       if (args.length () < 2)
         print_usage ();
     
       NDArray a = args(0).array_value ();
       NDArray b = args(1).array_value ();
     
       // Create unwind_action objects.  At the end of the enclosing scope,
       // destructors for these objects will call the given functions with
       // the specified arguments.
     
       octave::unwind_action restore_warning_handler
         (set_liboctave_warning_handler, current_liboctave_warning_handler);
     
       octave::unwind_action restore_warning_with_id_handler
         (set_liboctave_warning_with_id_handler,
          current_liboctave_warning_with_id_handler);
     
       set_liboctave_warning_handler (my_err_handler);
       set_liboctave_warning_with_id_handler (my_err_with_id_handler);
     
       return octave_value (quotient (a, b));
     }

   As can be seen in the example:

     unwinddemo (1, 0)
     ⇒ Inf
     1 / 0
     ⇒ warning: division by zero
        Inf

   The warning for division by zero (and in fact all warnings) are
disabled in the ‘unwinddemo’ function.


File: octave.info,  Node: Documentation and Testing of Oct-Files,  Prev: Exception and Error Handling in Oct-Files,  Up: Oct-Files

A.1.13 Documentation and Testing of Oct-Files
---------------------------------------------

The documentation for an oct-file is contained in the fourth string
parameter of the ‘DEFUN_DLD’ macro.  This string can be formatted in the
same manner as the help strings for user functions, however there are
some issues that are particular to the formatting of help strings within
oct-files.

   The major issue is that the help string will typically be longer than
a single line of text, and so the formatting of long multi-line help
strings needs to be taken into account.  There are several possible
solutions, but the most common is illustrated in the following example,

     DEFUN_DLD (do_what_i_want, args, nargout,
       "-*- texinfo -*-\n\
     @deftypefn {} {} do_what_i_say (@var{n})\n\
     A function that does what the user actually wants rather\n\
     than what they requested.\n\
     @end deftypefn")
     {
     ...
     }

where each line of text is terminated by ‘\n\’ which is an embedded
newline in the string together with a C++ string continuation character.
Note that the final ‘\’ must be the last character on the line.

   Octave also includes the ability to embed test and demonstration code
for a function within the code itself (*note Test and Demo Functions::).
This can be used from within oct-files (or in fact any file) with
certain provisos.  First, the test and demo functions of Octave look for
‘%!’ as the first two characters of a line to identify test and
demonstration code.  This is a requirement for oct-files as well.  In
addition, the test and demonstration code must be wrapped in a comment
block to avoid it being interpreted by the compiler.  Finally, the
Octave test and demonstration code must have access to the original
source code of the oct-file—not just the compiled code—as the tests are
stripped from the compiled code.  An example in an oct-file might be

     /*
     %!assert (sin ([1,2]), [sin(1),sin(2)])
     %!error (sin ())
     %!error (sin (1,1))
     */


File: octave.info,  Node: Mex-Files,  Next: Standalone Programs,  Prev: Oct-Files,  Up: External Code Interface

A.2 Mex-Files
=============

Octave includes an interface to allow legacy mex-files to be compiled
and used with Octave.  This interface can also be used to share compiled
code between Octave and MATLAB users.  However, as mex-files expose
MATLAB’s internal API, and the internal structure of Octave is
different, a mex-file can never have the same performance in Octave as
the equivalent oct-file.  In particular, to support the manner in which
variables are passed to mex functions there are a significant number of
additional copies of memory blocks when invoking or returning from a
mex-file function.  For this reason, it is recommended that any new code
be written with the oct-file interface previously discussed.

* Menu:

* Getting Started with Mex-Files::
* Working with Matrices and Arrays in Mex-Files::
* Character Strings in Mex-Files::
* Cell Arrays with Mex-Files::
* Structures with Mex-Files::
* Sparse Matrices with Mex-Files::
* Calling Other Functions in Mex-Files::


File: octave.info,  Node: Getting Started with Mex-Files,  Next: Working with Matrices and Arrays in Mex-Files,  Up: Mex-Files

A.2.1 Getting Started with Mex-Files
------------------------------------

The basic command to build a mex-file is either ‘mkoctfile --mex’ or
‘mex’.  The first command can be used either from within Octave or from
the command line.  To avoid issues with MATLAB’s own ‘mex’ command, the
use of the command ‘mex’ is limited to within Octave.  Compiled
mex-files have the extension ‘.mex’.

 -- : mex [-options] file ...
 -- : status = mex (...)
     Compile source code written in C, C++, or Fortran, to a MEX file.

     STATUS is the return status of the ‘mkoctfile’ function.

     If the compilation fails, and the output argument is not requested,
     an error is raised.  If the programmer requests STATUS, however,
     Octave will merely issue a warning and it is the programmer’s
     responsibility to verify the command was successful.

     This is equivalent to ‘mkoctfile --mex [-options] file’.

     See also: *note mkoctfile: XREFmkoctfile, *note mexext: XREFmexext.

 -- : mexext ()
     Return the filename extension used for MEX files.

     See also: *note mex: XREFmex.

   Consider the following short example:

     #include "mex.h"
     
     void
     mexFunction (int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[])
     {
       mexPrintf ("Hello, World!\n");
     
       mexPrintf ("I have %d inputs and %d outputs\n", nrhs, nlhs);
     
       /* Return empty matrices for any outputs */
       int i;
       for (i = 0; i < nlhs; i++)
         plhs[i] = mxCreateDoubleMatrix (0, 0, mxREAL);
     }

   The first line ‘#include "mex.h"’ makes available all of the
definitions necessary for a mex-file.  One important difference between
Octave and MATLAB is that the header file "matrix.h" is implicitly
included through the inclusion of "mex.h".  This is necessary to avoid a
conflict with the Octave file "Matrix.h" for operating systems and
compilers that don’t distinguish between filenames in upper and lower
case.

   The entry point into the mex-file is defined by ‘mexFunction’.  The
function takes four arguments:

  1. The number of return arguments (# of left-hand side args).

  2. An array of pointers to return arguments.

  3. The number of input arguments (# of right-hand side args).

  4. An array of pointers to input arguments.

   Note that the function name definition is not explicitly included in
‘mexFunction’ and so there can only be a single ‘mexFunction’ entry
point per file.  Instead, the name of the function as seen in Octave is
determined by the name of the mex-file itself minus the extension.  If
the above function is in the file ‘myhello.c’, it can be compiled with

     mkoctfile --mex myhello.c

which creates a file ‘myhello.mex’.  The function can then be run from
Octave as

     myhello (1,2,3)
     ⇒ Hello, World!
     ⇒ I have 3 inputs and 0 outputs

   It should be noted that the mex-file contains no help string.  To
document mex-files, there should exist an m-file in the same directory
as the mex-file itself.  Taking the above as an example, there would
need to be a file ‘myhello.m’ which might contain the text

     %MYHELLO Simple test of the functionality of a mex-file.

   In this case, the function that will be executed within Octave will
be given by the mex-file, while the help string will come from the
m-file.  This can also be useful to allow a sample implementation of the
mex-file within the Octave language itself for testing purposes.

   Although there cannot be multiple entry points in a single mex-file,
one can use the ‘mexFunctionName’ function to determine what name the
mex-file was called with.  This can be used to alter the behavior of the
mex-file based on the function name.  For example, if

     #include "mex.h"
     
     void
     mexFunction (int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[])
     {
       const char *nm;
     
       nm = mexFunctionName ();
       mexPrintf ("You called function: %s\n", nm);
       if (strcmp (nm, "myfunc") == 0)
         mexPrintf ("This is the principal function\n", nm);
     
       return;
     }

is in the file ‘myfunc.c’, and is compiled with

     mkoctfile --mex myfunc.c
     ln -s myfunc.mex myfunc2.mex

then as can be seen by

     myfunc ()
     ⇒ You called function: myfunc
         This is the principal function
     myfunc2 ()
     ⇒ You called function: myfunc2

the behavior of the mex-file can be altered depending on the function’s
name.

   Although the user should only include ‘mex.h’ in their code, Octave
declares additional functions, typedefs, etc., available to the user to
write mex-files in the headers ‘mexproto.h’ and ‘mxarray.h’.


File: octave.info,  Node: Working with Matrices and Arrays in Mex-Files,  Next: Character Strings in Mex-Files,  Prev: Getting Started with Mex-Files,  Up: Mex-Files

A.2.2 Working with Matrices and Arrays in Mex-Files
---------------------------------------------------

The basic mex type of all variables is ‘mxArray’.  Any object, such as a
matrix, cell array, or structure, is stored in this basic type.
‘mxArray’ serves essentially the same purpose as the ‘octave_value’
class in oct-files in that it acts as a container for all the more
specialized types.

   The ‘mxArray’ structure contains at a minimum, the name of the
variable it represents, its dimensions, its type, and whether the
variable is real or complex.  It can also contain a number of additional
fields depending on the type of the ‘mxArray’.  There are a number of
functions to create ‘mxArray’ structures, including
‘mxCreateDoubleMatrix’, ‘mxCreateCellArray’, ‘mxCreateSparse’, and the
generic ‘mxCreateNumericArray’.

   The basic function to access the data in an array is ‘mxGetPr’.
Because the mex interface assumes that real and imaginary parts of a
complex array are stored separately, there is an equivalent function
‘mxGetPi’ that gets the imaginary part.  Both of these functions are
only for use with double precision matrices.  The generic functions
‘mxGetData’ and ‘mxGetImagData’ perform the same operation for all
matrix types.  For example:

     mxArray *m;
     mwSize *dims;
     UINT32_T *pr;

     dims = (mwSize *) mxMalloc (2 * sizeof (mwSize));
     dims[0] = 2; dims[1] = 2;
     m = mxCreateNumericArray (2, dims, mxUINT32_CLASS, mxREAL);
     pr = (UINT32_T *) mxGetData (m);

   There are also the functions ‘mxSetPr’, etc., that perform the
inverse, and set the data of an array to use the block of memory pointed
to by the argument of ‘mxSetPr’.

   Note the type ‘mwSize’ used above, and also ‘mwIndex’, are defined as
the native precision of the indexing in Octave on the platform on which
the mex-file is built.  This allows both 32- and 64-bit platforms to
support mex-files.  ‘mwSize’ is used to define array dimensions and the
maximum number or elements, while ‘mwIndex’ is used to define indexing
into arrays.

   An example that demonstrates how to work with arbitrary real or
complex double precision arrays is given by the file ‘mypow2.c’ shown
below.

     #include "mex.h"
     
     void
     mexFunction (int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[])
     {
       mwSize n;
       mwIndex i;
       double *vri, *vro;
     
       if (nrhs != 1 || ! mxIsDouble (prhs[0]))
         mexErrMsgTxt ("ARG1 must be a double matrix");
     
       n = mxGetNumberOfElements (prhs[0]);
       plhs[0] = mxCreateNumericArray (mxGetNumberOfDimensions (prhs[0]),
                                       mxGetDimensions (prhs[0]),
                                       mxGetClassID (prhs[0]),
                                       mxIsComplex (prhs[0]));
       vri = mxGetPr (prhs[0]);
       vro = mxGetPr (plhs[0]);
     
       if (mxIsComplex (prhs[0]))
         {
           double *vii, *vio;
           vii = mxGetPi (prhs[0]);
           vio = mxGetPi (plhs[0]);
     
           for (i = 0; i < n; i++)
             {
               vro[i] = vri[i] * vri[i] - vii[i] * vii[i];
               vio[i] = 2 * vri[i] * vii[i];
             }
         }
       else
         {
           for (i = 0; i < n; i++)
             vro[i] = vri[i] * vri[i];
         }
     }

An example of its use is

     b = randn (4,1) + 1i * randn (4,1);
     all (b.^2 == mypow2 (b))
     ⇒ 1

   The example above uses the functions ‘mxGetDimensions’,
‘mxGetNumberOfElements’, and ‘mxGetNumberOfDimensions’ to work with the
dimensions of multi-dimensional arrays.  The functions ‘mxGetM’, and
‘mxGetN’ are also available to find the number of rows and columns in a
2-D matrix (MxN matrix).


File: octave.info,  Node: Character Strings in Mex-Files,  Next: Cell Arrays with Mex-Files,  Prev: Working with Matrices and Arrays in Mex-Files,  Up: Mex-Files

A.2.3 Character Strings in Mex-Files
------------------------------------

As mex-files do not make the distinction between single and double
quoted strings that Octave does, there is perhaps less complexity in the
use of strings and character matrices.  An example of their use that
parallels the demo in ‘stringdemo.cc’ is given in the file ‘mystring.c’,
as shown below.

     #include <string.h>
     #include "mex.h"
     
     void
     mexFunction (int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[])
     {
       mwSize m, n;
       mwIndex i, j;
       mxChar *pi, *po;
     
       if (nrhs != 1 || ! mxIsChar (prhs[0])
           || mxGetNumberOfDimensions (prhs[0]) > 2)
         mexErrMsgTxt ("ARG1 must be a char matrix");
     
       m = mxGetM (prhs[0]);
       n = mxGetN (prhs[0]);
       pi = mxGetChars (prhs[0]);
       plhs[0] = mxCreateNumericMatrix (m, n, mxCHAR_CLASS, mxREAL);
       po = mxGetChars (plhs[0]);
     
       for (j = 0; j < n; j++)
         for (i = 0; i < m; i++)
           po[j*m + m - 1 - i] = pi[j*m + i];
     }

An example of its expected output is

     mystring (["First String"; "Second String"])
     ⇒ Second String
        First String

   Other functions in the mex interface for handling character strings
are ‘mxCreateString’, ‘mxArrayToString’, and
‘mxCreateCharMatrixFromStrings’.  In a mex-file, a character string is
considered to be a vector rather than a matrix.  This is perhaps an
arbitrary distinction as the data in the ‘mxArray’ for the matrix is
consecutive in any case.


File: octave.info,  Node: Cell Arrays with Mex-Files,  Next: Structures with Mex-Files,  Prev: Character Strings in Mex-Files,  Up: Mex-Files

A.2.4 Cell Arrays with Mex-Files
--------------------------------

One can perform exactly the same operations on Cell arrays in mex-files
as in oct-files.  An example that duplicates the function of the
‘celldemo.cc’ oct-file in a mex-file is given by ‘mycell.c’ as shown
below.

     #include "mex.h"
     
     void
     mexFunction (int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[])
     {
       mwSize n;
       mwIndex i;
     
       if (nrhs != 1 || ! mxIsCell (prhs[0]))
         mexErrMsgTxt ("ARG1 must be a cell");
     
       n = mxGetNumberOfElements (prhs[0]);
       n = (n > nlhs ? nlhs : n);
     
       for (i = 0; i < n; i++)
         plhs[i] = mxDuplicateArray (mxGetCell (prhs[0], i));
     }

The output is identical to the oct-file version as well.

     [b1, b2, b3] = mycell ({1, [1, 2], "test"})
     ⇒
     b1 =  1
     b2 =

        1   2

     b3 = test

   Note in the example the use of the ‘mxDuplicateArray’ function.  This
is needed as the ‘mxArray’ pointer returned by ‘mxGetCell’ might be
deallocated.  The inverse function to ‘mxGetCell’, used for setting Cell
values, is ‘mxSetCell’ and is defined as

     void mxSetCell (mxArray *ptr, int idx, mxArray *val);

   Finally, to create a cell array or matrix, the appropriate functions
are

     mxArray *mxCreateCellArray (int ndims, const int *dims);
     mxArray *mxCreateCellMatrix (int m, int n);


File: octave.info,  Node: Structures with Mex-Files,  Next: Sparse Matrices with Mex-Files,  Prev: Cell Arrays with Mex-Files,  Up: Mex-Files

A.2.5 Structures with Mex-Files
-------------------------------

The basic function to create a structure in a mex-file is
‘mxCreateStructMatrix’ which creates a structure array with a two
dimensional matrix, or ‘mxCreateStructArray’.

     mxArray *mxCreateStructArray (int ndims, int *dims,
                                   int num_keys,
                                   const char **keys);
     mxArray *mxCreateStructMatrix (int rows, int cols,
                                    int num_keys,
                                    const char **keys);

   Accessing the fields of the structure can then be performed with
‘mxGetField’ and ‘mxSetField’ or alternatively with the
‘mxGetFieldByNumber’ and ‘mxSetFieldByNumber’ functions.

     mxArray *mxGetField (const mxArray *ptr, mwIndex index,
                          const char *key);
     mxArray *mxGetFieldByNumber (const mxArray *ptr,
                                  mwIndex index, int key_num);
     void mxSetField (mxArray *ptr, mwIndex index,
                      const char *key, mxArray *val);
     void mxSetFieldByNumber (mxArray *ptr, mwIndex index,
                              int key_num, mxArray *val);

   A difference between the oct-file interface to structures and the
mex-file version is that the functions to operate on structures in
mex-files directly include an ‘index’ over the elements of the arrays of
elements per ‘field’; Whereas, the oct-file structure includes a Cell
Array per field of the structure.

   An example that demonstrates the use of structures in a mex-file can
be found in the file ‘mystruct.c’ shown below.

     #include "mex.h"
     
     void
     mexFunction (int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[])
     {
       int i;
       mwIndex j;
       mxArray *v;
       const char *keys[] = { "this", "that" };
     
       if (nrhs != 1 || ! mxIsStruct (prhs[0]))
         mexErrMsgTxt ("ARG1 must be a struct");
     
       for (i = 0; i < mxGetNumberOfFields (prhs[0]); i++)
         for (j = 0; j < mxGetNumberOfElements (prhs[0]); j++)
           {
             mexPrintf ("field %s(%d) = ", mxGetFieldNameByNumber (prhs[0], i), j);
             v = mxGetFieldByNumber (prhs[0], j, i);
             mexCallMATLAB (0, NULL, 1, &v, "disp");
           }
     
       v = mxCreateStructMatrix (2, 2, 2, keys);
     
       mxSetFieldByNumber (v, 0, 0, mxCreateString ("this1"));
       mxSetFieldByNumber (v, 0, 1, mxCreateString ("that1"));
       mxSetFieldByNumber (v, 1, 0, mxCreateString ("this2"));
       mxSetFieldByNumber (v, 1, 1, mxCreateString ("that2"));
       mxSetFieldByNumber (v, 2, 0, mxCreateString ("this3"));
       mxSetFieldByNumber (v, 2, 1, mxCreateString ("that3"));
       mxSetFieldByNumber (v, 3, 0, mxCreateString ("this4"));
       mxSetFieldByNumber (v, 3, 1, mxCreateString ("that4"));
     
       if (nlhs)
         plhs[0] = v;
     }

   An example of the behavior of this function within Octave is then

     a(1).f1 = "f11"; a(1).f2 = "f12";
     a(2).f1 = "f21"; a(2).f2 = "f22";
     b = mystruct (a);
     ⇒  field f1(0) = f11
         field f1(1) = f21
         field f2(0) = f12
         field f2(1) = f22
     b
     ⇒ 2x2 struct array containing the fields:

          this
          that

     b(3)
     ⇒ scalar structure containing the fields:

          this = this3
          that = that3


File: octave.info,  Node: Sparse Matrices with Mex-Files,  Next: Calling Other Functions in Mex-Files,  Prev: Structures with Mex-Files,  Up: Mex-Files

A.2.6 Sparse Matrices with Mex-Files
------------------------------------

The Octave format for sparse matrices is identical to the mex format in
that it is a compressed column sparse format.  Also, in both
implementations sparse matrices are required to be two-dimensional.  The
only difference of importance to the programmer is that the real and
imaginary parts of the matrix are stored separately.

   The mex-file interface, in addition to using ‘mxGetM’, ‘mxGetN’,
‘mxSetM’, ‘mxSetN’, ‘mxGetPr’, ‘mxGetPi’, ‘mxSetPr’, and ‘mxSetPi’, also
supplies the following functions.

     mwIndex *mxGetIr (const mxArray *ptr);
     mwIndex *mxGetJc (const mxArray *ptr);
     mwSize mxGetNzmax (const mxArray *ptr);

     void mxSetIr (mxArray *ptr, mwIndex *ir);
     void mxSetJc (mxArray *ptr, mwIndex *jc);
     void mxSetNzmax (mxArray *ptr, mwSize nzmax);

‘mxGetNzmax’ gets the maximum number of elements that can be stored in
the sparse matrix.  This is not necessarily the number of nonzero
elements in the sparse matrix.  ‘mxGetJc’ returns an array with one
additional value than the number of columns in the sparse matrix.  The
difference between consecutive values of the array returned by ‘mxGetJc’
define the number of nonzero elements in each column of the sparse
matrix.  Therefore,

     mwSize nz, n;
     mwIndex *Jc;
     mxArray *m;
     ...
     n = mxGetN (m);
     Jc = mxGetJc (m);
     nz = Jc[n];

returns the actual number of nonzero elements stored in the matrix in
‘nz’.  As the arrays returned by ‘mxGetPr’ and ‘mxGetPi’ only contain
the nonzero values of the matrix, we also need a pointer to the rows of
the nonzero elements, and this is given by ‘mxGetIr’.  A complete
example of the use of sparse matrices in mex-files is given by the file
‘mysparse.c’ shown below.

     #include "mex.h"
     
     void
     mexFunction (int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[])
     {
       mwSize m, n, nz;
       mxArray *v;
       mwIndex i;
       double *pr, *pi;
       double *pr2, *pi2;
       mwIndex *ir, *jc;
       mwIndex *ir2, *jc2;
     
       if (nrhs != 1 || ! mxIsSparse (prhs[0]))
         mexErrMsgTxt ("ARG1 must be a sparse matrix");
     
       m = mxGetM (prhs[0]);
       n = mxGetN (prhs[0]);
       nz = mxGetNzmax (prhs[0]);
     
       if (mxIsComplex (prhs[0]))
         {
           mexPrintf ("Matrix is %d-by-%d complex sparse matrix", m, n);
           mexPrintf (" with %d elements\n", nz);
     
           pr = mxGetPr (prhs[0]);
           pi = mxGetPi (prhs[0]);
           ir = mxGetIr (prhs[0]);
           jc = mxGetJc (prhs[0]);
     
           i = n;
           while (jc[i] == jc[i-1] && i != 0) i--;
     
           mexPrintf ("last nonzero element (%d, %d) = (%g, %g)\n",
                      ir[nz-1]+ 1, i, pr[nz-1], pi[nz-1]);
     
           v = mxCreateSparse (m, n, nz, mxCOMPLEX);
           pr2 = mxGetPr (v);
           pi2 = mxGetPi (v);
           ir2 = mxGetIr (v);
           jc2 = mxGetJc (v);
     
           for (i = 0; i < nz; i++)
             {
               pr2[i] = 2 * pr[i];
               pi2[i] = 2 * pi[i];
               ir2[i] = ir[i];
             }
           for (i = 0; i < n + 1; i++)
             jc2[i] = jc[i];
     
           if (nlhs > 0)
             plhs[0] = v;
         }
       else if (mxIsLogical (prhs[0]))
         {
           mxLogical *pbr, *pbr2;
           mexPrintf ("Matrix is %d-by-%d logical sparse matrix", m, n);
           mexPrintf (" with %d elements\n", nz);
     
           pbr = mxGetLogicals (prhs[0]);
           ir = mxGetIr (prhs[0]);
           jc = mxGetJc (prhs[0]);
     
           i = n;
           while (jc[i] == jc[i-1] && i != 0) i--;
           mexPrintf ("last nonzero element (%d, %d) = %d\n",
                      ir[nz-1]+ 1, i, pbr[nz-1]);
     
           v = mxCreateSparseLogicalMatrix (m, n, nz);
           pbr2 = mxGetLogicals (v);
           ir2 = mxGetIr (v);
           jc2 = mxGetJc (v);
     
           for (i = 0; i < nz; i++)
             {
               pbr2[i] = pbr[i];
               ir2[i] = ir[i];
             }
           for (i = 0; i < n + 1; i++)
             jc2[i] = jc[i];
     
           if (nlhs > 0)
             plhs[0] = v;
         }
       else
         {
           mexPrintf ("Matrix is %d-by-%d real sparse matrix", m, n);
           mexPrintf (" with %d elements\n", nz);
     
           pr = mxGetPr (prhs[0]);
           ir = mxGetIr (prhs[0]);
           jc = mxGetJc (prhs[0]);
     
           i = n;
           while (jc[i] == jc[i-1] && i != 0) i--;
           mexPrintf ("last nonzero element (%d, %d) = %g\n",
                      ir[nz-1]+ 1, i, pr[nz-1]);
     
           v = mxCreateSparse (m, n, nz, mxREAL);
           pr2 = mxGetPr (v);
           ir2 = mxGetIr (v);
           jc2 = mxGetJc (v);
     
           for (i = 0; i < nz; i++)
             {
               pr2[i] = 2 * pr[i];
               ir2[i] = ir[i];
             }
           for (i = 0; i < n + 1; i++)
             jc2[i] = jc[i];
     
           if (nlhs > 0)
             plhs[0] = v;
         }
     }

   A sample usage of ‘mysparse’ is

     sm = sparse ([1, 0; 0, pi]);
     mysparse (sm)
     ⇒
     Matrix is 2-by-2 real sparse matrix with 2 elements
     last nonzero element (2, 2) = 3.14159


File: octave.info,  Node: Calling Other Functions in Mex-Files,  Prev: Sparse Matrices with Mex-Files,  Up: Mex-Files

A.2.7 Calling Other Functions in Mex-Files
------------------------------------------

It is possible to call other Octave functions from within a mex-file
using ‘mexCallMATLAB’.  An example of the use of ‘mexCallMATLAB’ can be
see in the example below.

     #include "mex.h"
     
     void
     mexFunction (int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[])
     {
       char *str;
     
       mexPrintf ("Starting file myfeval.mex\n");
     
       mexPrintf ("I have %d inputs and %d outputs\n", nrhs, nlhs);
     
       if (nrhs < 1 || ! mxIsChar (prhs[0]))
         mexErrMsgTxt ("ARG1 must be a function name");
     
       str = mxArrayToString (prhs[0]);
     
       mexPrintf ("I'm going to call the function %s\n", str);
     
       if (nlhs == 0)
         nlhs = 1;  // Octave's automatic 'ans' variable
     
       /* Cast prhs just to get rid of 'const' qualifier and stop compile warning */
       mexCallMATLAB (nlhs, plhs, nrhs-1, (mxArray**)prhs+1, str);
     
       mxFree (str);
     }

   If this code is in the file ‘myfeval.c’, and is compiled to
‘myfeval.mex’, then an example of its use is

     a = myfeval ("sin", 1)
     ⇒ Starting file myfeval.mex
        I have 2 inputs and 1 outputs
        I'm going to call the interpreter function sin
        a =  0.84147

   Note that it is not possible to use function handles within a
mex-file.


File: octave.info,  Node: Standalone Programs,  Next: Java Interface,  Prev: Mex-Files,  Up: External Code Interface

A.3 Standalone Programs
=======================

The libraries Octave uses itself can be utilized in standalone
applications.  These applications then have access, for example, to the
array and matrix classes, as well as to all of the Octave algorithms.
The following C++ program, uses class Matrix from ‘liboctave.a’ or
‘liboctave.so’.

     #include <iostream>
     #include <octave/oct.h>
     
     int
     main (void)
     {
       std::cout << "Hello Octave world!\n";
     
       int n = 2;
       Matrix a_matrix = Matrix (n, n);
     
       for (octave_idx_type i = 0; i < n; i++)
         for (octave_idx_type j = 0; j < n; j++)
           a_matrix(i,j) = (i + 1) * 10 + (j + 1);
     
       std::cout << a_matrix;
     
       return 0;
     }

mkoctfile can be used to build a standalone application with a command
like

     $ mkoctfile --link-stand-alone standalone.cc -o standalone
     $ ./standalone
     Hello Octave world!
       11 12
       21 22
     $

   Note that the application ‘standalone’ will be dynamically linked
against the Octave libraries and any Octave support libraries.  The
above allows the Octave math libraries to be used by an application.  It
does not, however, allow the script files, oct-files, or built-in
functions of Octave to be used by the application.  To do that, the
Octave interpreter needs to be initialized first.  An example of how to
do this can then be seen in the code

     #include <iostream>
     #include <octave/oct.h>
     #include <octave/octave.h>
     #include <octave/parse.h>
     #include <octave/interpreter.h>
     
     int
     main (void)
     {
       // Create interpreter.
     
       octave::interpreter interpreter;
     
       try
         {
           // Inhibit reading history file by calling
           //
           //   interpreter.initialize_history (false);
     
           // Set custom load path here if you wish by calling
           //
           //   interpreter.initialize_load_path (false);
     
           // Perform final initialization of interpreter, including
           // executing commands from startup files by calling
           //
           //   interpreter.initialize ();
           //
           //   if (! interpreter.initialized ())
           //     {
           //       std::cerr << "Octave interpreter initialization failed!"
           //                 << std::endl;
           //       exit (status);
           //     }
           //
           // You may skip this step if you don't need to do anything
           // between reading the startup files and telling the interpreter
           // that you are ready to execute commands.
     
           // Tell the interpreter that we're ready to execute commands:
     
           int status = interpreter.execute ();
     
           if (status != 0)
             {
               std::cerr << "creating embedded Octave interpreter failed!"
                         << std::endl;
               return status;
             }
     
           octave_idx_type n = 2;
           octave_value_list in;
     
           for (octave_idx_type i = 0; i < n; i++)
             in(i) = octave_value (5 * (i + 2));
     
           octave_value_list out = octave::feval ("gcd", in, 1);
     
           if (out.length () > 0)
             std::cout << "GCD of ["
                       << in(0).int_value ()
                       << ", "
                       << in(1).int_value ()
                       << "] is " << out(0).int_value ()
                       << std::endl;
           else
             std::cout << "invalid\n";
         }
       catch (const octave::exit_exception& ex)
         {
           std::cerr << "Octave interpreter exited with status = "
                     << ex.exit_status () << std::endl;
         }
       catch (const octave::execution_exception&)
         {
           std::cerr << "error encountered in Octave evaluator!" << std::endl;
         }
     
       return 0;
     }

which, as before, is compiled and run as a standalone application with

     $ mkoctfile --link-stand-alone embedded.cc -o embedded
     $ ./embedded
     GCD of [10, 15] is 5
     $

   It is worth re-iterating that, if only built-in functions are to be
called from a C++ standalone program then it does not need to initialize
the interpreter.  The general rule is that for a built-in function named
‘function_name’ in the interpreter, there will be a C++ function named
‘Ffunction_name’ (note the prepended capital ‘F’) accessible in the C++
API.  The declarations for all built-in functions are collected in the
header file ‘builtin-defun-decls.h’.  This feature should be used with
care as the list of built-in functions can change.  No guarantees can be
made that a function that is currently a built-in won’t be implemented
as a ‘.m’ file or as a dynamically linked function in the future.  An
example of how to call built-in functions from C++ can be seen in the
code

     #include <iostream>
     #include <octave/oct.h>
     #include <octave/builtin-defun-decls.h>
     
     int
     main (void)
     {
       int n = 2;
       Matrix a_matrix = Matrix (n, n);
     
       for (octave_idx_type i = 0; i < n; i++)
         for (octave_idx_type j = 0; j < n; j++)
           a_matrix(i,j) = (i + 1) * 10 + (j + 1);
     
       std::cout << "This is a matrix:" << std::endl
                 << a_matrix            << std::endl;
     
       octave_value_list in;
       in(0) = a_matrix;
     
       octave_value_list out = Fnorm (in, 1);
       double norm_of_the_matrix = out(0).double_value ();
     
       std::cout << "This is the norm of the matrix:" << std::endl
                 << norm_of_the_matrix                << std::endl;
     
       return 0;
     }

which is compiled and run as a standalone application with

     $ mkoctfile --link-stand-alone standalonebuiltin.cc -o standalonebuiltin
     $ ./standalonebuiltin
     This is a matrix:
      11 12
      21 22

     This is the norm of the matrix:
     34.4952
     $


File: octave.info,  Node: Java Interface,  Prev: Standalone Programs,  Up: External Code Interface

A.4 Java Interface
==================

The Java Interface is designed for calling Java functions from within
Octave.  If you want to do the reverse, and call Octave from within
Java, try a library like ‘joPas’ (<http://jopas.sourceforge.net>).

* Menu:

* Making Java Classes Available::
* How to use Java from within Octave::
* Set up the JVM::
* Java Interface Functions::


File: octave.info,  Node: Making Java Classes Available,  Next: How to use Java from within Octave,  Up: Java Interface

A.4.1 Making Java Classes Available
-----------------------------------

Java finds classes by searching a CLASSPATH which is a list of Java
archive files and/or directories containing class files.  In Octave the
CLASSPATH is composed of two parts:

   • the STATIC CLASSPATH is initialized once at startup of the JVM, and

   • the DYNAMIC CLASSPATH which can be modified at runtime.

   Octave searches the STATIC CLASSPATH first, and then the DYNAMIC
CLASSPATH.  Classes appearing in the STATIC CLASSPATH, as well as in the
DYNAMIC CLASSPATH, will therefore be found in the STATIC CLASSPATH and
loaded from this location.  Classes which will be used frequently, or
must be available to all users, should be added to the STATIC CLASSPATH.
The STATIC CLASSPATH is populated once from the contents of a plain text
file named ‘javaclasspath.txt’ (or ‘classpath.txt’ historically) when
the Java Virtual Machine starts.  This file contains one line for each
individual classpath to be added to the STATIC CLASSPATH.  These lines
can identify directories containing class files, or Java archives with
complete class file hierarchies.  Comment lines starting with a ‘#’ or a
‘%’ character are ignored.

   The search rules for the file ‘javaclasspath.txt’ (or
‘classpath.txt’) are:

   • First, Octave tries to locate it in the current directory (where
     Octave was started from).  If such a file is found, it is read and
     defines the initial STATIC CLASSPATH.  Thus, it is possible to
     define a static classpath on a ’per Octave invocation’ basis.

   • Next, Octave searches in the user’s home directory.  If a file
     ‘javaclasspath.txt’ exists here, its contents are appended to the
     static classpath (if any).  Thus, it is possible to build an
     initial static classpath on a ’per user’ basis.

   • Finally, Octave looks for a ‘javaclasspath.txt’ in the m-file
     directory where Octave Java functions live.  This is where the
     function ‘javaclasspath.m’ resides, usually something like
     ‘OCTAVE_HOME/share/octave/OCTAVE_VERSION/m/java/’.  You can find
     this directory by executing the command

          which javaclasspath

     If this file exists here, its contents are also appended to the
     STATIC CLASSPATH.  Note that the archives and class directories
     defined in this last step will affect all users.

   Classes which are used only by a specific script should be placed in
the DYNAMIC CLASSPATH.  This portion of the classpath can be modified at
runtime using the ‘javaaddpath’ and ‘javarmpath’ functions.

   Example:

     octave> base_path = "C:/Octave/java_files";

     octave> # add two JAR archives to the dynamic classpath
     octave> javaaddpath ([base_path, "/someclasses.jar"]);
     octave> javaaddpath ([base_path, "/moreclasses.jar"]);

     octave> # check the dynamic classpath
     octave> p = javaclasspath;
     octave> disp (p{1});
     C:/Octave/java_files/someclasses.jar
     octave> disp (p{2});
     C:/Octave/java_files/moreclasses.jar

     octave> # remove the first element from the classpath
     octave> javarmpath ([base_path, "/someclasses.jar"]);
     octave> p = javaclasspath;
     octave> disp (p{1});
     C:/Octave/java_files/moreclasses.jar

     octave> # provoke an error
     octave> disp (p{2});
     error: A(I): Index exceeds matrix dimension.

   Another way to add files to the DYNAMIC CLASSPATH exclusively for
your user account is to use the file ‘.octaverc’ which is stored in your
home directory.  All Octave commands in this file are executed each time
you start a new instance of Octave.  The following example adds the
directory ‘octave’ to Octave’s search path and the archive
‘myclasses.jar’ in this directory to the Java search path.

     # contents of .octaverc:
     addpath ("~/octave");
     javaaddpath ("~/octave/myclasses.jar");


File: octave.info,  Node: How to use Java from within Octave,  Next: Set up the JVM,  Prev: Making Java Classes Available,  Up: Java Interface

A.4.2 How to use Java from within Octave
----------------------------------------

The function *note javaObject: XREFjavaObject. creates Java objects.  In
fact it invokes the public constructor of the class with the given name
and with the given parameters.

   The following example shows how to invoke the constructors
‘BigDecimal(double)’ and ‘BigDecimal(String)’ of the builtin Java class
‘java.math.BigDecimal’.

     javaObject ("java.math.BigDecimal",  1.001 );
     javaObject ("java.math.BigDecimal", "1.001");

   Note that parameters of the Octave type ‘double’ are implicitly
converted into the Java type ‘double’ and the Octave type (array of)
‘char’ is converted into the java type ‘String’.  A Java object created
by *note javaObject: XREFjavaObject. is never automatically converted
into an Octave type but remains a Java object.  It can be assigned to an
Octave variable.

     a = 1.001;
     b = javaObject ("java.math.BigDecimal", a);

   Using *note isjava: XREFisjava, it is possible to check whether a
variable is a Java object and its class can be determined as well.  In
addition to the previous example:

     isjava (a)
     ⇒ ans = 0
     class (a)
     ⇒ ans = double
     isjava (b)
     ⇒ ans = 1
     class (b)
     ⇒ ans = java.math.BigDecimal

   The example above can be carried out using only Java objects:

     a = javaObject ("java.lang.Double", 1.001);
     b = javaObject ("java.math.BigDecimal", a);

     isjava (a)
     ⇒ ans = 1
     class (a)
     ⇒ ans = java.lang.Double
     isjava (b)
     ⇒ ans = 1
     class (b)
     ⇒ ans = java.math.BigDecimal

   One can see, that even a ‘java.lang.Double’ is not converted to an
Octave ‘double’, when created by *note javaObject: XREFjavaObject.  But
ambiguities might arise, if the Java classes ‘java.lang.Double’ or
‘double’ are parameters of a method (or a constructor).  In this case
they can be converted into one another, depending on the context.

   Via *note javaObject: XREFjavaObject. one may create all kinds of
Java objects but arrays.  The latter are created through *note
javaArray: XREFjavaArray.

   It is possible to invoke public member methods on Java objects in
Java syntax:

     a.toString
     ⇒ ans = 1.001
     b.toString
     ⇒ ans = 1.000999999999999889865...

   The second result may be surprising, but simply comes from the fact,
that ‘1.001’ cannot exactly be represented as ‘double’, due to rounding.
Note that unlike in Java, in Octave methods without arguments can be
invoked with and without parentheses ‘()’.

   Currently it is not possible to invoke static methods with a Java
like syntax from within Octave.  Instead, one has to use the function
*note javaMethod: XREFjavaMethod. as in the following example:

     java.math.BigDecimal.valueOf(1.001);                    # does not work
     javaMethod ("valueOf", "java.math.BigDecimal", 1.001);  # workaround

   As mentioned before, method and constructor parameters are converted
automatically between Octave and Java types, if appropriate.  For
functions this is also true with return values, whereas for constructors
this is not.

   It is also possible to access public fields of Java objects from
within Octave using Java syntax, with the limitation of static fields:

     java.math.BigDecimal.ONE;                  # does not work
     java_get ("java.math.BigDecimal", "ONE");  # workaround

   Accordingly, with *note java_set: XREFjava_set. the value of a field
can be set.  Note that only public Java fields are accessible from
within Octave.

   The following example indicates that in Octave empty brackets ‘[]’
represent Java’s ‘null’ value and how Java exceptions are represented.

     javaObject ("java.math.BigDecimal", []);
     ⇒ error: [java] java.lang.NullPointerException

   It is not recommended to represent Java’s ‘null’ value by empty
brackets ‘[]’, because ‘null’ has no type whereas ‘[]’ has type
‘double’.

   In Octave it is possible to provide limited Java reflection by
listing the public fields and methods of a Java object, both static or
not.

     fieldnames (<Java object>)
     methods (<Java object>)

   Finally, an examples is shown how to access the stack trace from
within Octave, where the function *note debug_java: XREFdebug_java. is
used to set and to get the current debug state.  In debug mode, the Java
error and the stack trace are displayed.

     debug_java (true)  # use "false" to omit display of stack trace
     debug_java ()
     ⇒ ans = 1
     javaObject ("java.math.BigDecimal", "1") ...
       .divide (javaObject ("java.math.BigDecimal", "0"))


File: octave.info,  Node: Set up the JVM,  Next: Java Interface Functions,  Prev: How to use Java from within Octave,  Up: Java Interface

A.4.3 Set up the JVM
--------------------

In order to execute Java code Octave creates a Java Virtual Machine
(JVM). By default the version of the JVM is used that was detected
during configuration on Unix-like systems or that is pointed to from the
registry keys at ‘HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\JRE’ or
‘HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\Java Runtime Environment’ on
Windows.  The default path to the JVM can be overridden by setting the
environment variable ‘JAVA_HOME’ to the path where the JVM is installed.
On Windows that might be, for example, ‘C:\Program
Files\Java\jre-10.0.2’.  Make sure that you select a directory that
contains the JVM with a bit-ness that matches Octave’s.

   The JVM is only loaded once per Octave session.  Thus, to change the
used version of the JVM, you might have to re-start Octave.  To check
which version of the JVM is currently being used, run ‘version -java’.

   The JVM allocates a fixed amount of initial memory and may expand
this pool up to a fixed maximum memory limit.  The default values depend
on the Java version (*note javamem: XREFjavamem.).  The memory pool is
shared by all Java objects running in the JVM.  This strict memory limit
is intended mainly to avoid runaway applications inside web browsers or
in enterprise servers which can consume all memory and crash the system.
When the maximum memory limit is hit, Java code will throw exceptions so
that applications will fail or behave unexpectedly.

   You can specify options for the creation of the JVM inside a file
named ‘java.opts’.  This is a text file where enter you enter lines
containing ‘-X’ and ‘-D’ options that are then passed to the JVM during
initialization.

   The directory where the Java options file is located is specified by
the environment variable ‘OCTAVE_JAVA_DIR’.  If unset the directory
where ‘javaclasspath.m’ resides is used instead (typically
‘OCTAVE_HOME/share/octave/OCTAVE_VERSION/m/java/’).  You can find this
directory by executing

     which javaclasspath

   The ‘-X’ options allow you to increase the maximum amount of memory
available to the JVM.  The following example allows up to 256 Megabytes
to be used by adding the following line to the ‘java.opts’ file:

     -Xmx256m

   The maximum possible amount of memory depends on your system.  On a
Windows system with 2 Gigabytes main memory you should be able to set
this maximum to about 1 Gigabyte.

   If your application requires a large amount of memory from the
beginning, you can also specify the initial amount of memory allocated
to the JVM.  Adding the following line to the ‘java.opts’ file starts
the JVM with 64 Megabytes of initial memory:

     -Xms64m

   For more details on the available ‘-X’ options of your Java Virtual
Machine issue the command ‘java -X’ at the operating system command
prompt and consult the Java documentation.

   The ‘-D’ options can be used to define system properties which can
then be used by Java classes inside Octave.  System properties can be
retrieved by using the ‘getProperty()’ methods of the ‘java.lang.System’
class.  The following example line defines the property MYPROPERTY and
assigns it the string ‘12.34’.

     -DMyProperty=12.34

   The value of this property can then be retrieved as a string by a
Java object or in Octave:

     octave> javaMethod ("getProperty", "java.lang.System", "MyProperty");
     ans = 12.34

See also: javamem.


File: octave.info,  Node: Java Interface Functions,  Prev: Set up the JVM,  Up: Java Interface

A.4.4 Java Interface Functions
------------------------------

The following functions are the core of the Java Interface.  They
provide a way to create a Java object, get and set its data fields, and
call Java methods which return results to Octave.

 -- : JOBJ = javaObject (CLASSNAME)
 -- : JOBJ = javaObject (CLASSNAME, ARG1, ...)
     Create a Java object of class CLASSSNAME, by calling the class
     constructor with the arguments ARG1, ...

     The first example below creates an uninitialized object, while the
     second example supplies an initial argument to the constructor.

          x = javaObject ("java.lang.StringBuffer")
          x = javaObject ("java.lang.StringBuffer", "Initial string")

     See also: *note javaMethod: XREFjavaMethod, *note javaArray:
     XREFjavaArray.

 -- : JARY = javaArray (CLASSNAME, SZ)
 -- : JARY = javaArray (CLASSNAME, M, N, ...)

     Create a Java array of size SZ with elements of class CLASSNAME.

     CLASSNAME may be a Java object representing a class or a string
     containing the fully qualified class name.  The size of the object
     may also be specified with individual integer arguments M, N, etc.

     The generated array is uninitialized.  All elements are set to null
     if CLASSNAME is a reference type, or to a default value (usually 0)
     if CLASSNAME is a primitive type.

     Sample code:

          jary = javaArray ("java.lang.String", 2, 2);
          jary(1,1) = "Hello";

     See also: *note javaObject: XREFjavaObject.

   There are many different variable types in Octave, but only ones
created through ‘javaObject’ can use Java functions.  Before using Java
with an unknown object the type can be checked with ‘isjava’.

 -- : isjava (X)
     Return true if X is a Java object.

     See also: *note class: XREFclass, *note typeinfo: XREFtypeinfo,
     *note isa: XREFisa, *note javaObject: XREFjavaObject.

   Once an object has been created it is natural to find out what fields
the object has, and to read (get) and write (set) them.

   In Octave the ‘fieldnames’ function for structures has been
overloaded to return the fields of a Java object.  For example:

     dobj = javaObject ("java.lang.Double", pi);
     fieldnames (dobj)
     ⇒
     {
       [1,1] = public static final double java.lang.Double.POSITIVE_INFINITY
       [1,2] = public static final double java.lang.Double.NEGATIVE_INFINITY
       [1,3] = public static final double java.lang.Double.NaN
       [1,4] = public static final double java.lang.Double.MAX_VALUE
       [1,5] = public static final double java.lang.Double.MIN_NORMAL
       [1,6] = public static final double java.lang.Double.MIN_VALUE
       [1,7] = public static final int java.lang.Double.MAX_EXPONENT
       [1,8] = public static final int java.lang.Double.MIN_EXPONENT
       [1,9] = public static final int java.lang.Double.SIZE
       [1,10] = public static final java.lang.Class java.lang.Double.TYPE
     }

   The analogy of objects with structures is carried over into reading
and writing object fields.  To read a field the object is indexed with
the ‘.’ operator from structures.  This is the preferred method for
reading fields, but Octave also provides a function interface to read
fields with ‘java_get’.  An example of both styles is shown below.

     dobj = javaObject ("java.lang.Double", pi);
     dobj.MAX_VALUE
     ⇒  1.7977e+308
     java_get ("java.lang.Float", "MAX_VALUE")
     ⇒  3.4028e+38

 -- : VAL = java_get (OBJ, NAME)
     Get the value of the field NAME of the Java object OBJ.

     For static fields, OBJ can be a string representing the fully
     qualified name of the corresponding class.

     When OBJ is a regular Java object, structure-like indexing can be
     used as a shortcut syntax.  For instance, the following two
     statements are equivalent

            java_get (x, "field1")
            x.field1

     See also: *note java_set: XREFjava_set, *note javaMethod:
     XREFjavaMethod, *note javaObject: XREFjavaObject.

 -- : OBJ = java_set (OBJ, NAME, VAL)
     Set the value of the field NAME of the Java object OBJ to VAL.

     For static fields, OBJ can be a string representing the fully
     qualified named of the corresponding Java class.

     When OBJ is a regular Java object, structure-like indexing can be
     used as a shortcut syntax.  For instance, the following two
     statements are equivalent

            java_set (x, "field1", val)
            x.field1 = val

     See also: *note java_get: XREFjava_get, *note javaMethod:
     XREFjavaMethod, *note javaObject: XREFjavaObject.

   To see what functions can be called with an object use ‘methods’.
For example, using the previously created DOBJ:

     methods (dobj)
     ⇒
     Methods for class java.lang.Double:
     boolean equals(java.lang.Object)
     java.lang.String toString(double)
     java.lang.String toString()
     ...

   To call a method of an object the same structure indexing operator
‘.’ is used.  Octave also provides a functional interface to calling the
methods of an object through ‘javaMethod’.  An example showing both
styles is shown below.

     dobj = javaObject ("java.lang.Double", pi);
     dobj.equals (3)
     ⇒  0
     javaMethod ("equals", dobj, pi)
     ⇒  1

 -- : RET = javaMethod (METHODNAME, OBJ)
 -- : RET = javaMethod (METHODNAME, OBJ, ARG1, ...)
     Invoke the method METHODNAME on the Java object OBJ with the
     arguments ARG1, ....

     For static methods, OBJ can be a string representing the fully
     qualified name of the corresponding class.

     When OBJ is a regular Java object, structure-like indexing can be
     used as a shortcut syntax.  For instance, the two following
     statements are equivalent

            ret = javaMethod ("method1", x, 1.0, "a string")
            ret = x.method1 (1.0, "a string")

     ‘javaMethod’ returns the result of the method invocation.

     See also: *note methods: XREFmethods, *note javaObject:
     XREFjavaObject.

   The following three functions are used to display and modify the
class path used by the Java Virtual Machine.  This is entirely separate
from Octave’s ‘PATH’ variable and is used by the JVM to find the correct
code to execute.

 -- : javaclasspath ()
 -- : DPATH = javaclasspath ()
 -- : [DPATH, SPATH] = javaclasspath ()
 -- : CLSPATH = javaclasspath (WHAT)
     Return the class path of the Java virtual machine in the form of a
     cell array of strings.

     If called with no inputs:

        • If no output is requested, the dynamic and static classpaths
          are printed to the standard output.

        • If one output value DPATH is requested, the result is the
          dynamic classpath.

        • If two output valuesDPATH and SPATH are requested, the first
          variable will contain the dynamic classpath and the second
          will contain the static classpath.

     If called with a single input parameter WHAT:

     "-dynamic"
          Return the dynamic classpath.

     "-static"
          Return the static classpath.

     "-all"
          Return both the static and dynamic classpath in a single
          cellstr.

     See also: *note javaaddpath: XREFjavaaddpath, *note javarmpath:
     XREFjavarmpath.

 -- : javaaddpath (CLSPATH)
 -- : javaaddpath (CLSPATH1, ...)
 -- : javaaddpath ({CLSPATH1, ...})
 -- : javaaddpath (..., "-end")
     Add CLSPATH to the beginning of the dynamic class path of the Java
     virtual machine.

     CLSPATH may either be a directory where ‘.class’ files are found,
     or a ‘.jar’ file containing Java classes.  Multiple paths may be
     added at once by specifying additional arguments, or by using a
     cell array of strings.

     If the final argument is "-end", append the new element to the end
     of the current classpath.

     See also: *note javarmpath: XREFjavarmpath, *note javaclasspath:
     XREFjavaclasspath.

 -- : javarmpath (CLSPATH)
 -- : javarmpath (CLSPATH1, ...)
 -- : javarmpath ({CLSPATH1, ...})
     Remove CLSPATH from the dynamic class path of the Java virtual
     machine.

     CLSPATH may either be a directory where ‘.class’ files are found,
     or a ‘.jar’ file containing Java classes.  Multiple paths may be
     removed at once by specifying additional arguments, or by using a
     cell array of strings.

     See also: *note javaaddpath: XREFjavaaddpath, *note javaclasspath:
     XREFjavaclasspath.

   The following functions provide information and control over the
interface between Octave and the Java Virtual Machine.

 -- : javachk (FEATURE)
 -- : javachk (FEATURE, CALLER)
 -- : MSG = javachk (...)
     Check for the presence of the Java FEATURE in the current session.
     Return an error structure if FEATURE is not available, not enabled,
     or not recognized.

     Possible recognized features are:

     "awt"
          Abstract Window Toolkit for GUIs.

     "desktop"
          Interactive desktop is running.

     "jvm"
          Java Virtual Machine.

     "swing"
          Swing components for lightweight GUIs.

     If FEATURE is not supported, a scalar struct with field "message"
     and "identifier" is returned.  The field "message" contains an
     error message mentioning FEATURE as well as the optional
     user-specified CALLER.  This structure is suitable for passing in
     to the ‘error’ function.

     If FEATURE is supported and available, an empty struct array is
     returned with fields "message" and "identifier".

     ‘javachk’ determines if specific Java features are available in an
     Octave session.  This function is provided for scripts which may
     alter their behavior based on the availability of Java or specific
     Java runtime features.

     Compatibility Note: The feature "desktop" is never available since
     Octave has no Java-based desktop.

     See also: *note usejava: XREFusejava, *note error: XREFerror.

 -- : usejava (FEATURE)
     Return true if the Java element FEATURE is available.

     Possible features are:

     "awt"
          Abstract Window Toolkit for GUIs.

     "desktop"
          Interactive desktop is running.

     "jvm"
          Java Virtual Machine.

     "swing"
          Swing components for lightweight GUIs.

     ‘usejava’ determines if specific Java features are available in an
     Octave session.  This function is provided for scripts which may
     alter their behavior based on the availability of Java.  The
     feature "desktop" always returns ‘false’ as Octave has no
     Java-based desktop.  Other features may be available if Octave was
     compiled with the Java Interface and Java is installed.

     See also: *note javachk: XREFjavachk.

 -- : javamem ()
 -- : JMEM = javamem ()
     Show the current memory usage of the Java virtual machine (JVM) and
     run the garbage collector.

     When no return argument is given the info is printed to the screen.
     Otherwise, the output cell array JMEM contains Maximum, Total, and
     Free memory (in bytes).

     All Java-based routines are run in the JVM’s shared memory pool, a
     dedicated and separate part of memory claimed by the JVM from your
     computer’s total memory (which comprises physical RAM and virtual
     memory / swap space on hard disk).

     The maximum allowable memory usage can be configured using the file
     ‘java.opts’.  The directory where this file resides is determined
     by the environment variable ‘OCTAVE_JAVA_DIR’.  If unset, the
     directory where ‘javaaddpath.m’ resides is used instead (typically
     ‘OCTAVE_HOME/share/octave/OCTAVE_VERSION/m/java/’).

     ‘java.opts’ is a plain text file with one option per line.  The
     default initial memory size and default maximum memory size (which
     are both system dependent) can be overridden like so:

     -Xms64m

     -Xmx512m

     (in megabytes in this example).  You can adapt these values to your
     own requirements if your system has limited available physical
     memory or if you get Java memory errors.

     "Total memory" is what the operating system has currently assigned
     to the JVM and depends on actual and active memory usage.  "Free
     memory" is self-explanatory.  During operation of Java-based Octave
     functions the amount of Total and Free memory will vary, due to
     Java’s own cleaning up and your operating system’s memory
     management.

 -- : VAL = java_matrix_autoconversion ()
 -- : OLD_VAL = java_matrix_autoconversion (NEW_VAL)
 -- : java_matrix_autoconversion (NEW_VAL, "local")
     Query or set the internal variable that controls whether Java
     arrays are automatically converted to Octave matrices.

     The default value is false.

     When called from inside a function with the "local" option, the
     variable is changed locally for the function and any subroutines it
     calls.  The original variable value is restored when exiting the
     function.

     See also: *note java_unsigned_autoconversion:
     XREFjava_unsigned_autoconversion, *note debug_java: XREFdebug_java.

 -- : VAL = java_unsigned_autoconversion ()
 -- : OLD_VAL = java_unsigned_autoconversion (NEW_VAL)
 -- : java_unsigned_autoconversion (NEW_VAL, "local")
     Query or set the internal variable that controls how integer
     classes are converted when ‘java_matrix_autoconversion’ is enabled.

     When enabled, Java arrays of class Byte or Integer are converted to
     matrices of class uint8 or uint32 respectively.  The default value
     is true.

     When called from inside a function with the "local" option, the
     variable is changed locally for the function and any subroutines it
     calls.  The original variable value is restored when exiting the
     function.

     See also: *note java_matrix_autoconversion:
     XREFjava_matrix_autoconversion, *note debug_java: XREFdebug_java.

 -- : VAL = debug_java ()
 -- : OLD_VAL = debug_java (NEW_VAL)
 -- : debug_java (NEW_VAL, "local")
     Query or set the internal variable that determines whether extra
     debugging information regarding the initialization of the JVM and
     any Java exceptions is printed.

     When called from inside a function with the "local" option, the
     variable is changed locally for the function and any subroutines it
     calls.  The original variable value is restored when exiting the
     function.

     See also: *note java_matrix_autoconversion:
     XREFjava_matrix_autoconversion, *note java_unsigned_autoconversion:
     XREFjava_unsigned_autoconversion.


File: octave.info,  Node: Test and Demo Functions,  Next: Obsolete Functions,  Prev: External Code Interface,  Up: Top

Appendix B Test and Demo Functions
**********************************

Octave includes a number of functions to allow the integration of
testing and demonstration code in the source code of the functions
themselves.

* Menu:

* Test Functions::
* Demonstration Functions::


File: octave.info,  Node: Test Functions,  Next: Demonstration Functions,  Up: Test and Demo Functions

B.1 Test Functions
==================

 -- : test NAME
 -- : test NAME quiet|normal|verbose
 -- : test ("NAME", "quiet|normal|verbose", FID)
 -- : test ("NAME", "quiet|normal|verbose", FNAME)
 -- : SUCCESS = test (...)
 -- : [N, NMAX, NXFAIL, NBUG, NSKIP, NRTSKIP, NREGRESSION] = test (...)
 -- : [CODE, IDX] = test ("NAME", "grabdemo")
 -- : test ([], "explain", FID)
 -- : test ([], "explain", FNAME)

     Perform built-in self-tests from the first file in the loadpath
     matching NAME.

     ‘test’ can be called in either command or functional form.  The
     exact operation of test is determined by a combination of mode
     (interactive or batch), reporting level ("quiet", "normal",
     "verbose"), and whether a logfile or summary output variable is
     used.

     The default mode when ‘test’ is called from the command line is
     interactive.  In this mode, tests will be run until the first error
     is encountered, or all tests complete successfully.  In batch mode,
     all tests are run regardless of any failures, and the results are
     collected for reporting.  Tests which require user interaction,
     i.e., demo blocks, are never run in batch mode.

     Batch mode is enabled by either 1) specifying a logfile using the
     third argument FNAME or FID, or 2) requesting an output argument
     such as SUCCESS, N, etc.

     The optional second argument determines the amount of output to
     generate and which types of tests to run.  The default value is
     "normal".  Requesting an output argument will suppress printing the
     final summary message and any intermediate warnings, unless verbose
     reporting is enabled.

     "quiet"
          Print a summary message when all tests pass, or print an error
          with the results of the first bad test when a failure occurs.
          Don’t run tests which require user interaction.

     "normal"
          Display warning messages about skipped tests or failing xtests
          during test execution.  Print a summary message when all tests
          pass, or print an error with the results of the first bad test
          when a failure occurs.  Don’t run tests which require user
          interaction.

     "verbose"
          Display tests before execution.  Print all warning messages.
          In interactive mode, run all tests including those which
          require user interaction.

     The optional third input argument specifies a logfile where results
     of the tests should be written.  The logfile may be a character
     string (FNAME) or an open file descriptor ID (FID).  To enable
     batch processing, but still print the results to the screen, use
     ‘stdout’ for FID.

     When called with just a single output argument SUCCESS, ‘test’
     returns true if all of the tests were successful.  If called with
     more than one output argument then the number of successful tests
     (N), the total number of tests in the file (NMAX), the number of
     xtest failures (NXFAIL), the number of tests failed due known bugs
     (NBUG), the number of tests skipped due to missing features
     (NSKIP), the number of tests skipped due to run-time conditions
     (NRTSKIP), and the number of regressions (NREGRESSION) are
     returned.

     Example

          test sind
          ⇒
          PASSES 5 out of 5 tests

          [n, nmax] = test ("sind")
          ⇒
          n =  5
          nmax =  5

     Additional Calling Syntaxes

     If the second argument is the string "grabdemo", the contents of
     any built-in demo blocks are extracted but not executed.  The text
     for all code blocks is concatenated and returned as CODE with IDX
     being a vector of positions of the ends of each demo block.  For an
     easier way to extract demo blocks from files, *Note ‘example’:
     XREFexample.

     If the second argument is "explain" then NAME is ignored and an
     explanation of the line markers used in ‘test’ output reports is
     written to the file specified by FNAME or FID.

     See also: *note assert: XREFassert, *note fail: XREFfail, *note
     demo: XREFdemo, *note example: XREFexample, *note error: XREFerror.

   ‘test’ scans the named script file looking for lines which start with
the identifier ‘%!’.  The prefix is stripped off and the rest of the
line is processed through the Octave interpreter.  If the code generates
an error, then the test is said to fail.

   Since ‘eval()’ will stop at the first error it encounters, you must
divide your tests up into blocks, with anything in a separate block
evaluated separately.  Blocks are introduced by valid keywords like
‘test’, ‘function’, or ‘assert’ immediately following ‘%!’.  A block is
defined by indentation as in Python.  Lines beginning with
‘%!<whitespace>’ are part of the preceding block.

   For example:

     %!test error ("this test fails!")
     %!test "test doesn't fail.  it doesn't generate an error"

   When a test fails, you will see something like:

       ***** test error ("this test fails!")
     !!!!! test failed
     this test fails!

   Generally, to test if something works, you want to assert that it
produces a correct value.  A real test might look something like

     %!test
     %! A = [1, 2, 3; 4, 5, 6]; B = [1; 2];
     %! expect = [ A ; 2*A ];
     %! get = kron (B, A);
     %! if (any (size (expect) != size (get)))
     %!   error ("wrong size: expected %d,%d but got %d,%d",
     %!          size (expect), size (get));
     %! elseif (any (any (expect != get)))
     %!   error ("didn't get what was expected.");
     %! endif

   To make the process easier, use the ‘assert’ function.  For example,
with ‘assert’ the previous test is reduced to:

     %!test
     %! A = [1, 2, 3; 4, 5, 6]; B = [1; 2];
     %! assert (kron (B, A), [ A; 2*A ]);

   ‘assert’ can accept a tolerance so that you can compare results
absolutely or relatively.  For example, the following all succeed:

     %!test assert (1+eps, 1, 2*eps)           # absolute error
     %!test assert (100+100*eps, 100, -2*eps)  # relative error

   You can also do the comparison yourself, but still have assert
generate the error:

     %!test assert (isempty ([]))
     %!test assert ([1, 2; 3, 4] > 0)

   Because ‘assert’ is so frequently used alone in a test block, there
is a shorthand form:

     %!assert (...)

which is equivalent to:

     %!test assert (...)

   Occasionally a block of tests will depend on having optional
functionality in Octave.  Before testing such blocks the availability of
the required functionality must be checked.  A ‘%!testif HAVE_XXX’ block
will only be run if Octave was compiled with functionality ‘HAVE_XXX’.
For example, the sparse single value decomposition, ‘svds()’, depends on
having the ARPACK library.  All of the tests for ‘svds’ begin with

     %!testif HAVE_ARPACK

Review ‘config.h’ or ‘__octave_config_info__ ("build_features")’ to see
some of the possible values to check.

   Sometimes during development there is a test that should work but is
known to fail.  You still want to leave the test in because when the
final code is ready the test should pass, but you may not be able to fix
it immediately.  To avoid unnecessary bug reports for these known
failures, mark the block with ‘xtest’ rather than ‘test’:

     %!xtest assert (1==0)
     %!xtest fail ("success=1", "error")

In this case, the test will run and any failure will be reported.
However, testing is not aborted and subsequent test blocks will be
processed normally.  Another use of ‘xtest’ is for statistical tests
which should pass most of the time but are known to fail occasionally.

   Each block is evaluated in its own function environment, which means
that variables defined in one block are not automatically shared with
other blocks.  If you do want to share variables, then you must declare
them as ‘shared’ before you use them.  For example, the following
declares the variable A, gives it an initial value (default is empty),
and then uses it in several subsequent tests.

     %!shared A
     %! A = [1, 2, 3; 4, 5, 6];
     %!assert (kron ([1; 2], A), [ A; 2*A ])
     %!assert (kron ([1, 2], A), [ A, 2*A ])
     %!assert (kron ([1,2; 3,4], A), [ A,2*A; 3*A,4*A ])

   You can share several variables at the same time:

     %!shared A, B

   You can also share test functions:

     %!function A = fn (B)
     %!  A = 2*B;
     %!endfunction
     %!assert (fn(2), 4)

   Note that all previous variables and values are lost when a new
shared block is declared.

   Remember that ‘%!function’ begins a new block and that
‘%!endfunction’ ends this block.  Be aware that until a new block is
started, lines starting with ‘%!<space>’ will be discarded as comments.
The following is nearly identical to the example above, but does
nothing.

     %!function A = fn (B)
     %!  A = 2*B;
     %!endfunction
     %! assert (fn(2), 4)

Because there is a space after ‘%!’ the ‘assert’ statement does not
begin a new block and this line is treated as a comment.

   Error and warning blocks are like test blocks, but they only succeed
if the code generates an error.  You can check the text of the error is
correct using an optional regular expression ‘<pattern>’.  For example:

     %!error <passes!> error ("this test passes!")

   If the code doesn’t generate an error, the test fails.  For example:

     %!error "this is an error because it succeeds."

produces

       ***** error "this is an error because it succeeds."
     !!!!! test failed: no error

   It is important to automate the tests as much as possible, however
some tests require user interaction.  These can be isolated into demo
blocks, which if you are in batch mode, are only run when called with
‘demo’ or the ‘verbose’ option to ‘test’.  The code is displayed before
it is executed.  For example,

     %!demo
     %! T = [0:0.01:2*pi]; X = sin (T);
     %! plot (T, X);
     %! # you should now see a sine wave in your figure window

produces

     funcname example 1:
      T = [0:0.01:2*pi]; X = sin (T);
      plot (T, X);
      # you should now see a sine wave in your figure window

     Press <enter> to continue:

   Note that demo blocks cannot use any shared variables.  This is so
that they can be executed by themselves, ignoring all other tests.

   If you want to temporarily disable a test block, put ‘#’ in place of
the block type.  This creates a comment block which is echoed in the log
file but not executed.  For example:

     %!#demo
     %! T = [0:0.01:2*pi]; X = sin (T);
     %! plot (T, X);
     %! # you should now see a sine wave in your figure window

The following trivial code snippet provides examples for the use of
fail, assert, error, and xtest:

     function OUTPUT = must_be_zero (INPUT)
       if (INPUT != 0)
         error ("Nonzero input!")
       endif
       OUTPUT = INPUT;
     endfunction

     %!fail ("must_be_zero (1)")
     %!assert (must_be_zero (0), 0)
     %!error <Nonzero> must_be_zero (1)
     %!xtest error ("This code generates an error")

When putting this in a file ‘must_be_zero.m’, and running the test, we
see

     test must_be_zero verbose

     ⇒
     >>>>> /path/to/must_be_zero.m
     ***** fail ("must_be_zero (1)")
     ***** assert (must_be_zero (0), 0)
     ***** error <Nonzero> must_be_zero (1)
     ***** xtest error ("This code generates an error")
     !!!!! known failure
     This code generates an error
     PASSES 3 out of 4 tests (1 expected failure)

Block type summary:
...................

‘%!test’
‘%!test <MESSAGE>’
     Check that entire block is correct.  If ‘<MESSAGE>’ is present, the
     test block is interpreted as for ‘xtest’.

‘%!testif HAVE_XXX’
‘%!testif HAVE_XXX, HAVE_YYY, ...’
‘%!testif HAVE_XXX, HAVE_YYY ...; RUNTIME_COND’
‘%!testif ... <MESSAGE>’
     Check block only if Octave was compiled with feature ‘HAVE_XXX’.
     ‘RUNTIME_COND’ is an optional expression to evaluate to check
     whether some condition is met when the test is executed.  If
     ‘RUNTIME_COND’ is false, the test is skipped.  If ‘<MESSAGE>’ is
     present, the test block is interpreted as for ‘xtest’.

‘%!xtest’
‘%!xtest <MESSAGE>’
     Check block, report a test failure but do not abort testing.  If
     ‘<MESSAGE>’ is present, then the text of the message is displayed
     if the test fails, like this:

          !!!!! known bug:  MESSAGE

     If the message is an integer, it is interpreted as a bug ID for the
     Octave bug tracker and reported as

          !!!!! known bug: https://octave.org/testfailure/?BUG-ID

     in which BUG-ID is the integer bug number.  The intent is to allow
     clearer documentation of known problems.

     If ‘MESSAGE’ is an integer preceeded by an asterisk (e.g.,
     ‘*12345’), it is interpreted as the id for a bug report that has
     been closed.  That usually means that the issue probed in this test
     has been resolved.  If such tests are failing, they are reported as
     regressions by the ‘test’ function:

          !!!!! regression: https://octave.org/testfailure/?BUG-ID

‘%!error’
‘%!error <MESSAGE>’
‘%!warning’
‘%!warning <MESSAGE>’
     Check for correct error or warning message.  If ‘<MESSAGE>’ is
     supplied it is interpreted as a regular expression pattern that is
     expected to match the error or warning message.

‘%!demo’
     Demo only executes in interactive mode.

‘%!#’
     Comment.  Ignore everything within the block

‘%!shared x,y,z’
     Declare variables for use in multiple tests.

‘%!function’
     Define a function for use in multiple tests.

‘%!endfunction’
     Close a function definition.

‘%!assert (x, y, tol)’

‘%!assert <MESSAGE> (x, y, tol)’

‘%!fail (CODE, PATTERN)’

‘%!fail <MESSAGE> (CODE, PATTERN)’
     Shorthand for ‘%!test assert (x, y, tol)’ or ‘%!test fail (CODE,
     PATTERN)’.  If ‘<MESSAGE>’ is present, the test block is
     interpreted as for ‘xtest’.

   When coding tests the Octave convention is that lines that begin with
a block type do not have a semicolon at the end.  Any code that is
within a block, however, is normal Octave code and usually will have a
trailing semicolon.  For example,

     ## bare block instantiation
     %!assert (sin (0), 0)

but

     ## test block with normal Octave code
     %!test
     %! assert (sin (0), 0);

   You can also create test scripts for built-in functions and your own
C++ functions.  To do so, put a file with the bare function name (no .m
extension) in a directory in the load path and it will be discovered by
the ‘test’ function.  Alternatively, you can embed tests directly in
your C++ code:

     /*
     %!test disp ("this is a test")
     */

or

     #if 0
     %!test disp ("this is a test")
     #endif

However, in this case the raw source code will need to be on the load
path and the user will have to remember to type ‘test ("funcname.cc")’.

 -- : assert (COND)
 -- : assert (COND, ERRMSG)
 -- : assert (COND, ERRMSG, ...)
 -- : assert (COND, MSG_ID, ERRMSG, ...)
 -- : assert (OBSERVED, EXPECTED)
 -- : assert (OBSERVED, EXPECTED, TOL)

     Produce an error if the specified condition is not met.

     ‘assert’ can be called in three different ways.

     ‘assert (COND)’
     ‘assert (COND, ERRMSG)’
     ‘assert (COND, ERRMSG, ...)’
     ‘assert (COND, MSG_ID, ERRMSG, ...)’
          Called with a single argument COND, ‘assert’ produces an error
          if COND is false (numeric zero).

          Any additional arguments are passed to the ‘error’ function
          for processing.

     ‘assert (OBSERVED, EXPECTED)’
          Produce an error if observed is not the same as expected.

          Note that OBSERVED and EXPECTED can be scalars, vectors,
          matrices, strings, cell arrays, or structures.

     ‘assert (OBSERVED, EXPECTED, TOL)’
          Produce an error if observed is not the same as expected but
          equality comparison for numeric data uses a tolerance TOL.

          If TOL is positive then it is an absolute tolerance which will
          produce an error if ‘abs (OBSERVED - EXPECTED) > abs (TOL)’.

          If TOL is negative then it is a relative tolerance which will
          produce an error if ‘abs (OBSERVED - EXPECTED) > abs (TOL *
          EXPECTED)’.

          If EXPECTED is zero TOL will always be interpreted as an
          absolute tolerance.

          If TOL is not scalar its dimensions must agree with those of
          OBSERVED and EXPECTED and tests are performed on an
          element-by-element basis.

     See also: *note fail: XREFfail, *note test: XREFtest, *note error:
     XREFerror, *note isequal: XREFisequal.

 -- : fail (CODE)
 -- : fail (CODE, PATTERN)
 -- : fail (CODE, "warning")
 -- : fail (CODE, "warning", PATTERN)

     Return true if CODE fails with an error message matching PATTERN,
     otherwise produce an error.

     CODE must be in the form of a string that is passed to the Octave
     interpreter via the ‘evalin’ function, i.e., a (quoted) string
     constant or a string variable.

     Note that if CODE runs successfully, rather than failing, the error
     printed is:

                    expected error <.> but got none

     If called with two arguments, the return value will be true only if
     CODE fails with an error message containing PATTERN (case
     sensitive).  If the code fails with a different error than the one
     specified in PATTERN then the message produced is:

                    expected <PATTERN>
                    but got <text of actual error>

     The angle brackets are not part of the output.

     When called with the "warning" option ‘fail’ will produce an error
     if executing the code produces no warning.

     See also: *note assert: XREFassert, *note error: XREFerror.


File: octave.info,  Node: Demonstration Functions,  Prev: Test Functions,  Up: Test and Demo Functions

B.2 Demonstration Functions
===========================

 -- : demo NAME
 -- : demo NAME N
 -- : demo ("NAME")
 -- : demo ("NAME", N)

     Run example code block N associated with the function NAME.

     If N is not specified, all examples are run.

     The preferred location for example code blocks is embedded within
     the script m-file immediately following the code that it exercises.
     Alternatively, the examples may be stored in a file with the same
     name but no extension located on Octave’s load path.  To separate
     examples from regular script code all lines are prefixed by ‘%!’.
     Each example must also be introduced by the keyword "demo" flush
     left to the prefix with no intervening spaces.  The remainder of
     the example can contain arbitrary Octave code.  For example:

          %!demo
          %! t = 0:0.01:2*pi;
          %! x = sin (t);
          %! plot (t, x);
          %! title ("one cycle of a sine wave");
          %! #-------------------------------------------------
          %! # the figure window shows one cycle of a sine wave

     Note that the code is displayed before it is executed so that a
     simple comment at the end suffices for labeling what is being
     shown.  For plots, labeling can also be done with ‘title’ or
     ‘text’.  It is generally *not* necessary to use ‘disp’ or ‘printf’
     within the demo.

     Demos are run in a stand-alone function environment with no access
     to external variables.  This means that every demo must have
     separate initialization code.  Alternatively, all demos can be
     combined into a single large demo with the code

          %! input ("Press <enter> to continue: ", "s");

     between the sections, but this usage is discouraged.  Other
     techniques to avoid multiple initialization blocks include using
     multiple plots with a new ‘figure’ command between each plot, or
     using ‘subplot’ to put multiple plots in the same window.

     Finally, because ‘demo’ evaluates within a function context it is
     not possible to define new functions within the code.  Anonymous
     functions make a good substitute in most instances.  If function
     blocks *must* be used then the code ‘eval (example ("function",
     n))’ will allow Octave to see them.  This has its own problems,
     however, as ‘eval’ only evaluates one line or statement at a time.
     In this case the function declaration must be wrapped with "if 1
     <demo stuff> endif" where "if" is on the same line as "demo".  For
     example:

          %!demo if 1
          %!  function y = f(x)
          %!    y = x;
          %!  endfunction
          %!  f(3)
          %! endif

     See also: *note rundemos: XREFrundemos, *note example: XREFexample,
     *note test: XREFtest.

 -- : example NAME
 -- : example NAME N
 -- : example ("NAME")
 -- : example ("NAME", N)
 -- : [S, IDX] = example (...)

     Display the code for example N associated with the function NAME,
     but do not run it.

     If N is not specified, all examples are displayed.

     When called with output arguments, the examples are returned in the
     form of a string S, with IDX indicating the ending position of the
     various examples.

     For a complete explanation *note ‘demo’: XREFdemo.

     See also: *note demo: XREFdemo, *note test: XREFtest.

 -- : oruntests ()
 -- : oruntests (DIRECTORY)
     Execute built-in tests for all m-files in the specified DIRECTORY.

     Test blocks in any C++ source files (‘*.cc’) will also be executed
     for use with dynamically linked oct-file functions.

     If no directory is specified, operate on all directories in
     Octave’s search path for functions.

     See also: *note rundemos: XREFrundemos, *note test: XREFtest, *note
     path: XREFpath.

 -- : rundemos ()
 -- : rundemos (DIRECTORY)
     Execute built-in demos for all m-files in the specified DIRECTORY.

     Demo blocks in any C++ source files (‘*.cc’) will also be executed
     for use with dynamically linked oct-file functions.

     If no directory is specified, operate on all directories in
     Octave’s search path for functions.

     See also: *note demo: XREFdemo, *note oruntests: XREForuntests,
     *note path: XREFpath.

 -- : speed (F, INIT, MAX_N, F2, TOL)
 -- : [ORDER, N, T_F, T_F2] = speed (...)

     Determine the execution time of an expression (F) for various input
     values (N).

     The N are log-spaced from 1 to MAX_N.  For each N, an
     initialization expression (INIT) is computed to create any data
     needed for the test.  If a second expression (F2) is given then the
     execution times of the two expressions are compared.  When called
     without output arguments the results are printed to stdout and
     displayed graphically.

     ‘F’
          The code expression to evaluate.

     ‘MAX_N’
          The maximum test length to run.  The default value is 100.
          Alternatively, use ‘[min_n, max_n]’ or specify the N exactly
          with ‘[n1, n2, ..., nk]’.

     ‘INIT’
          Initialization expression for function argument values.  Use K
          for the test number and N for the size of the test.  This
          should compute values for all variables used by F.  Note that
          INIT will be evaluated first for k = 0, so things which are
          constant throughout the test series can be computed once.  The
          default value is ‘X = randn (N, 1)’.

     ‘F2’
          An alternative expression to evaluate, so that the speed of
          two expressions can be directly compared.  The default is
          ‘[]’.

     ‘TOL’
          Tolerance used to compare the results of expression F and
          expression F2.  If TOL is positive, the tolerance is an
          absolute one.  If TOL is negative, the tolerance is a relative
          one.  The default is ‘eps’.  If TOL is ‘Inf’, then no
          comparison will be made.

     ‘ORDER’
          The time complexity of the expression O(a*n^p).  This is a
          structure with fields ‘a’ and ‘p’.

     ‘N’
          The values N for which the expression was calculated *AND* the
          execution time was greater than zero.

     ‘T_F’
          The nonzero execution times recorded for the expression F in
          seconds.

     ‘T_F2’
          The nonzero execution times recorded for the expression F2 in
          seconds.  If required, the mean time ratio is simply ‘mean
          (T_f ./ T_f2)’.

     The slope of the execution time graph shows the approximate power
     of the asymptotic running time O(n^p).  This power is plotted for
     the region over which it is approximated (the latter half of the
     graph).  The estimated power is not very accurate, but should be
     sufficient to determine the general order of an algorithm.  It
     should indicate if, for example, the implementation is unexpectedly
     O(n^2) rather than O(n) because it extends a vector each time
     through the loop rather than pre-allocating storage.  In the
     current version of Octave, the following is not the expected O(n).

          speed ("for i = 1:n, y{i} = x(i); endfor", "", [1000, 10000])

     But it is if you preallocate the cell array ‘y’:

          speed ("for i = 1:n, y{i} = x(i); endfor", ...
                 "x = rand (n, 1); y = cell (size (x));", [1000, 10000])

     An attempt is made to approximate the cost of individual
     operations, but it is wildly inaccurate.  You can improve the
     stability somewhat by doing more work for each ‘n’.  For example:

          speed ("airy(x)", "x = rand (n, 10)", [10000, 100000])

     When comparing two different expressions (F, F2), the slope of the
     line on the speedup ratio graph should be larger than 1 if the new
     expression is faster.  Better algorithms have a shallow slope.
     Generally, vectorizing an algorithm will not change the slope of
     the execution time graph, but will shift it relative to the
     original.  For example:

          speed ("sum (x)", "", [10000, 100000], ...
                 "v = 0; for i = 1:length (x), v += x(i); endfor")

     The following is a more complex example.  If there was an original
     version of ‘xcorr’ using for loops and a second version using an
     FFT, then one could compare the run speed for various lags as
     follows, or for a fixed lag with varying vector lengths as follows:

          speed ("xcorr (x, n)", "x = rand (128, 1);", 100,
                 "xcorr_orig (x, n)", -100*eps)
          speed ("xcorr (x, 15)", "x = rand (20+n, 1);", 100,
                 "xcorr_orig (x, n)", -100*eps)

     Assuming one of the two versions is in xcorr_orig, this would
     compare their speed and their output values.  Note that the FFT
     version is not exact, so one must specify an acceptable tolerance
     on the comparison ‘100*eps’.  In this case, the comparison should
     be computed relatively, as ‘abs ((X - Y) ./ Y)’ rather than
     absolutely as ‘abs (X - Y)’.

     Type ‘example ("speed")’ to see some real examples or ‘demo
     ("speed")’ to run them.


File: octave.info,  Node: Obsolete Functions,  Next: Trouble,  Prev: Test and Demo Functions,  Up: Top

Appendix C Obsolete Functions
*****************************

After being marked as deprecated for two major releases, the following
functions have been removed from Octave.  The third column of the table
shows the version of Octave in which the function was removed.  Prior to
removal, each function in the list was marked as deprecated for at least
two major releases.  All deprecated functions issue warnings explaining
that they will be removed in a future version of Octave, and which
function should be used instead.

   Replacement functions do not always accept precisely the same
arguments as the obsolete function, but should provide equivalent
functionality.

Obsolete Function      Replacement            Version
----------------------------------------------------------
‘beta_cdf’             ‘betacdf’ in Octave    3.4.0
                       Forge statistics pkg
‘beta_inv’             ‘betainv’ in Octave    3.4.0
                       Forge statistics pkg
‘beta_pdf’             ‘betapdf’ in Octave    3.4.0
                       Forge statistics pkg
‘beta_rnd’             ‘betarnd’ in Octave    3.4.0
                       Forge statistics pkg
‘binomial_cdf’         ‘binocdf’ in Octave    3.4.0
                       Forge statistics pkg
‘binomial_inv’         ‘binoinv’ in Octave    3.4.0
                       Forge statistics pkg
‘binomial_pdf’         ‘binopdf’ in Octave    3.4.0
                       Forge statistics pkg
‘binomial_rnd’         ‘binornd’ in Octave    3.4.0
                       Forge statistics pkg
‘chisquare_cdf’        ‘chi2cdf’ in Octave    3.4.0
                       Forge statistics pkg
‘chisquare_inv’        ‘chi2inv’ in Octave    3.4.0
                       Forge statistics pkg
‘chisquare_pdf’        ‘chi2pdf’ in Octave    3.4.0
                       Forge statistics pkg
‘chisquare_rnd’        ‘chi2rnd’ in Octave    3.4.0
                       Forge statistics pkg
‘clearplot’            ‘clf’                  3.4.0
‘com2str’              ‘num2str’              3.4.0
‘exponential_cdf’      ‘expcdf’ in Octave     3.4.0
                       Forge statistics pkg
‘exponential_inv’      ‘expinv’ in Octave     3.4.0
                       Forge statistics pkg
‘exponential_pdf’      ‘exppdf’ in Octave     3.4.0
                       Forge statistics pkg
‘exponential_rnd’      ‘exprnd’ in Octave     3.4.0
                       Forge statistics pkg
‘f_cdf’                ‘fcdf’ in Octave       3.4.0
                       Forge statistics pkg
‘f_inv’                ‘finv’ in Octave       3.4.0
                       Forge statistics pkg
‘f_pdf’                ‘fpdf’ in Octave       3.4.0
                       Forge statistics pkg
‘f_rnd’                ‘frnd’ in Octave       3.4.0
                       Forge statistics pkg
‘gamma_cdf’            ‘gamcdf’ in Octave     3.4.0
                       Forge statistics pkg
‘gamma_inv’            ‘gaminv’ in Octave     3.4.0
                       Forge statistics pkg
‘gamma_pdf’            ‘gampdf’ in Octave     3.4.0
                       Forge statistics pkg
‘gamma_rnd’            ‘gamrnd’ in Octave     3.4.0
                       Forge statistics pkg
‘geometric_cdf’        ‘geocdf’ in Octave     3.4.0
                       Forge statistics pkg
‘geometric_inv’        ‘geoinv’ in Octave     3.4.0
                       Forge statistics pkg
‘geometric_pdf’        ‘geopdf’ in Octave     3.4.0
                       Forge statistics pkg
‘geometric_rnd’        ‘geornd’ in Octave     3.4.0
                       Forge statistics pkg
‘hypergeometric_cdf’   ‘hygecdf’ in Octave    3.4.0
                       Forge statistics pkg
‘hypergeometric_inv’   ‘hygeinv’ in Octave    3.4.0
                       Forge statistics pkg
‘hypergeometric_pdf’   ‘hygepdf’ in Octave    3.4.0
                       Forge statistics pkg
‘hypergeometric_rnd’   ‘hygernd’ in Octave    3.4.0
                       Forge statistics pkg
‘intersection’         ‘intersect’            3.4.0
‘is_bool’              ‘isbool’               3.4.0
‘is_complex’           ‘iscomplex’            3.4.0
‘is_list’              None                   3.4.0
‘is_matrix’            ‘ismatrix’             3.4.0
‘is_scalar’            ‘isscalar’             3.4.0
‘is_square’            ‘issquare’             3.4.0
‘is_stream’            None                   3.4.0
‘is_struct’            ‘isstruct’             3.4.0
‘is_symmetric’         ‘issymmetric’          3.4.0
‘is_vector’            ‘isvector’             3.4.0
‘lognormal_cdf’        ‘logncdf’ in Octave    3.4.0
                       Forge statistics pkg
‘lognormal_inv’        ‘logninv’ in Octave    3.4.0
                       Forge statistics pkg
‘lognormal_pdf’        ‘lognpdf’ in Octave    3.4.0
                       Forge statistics pkg
‘lognormal_rnd’        ‘lognrnd’ in Octave    3.4.0
                       Forge statistics pkg
‘meshdom’              ‘meshgrid’             3.4.0
‘normal_cdf’           ‘normcdf’ in Octave    3.4.0
                       Forge statistics pkg
‘normal_inv’           ‘norminv’ in Octave    3.4.0
                       Forge statistics pkg
‘normal_pdf’           ‘normpdf’ in Octave    3.4.0
                       Forge statistics pkg
‘normal_rnd’           ‘normrnd’ in Octave    3.4.0
                       Forge statistics pkg
‘pascal_cdf’           ‘nbincdf’ in Octave    3.4.0
                       Forge statistics pkg
‘pascal_inv’           ‘nbininv’ in Octave    3.4.0
                       Forge statistics pkg
‘pascal_pdf’           ‘nbinpdf’ in Octave    3.4.0
                       Forge statistics pkg
‘pascal_rnd’           ‘nbinrnd’ in Octave    3.4.0
                       Forge statistics pkg
‘poisson_cdf’          ‘poisscdf’ in Octave   3.4.0
                       Forge statistics pkg
‘poisson_inv’          ‘poissinv’ in Octave   3.4.0
                       Forge statistics pkg
‘poisson_pdf’          ‘poisspdf’ in Octave   3.4.0
                       Forge statistics pkg
‘poisson_rnd’          ‘poissrnd’ in Octave   3.4.0
                       Forge statistics pkg
‘polyinteg’            ‘polyint’              3.4.0
‘struct_contains’      ‘isfield’              3.4.0
‘struct_elements’      ‘fieldnames’           3.4.0
‘t_cdf’                ‘tcdf’ in Octave       3.4.0
                       Forge statistics pkg
‘t_inv’                ‘tinv’ in Octave       3.4.0
                       Forge statistics pkg
‘t_pdf’                ‘tpdf’ in Octave       3.4.0
                       Forge statistics pkg
‘t_rnd’                ‘trnd’ in Octave       3.4.0
                       Forge statistics pkg
‘uniform_cdf’          ‘unifcdf’ in Octave    3.4.0
                       Forge statistics pkg
‘uniform_inv’          ‘unifinv’ in Octave    3.4.0
                       Forge statistics pkg
‘uniform_pdf’          ‘unifpdf’ in Octave    3.4.0
                       Forge statistics pkg
‘uniform_rnd’          ‘unifrnd’ in Octave    3.4.0
                       Forge statistics pkg
‘weibull_cdf’          ‘wblcdf’ in Octave     3.4.0
                       Forge statistics pkg
‘weibull_inv’          ‘wblinv’ in Octave     3.4.0
                       Forge statistics pkg
‘weibull_pdf’          ‘wblpdf’ in Octave     3.4.0
                       Forge statistics pkg
‘weibull_rnd’          ‘wblrnd’ in Octave     3.4.0
                       Forge statistics pkg
‘wiener_rnd’           ‘wienrnd’ in Octave    3.4.0
                       Forge statistics pkg
‘create_set’           ‘unique’               3.6.0
‘dmult’                ‘diag (A) * B’         3.6.0
‘iscommand’            None                   3.6.0
‘israwcommand’         None                   3.6.0
‘lchol’                ‘chol (...,            3.6.0
                       "lower")’
‘loadimage’            ‘load’ or ‘imread’     3.6.0
‘mark_as_command’      None                   3.6.0
‘mark_as_rawcommand’   None                   3.6.0
‘spatan2’              ‘atan2’                3.6.0
‘spchol’               ‘chol’                 3.6.0
‘spchol2inv’           ‘chol2inv’             3.6.0
‘spcholinv’            ‘cholinv’              3.6.0
‘spcumprod’            ‘cumprod’              3.6.0
‘spcumsum’             ‘cumsum’               3.6.0
‘spdet’                ‘det’                  3.6.0
‘spdiag’               ‘sparse (diag          3.6.0
                       (...))’
‘spfind’               ‘find’                 3.6.0
‘sphcat’               ‘horzcat’              3.6.0
‘spinv’                ‘inv’                  3.6.0
‘spkron’               ‘kron’                 3.6.0
‘splchol’              ‘chol (...,            3.6.0
                       "lower")’
‘split’                ‘char (strsplit (s,    3.6.0
                       t))’
‘splu’                 ‘lu’                   3.6.0
‘spmax’                ‘max’                  3.6.0
‘spmin’                ‘min’                  3.6.0
‘spprod’               ‘prod’                 3.6.0
‘spqr’                 ‘qr’                   3.6.0
‘spsum’                ‘sum’                  3.6.0
‘spsumsq’              ‘sumsq’                3.6.0
‘spvcat’               ‘vertcat’              3.6.0
‘str2mat’              ‘char’                 3.6.0
‘unmark_command’       None                   3.6.0
‘unmark_rawcommand’    None                   3.6.0
‘autocor’              ‘xcorr’ in Octave      3.8.0
                       Forge signal pkg
‘autocov’              ‘xcov’ in Octave       3.8.0
                       Forge signal pkg
‘betai’                ‘betainc’              3.8.0
‘cellidx’              ‘ismember’             3.8.0
‘cquad’                ‘quadcc’               3.8.0
‘dispatch’             None                   3.8.0
‘fstat’                ‘stat’                 3.8.0
‘gammai’               ‘gammainc’             3.8.0
‘glpkmex’              ‘glpk’                 3.8.0
‘is_duplicate_entry’   ‘unique’               3.8.0
‘is_global’            ‘isglobal’             3.8.0
‘krylovb’              ‘[Uret, ~, Ucols] =    3.8.0
                       krylov (...)’
‘perror’               None                   3.8.0
‘replot’               ‘refresh’              3.8.0
‘saveimage’            ‘imwrite’              3.8.0
‘setstr’               ‘char’                 3.8.0
‘strerror’             None                   3.8.0
‘values’               ‘unique’               3.8.0
‘cut’                  ‘histc’                4.0.0
‘cor’                  ‘corr’                 4.0.0
‘corrcoef’             ‘corr’                 4.0.0
‘__error_text__’       ‘lasterr’              4.0.0
‘error_text’           ‘lasterr’              4.0.0
‘polyderiv’            ‘polyder’              4.0.0
‘shell_cmd’            ‘system’               4.0.0
‘studentize’           ‘zscore’               4.0.0
‘sylvester_matrix’     ‘hadamard (2^k)’       4.0.0
‘default_save_options’ ‘save_default_options’ 4.2.0
‘gen_doc_cache’        ‘doc_cache_create’     4.2.0
‘interp1q’             ‘interp1’              4.2.0
‘isequalwithequalnans’ ‘isequaln’             4.2.0
‘java_convert_matrix’  ‘java_matrix_autoconversion’4.2.0
‘java_debug’           ‘debug_java’           4.2.0
‘java_invoke’          ‘javaMethod’           4.2.0
‘java_new’             ‘javaObject’           4.2.0
‘java_unsigned_conversion’‘java_unsigned_autoconversion’4.2.0
‘javafields’           ‘fieldnames’           4.2.0
‘javamethods’          ‘methods’              4.2.0
‘re_read_readline_init_file’‘readline_re_read_init_file’4.2.0
‘read_readline_init_file’‘readline_read_init_file’4.2.0
‘saving_history’       ‘history_save’         4.2.0
‘allow_noninteger_range_as_index’None         4.4.0
‘bicubic’              ‘interp2’              4.4.0
‘delaunay3’            ‘delaunay’             4.4.0
‘do_braindead_shortcircuit_evaluation’None    4.4.0
‘dump_prefs’           ‘’ None 4.4.0
‘find_dir_in_path’     ‘dir_in_loadpath’      4.4.0
‘finite’               ‘isfinite’             4.4.0
‘fmod’                 ‘rem’                  4.4.0
‘fnmatch’              ‘glob’ or ‘regexp’     4.4.0
‘gmap40’               None                   4.4.0
‘loadaudio’            ‘audioread’            4.4.0
‘luinc’                ‘ichol’ or ‘ilu’       4.4.0
‘mouse_wheel_zoom’     ‘mousehweelzoom’       4.4.0
                       property
‘nfields’              ‘numfields’            4.4.0
‘octave_tmp_file_name’ ‘tempname’             4.4.0
‘playaudio’            ‘audioplayer’          4.4.0
‘saveaudio’            ‘audiowrite’           4.4.0
‘setaudio’             None                   4.4.0
‘syl’                  ‘sylvester’            4.4.0
‘usage’                ‘print_usage’          4.4.0
‘bitmax’               ‘flintmax’             5.1.0
‘mahalanobis’          ‘mahal’ in Octave      5.1.0
                       Forge statistics pkg
‘md5sum’               ‘hash’                 5.1.0
‘octave_config_info’   ‘__octave_config_info__’5.1.0
‘onenormest’           ‘normest1’             5.1.0
‘sleep’                ‘pause’                5.1.0
‘usleep’               ‘pause’                5.1.0
‘wavread’              ‘audioread’            5.1.0
‘wavwrite’             ‘audiowrite’           5.1.0


File: octave.info,  Node: Trouble,  Next: Installation,  Prev: Obsolete Functions,  Up: Top

Appendix D Known Causes of Trouble
**********************************

This section describes known problems that affect users of Octave.  Most
of these are not Octave bugs per se—if they were, we would fix them.
But the result for a user may be like the result of a bug.

   Some of these problems are due to bugs in other software, some are
missing features that are too much work to add, and some are places
where people’s opinions differ as to what is best.

* Menu:

* Actual Bugs::                 Bugs we will fix later.
* Reporting Bugs::
* How To Get Help with Octave::
* How to Distinguish Between Octave and Matlab::


File: octave.info,  Node: Actual Bugs,  Next: Reporting Bugs,  Up: Trouble

D.1 Actual Bugs We Haven’t Fixed Yet
====================================

   • Output that comes directly from Fortran functions is not sent
     through the pager and may appear out of sequence with other output
     that is sent through the pager.  One way to avoid this is to force
     pending output to be flushed before calling a function that will
     produce output from within Fortran functions.  To do this, use the
     command

          fflush (stdout)

     Another possible workaround is to use the command

          page_screen_output (false);

     to turn the pager off.

   A list of ideas for future enhancements is distributed with Octave.
See the file ‘PROJECTS’ in the top level directory in the source
distribution.


File: octave.info,  Node: Reporting Bugs,  Next: How To Get Help with Octave,  Prev: Actual Bugs,  Up: Trouble

D.2 Reporting Bugs
==================

Your bug reports play an essential role in making Octave reliable.

   When you encounter a problem, the first thing to do is to see if it
is already known.  *Note Trouble::.  If it isn’t known, then you should
report the problem.

   Reporting a bug may help you by bringing a solution to your problem,
or it may not.  In any case, the principal function of a bug report is
to help the entire community by making the next version of Octave work
better.  Bug reports are your contribution to the maintenance of Octave.

   In order for a bug report to serve its purpose, you must include the
information that makes it possible to fix the bug.

* Menu:

* Bug Criteria::
* Bug Tracker::        Where to submit your bug report.
* Bug Reporting::      How to report a bug effectively.
* Sending Patches::    How to send a patch for Octave.


File: octave.info,  Node: Bug Criteria,  Next: Bug Tracker,  Up: Reporting Bugs

D.2.1 Have You Found a Bug?
---------------------------

If you are not sure whether you have found a bug, here are some
guidelines:

   • If Octave gets a fatal signal, for any input whatever, that is a
     bug.  Reliable interpreters never crash.

   • If Octave produces incorrect results, for any input whatever, that
     is a bug.

   • Some output may appear to be incorrect when it is in fact due to a
     program whose behavior is undefined, which happened by chance to
     give the desired results on another system.  For example, the range
     operator may produce different results because of differences in
     the way floating point arithmetic is handled on various systems.

   • If Octave produces an error message for valid input, that is a bug.

   • If Octave does not produce an error message for invalid input, that
     is a bug.  However, you should note that your idea of “invalid
     input” might be my idea of “an extension” or “support for
     traditional practice”.

   • If you are an experienced user of programs like Octave, your
     suggestions for improvement are welcome in any case.


File: octave.info,  Node: Bug Tracker,  Next: Bug Reporting,  Prev: Bug Criteria,  Up: Reporting Bugs

D.2.2 Where to Report Bugs
--------------------------

To report a bug in Octave, submit a bug report to the Octave bug tracker
<https://bugs.octave.org>.

   *Do not send bug reports to ‘help-octave’*.  Most users of Octave do
not want to receive bug reports.


File: octave.info,  Node: Bug Reporting,  Next: Sending Patches,  Prev: Bug Tracker,  Up: Reporting Bugs

D.2.3 How to Report Bugs
------------------------

Submit bug reports for Octave to the Octave bug tracker
<https://bugs.octave.org>.

   The fundamental principle of reporting bugs usefully is this: *report
all the facts*.  If you are not sure whether to state a fact or leave it
out, state it!

   Often people omit facts because they think they know what causes the
problem and they conclude that some details don’t matter.  Thus, you
might assume that the name of the variable you use in an example does
not matter.  Well, probably it doesn’t, but one cannot be sure.  Perhaps
the bug is a stray memory reference which happens to fetch from the
location where that name is stored in memory; perhaps, if the name were
different, the contents of that location would fool the interpreter into
doing the right thing despite the bug.  Play it safe and give a
specific, complete example.

   Keep in mind that the purpose of a bug report is to enable someone to
fix the bug if it is not known.  Always write your bug reports on the
assumption that the bug is not known.

   Sometimes people give a few sketchy facts and ask, “Does this ring a
bell?” This cannot help us fix a bug.  It is better to send a complete
bug report to begin with.

   Try to make your bug report self-contained.  If we have to ask you
for more information, it is best if you include all the previous
information in your response, as well as the information that was
missing.

   To enable someone to investigate the bug, you should include all
these things:

   • The version of Octave.  You can get this by noting the version
     number that is printed when Octave starts, or running it with the
     ‘-v’ option.

   • A complete input file that will reproduce the bug.

     A single statement may not be enough of an example—the bug might
     depend on other details that are missing from the single statement
     where the error finally occurs.

   • The command arguments you gave Octave to execute that example and
     observe the bug.  To guarantee you won’t omit something important,
     list all the options.

     If we were to try to guess the arguments, we would probably guess
     wrong and then we would not encounter the bug.

   • The type of machine you are using, and the operating system name
     and version number.

   • The command-line arguments you gave to the ‘configure’ command when
     you installed the interpreter.

   • A complete list of any modifications you have made to the
     interpreter source.

     Be precise about these changes—show a context diff for them.

   • Details of any other deviations from the standard procedure for
     installing Octave.

   • A description of what behavior you observe that you believe is
     incorrect.  For example, "The interpreter gets a fatal signal," or,
     "The output produced at line 208 is incorrect."

     Of course, if the bug is that the interpreter gets a fatal signal,
     then one can’t miss it.  But if the bug is incorrect output, we
     might not notice unless it is glaringly wrong.

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of the interpreter is out of sync, or you have
     encountered a bug in the C library on your system.  Your copy might
     crash and the copy here would not.  If you said to expect a crash,
     then when the interpreter here fails to crash, we would know that
     the bug was not happening.  If you don’t say to expect a crash,
     then we would not know whether the bug was happening.  We would not
     be able to draw any conclusion from our observations.

     Often the observed symptom is incorrect output when your program is
     run.  Unfortunately, this is not enough information unless the
     program is short and simple.  It is very helpful if you can include
     an explanation of the expected output, and why the actual output is
     incorrect.

   • If you wish to suggest changes to the Octave source, send them as
     context diffs.  If you even discuss something in the Octave source,
     refer to it by context, not by line number, because the line
     numbers in the development sources probably won’t match those in
     your sources.

   Here are some things that are not necessary:

   • A description of the envelope of the bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and which
     changes will not affect it.  Such information is usually not
     necessary to enable us to fix bugs in Octave, but if you can find a
     simpler example to report _instead_ of the original one, that is a
     convenience.  Errors in the output will be easier to spot, running
     under the debugger will take less time, etc.  Most Octave bugs
     involve just one function, so the most straightforward way to
     simplify an example is to delete all the function definitions
     except the one in which the bug occurs.

     However, simplification is not vital; if you don’t want to do this,
     report the bug anyway and send the entire test case you used.

   • A patch for the bug.  Patches can be helpful, but if you find a
     bug, you should report it, even if you cannot send a fix for the
     problem.


File: octave.info,  Node: Sending Patches,  Prev: Bug Reporting,  Up: Reporting Bugs

D.2.4 Sending Patches for Octave
--------------------------------

If you would like to write bug fixes or improvements for Octave, that is
very helpful.  When you send your changes, please follow these
guidelines to avoid causing extra work for us in studying the patches.

   If you don’t follow these guidelines, your information might still be
useful, but using it will take extra work.  Maintaining Octave is a lot
of work in the best of circumstances, and we can’t keep up unless you do
your best to help.

   • Send an explanation with your changes of what problem they fix or
     what improvement they bring about.  For a bug fix, just include a
     copy of the bug report, and explain why the change fixes the bug.

   • Always include a proper bug report for the problem you think you
     have fixed.  We need to convince ourselves that the change is right
     before installing it.  Even if it is right, we might have trouble
     judging it if we don’t have a way to reproduce the problem.

   • Include all the comments that are appropriate to help people
     reading the source in the future understand why this change was
     needed.

   • Don’t mix together changes made for different reasons.  Send them
     _individually_.

     If you make two changes for separate reasons, then we might not
     want to install them both.  We might want to install just one.

   • Use ‘diff -c’ to make your diffs.  Diffs without context are hard
     for us to install reliably.  More than that, they make it hard for
     us to study the diffs to decide whether we want to install them.
     Unified diff format is better than contextless diffs, but not as
     easy to read as ‘-c’ format.

     If you have GNU diff, use ‘diff -cp’, which shows the name of the
     function that each change occurs in.

   • Write the change log entries for your changes.

     Read the ‘ChangeLog’ file to see what sorts of information to put
     in, and to learn the style that we use.  The purpose of the change
     log is to show people where to find what was changed.  So you need
     to be specific about what functions you changed; in large
     functions, it’s often helpful to indicate where within the function
     the change was made.

     On the other hand, once you have shown people where to find the
     change, you need not explain its purpose.  Thus, if you add a new
     function, all you need to say about it is that it is new.  If you
     feel that the purpose needs explaining, it probably does—but the
     explanation will be much more useful if you put it in comments in
     the code.

     If you would like your name to appear in the header line for who
     made the change, send us the header line.


File: octave.info,  Node: How To Get Help with Octave,  Next: How to Distinguish Between Octave and Matlab,  Prev: Reporting Bugs,  Up: Trouble

D.3 How To Get Help with Octave
===============================

The mailing list <help@octave.org> exists for the discussion of matters
related to using and installing Octave.  If would like to join the
discussion, please send a short note to <help-request@octave.org>.

   *Please do not* send requests to be added or removed from the mailing
list, or other administrative trivia to the list itself.

   If you think you have found a bug in Octave or in the installation
procedure, however, you should submit a complete bug report to the
Octave bug tracker at <https://bugs.octave.org>.  But before you submit
a bug report, please read <https://www.octave.org/bugs.html> to learn
how to submit a useful bug report.


File: octave.info,  Node: How to Distinguish Between Octave and Matlab,  Prev: How To Get Help with Octave,  Up: Trouble

D.4 How to Distinguish Between Octave and Matlab
================================================

Octave and MATLAB are very similar, but handle Java slightly different.
Therefore it may be necessary to detect the environment and use the
appropriate functions.  The following function can be used to detect the
environment.  Due to the persistent variable it can be called repeatedly
without a heavy performance hit.

   Example:

     %%
     %% Return: true if the environment is Octave.
     %%
     function retval = isOctave
       persistent cacheval;  % speeds up repeated calls

       if isempty (cacheval)
         cacheval = (exist ("OCTAVE_VERSION", "builtin") > 0);
       end

       retval = cacheval;
     end


File: octave.info,  Node: Installation,  Next: Grammar and Parser,  Prev: Trouble,  Up: Top

Appendix E Installing Octave
****************************

The procedure for installing Octave from source on a Unix-like system is
described next.  Building on other platforms will follow similar steps.
Note that this description applies to Octave releases.  Building the
development sources from the Mercurial archive requires additional steps
as described in the development source itself.

* Menu:

* Build Dependencies::
* Running Configure and Make::
* Compiling Octave with 64-bit Indexing::
* Installation Problems::


File: octave.info,  Node: Build Dependencies,  Next: Running Configure and Make,  Up: Installation

E.1 Build Dependencies
======================

Octave is a fairly large program with many build dependencies.  You may
be able to find pre-packaged versions of the dependencies distributed as
part of your system, or you may have to build some or all of them
yourself.

* Menu:

* Obtaining the Dependencies Automatically::
* Build Tools::
* External Packages::


File: octave.info,  Node: Obtaining the Dependencies Automatically,  Next: Build Tools,  Up: Build Dependencies

E.1.1 Obtaining the Dependencies Automatically
----------------------------------------------

On some systems you can obtain many of Octave’s build dependencies
automatically.  The commands for doing this vary by system.  Similarly,
the names of pre-compiled packages vary by system and do not always
match exactly the names listed in *note Build Tools:: and *note External
Packages::.

   You will usually need the development version of an external
dependency so that you get the libraries and header files for building
software, not just for running already compiled programs.  These
packages typically have names that end with the suffix ‘-dev’ or
‘-devel’.

   On systems with ‘apt-get’ (Debian, Ubuntu, etc.), you may be able to
install most of the tools and external packages using a command similar
to

     apt-get build-dep octave

The specific package name may be ‘octave3.2’ or ‘octave3.4’.  The set of
required tools and external dependencies does not change frequently, so
it is not important that the version match exactly, but you should use
the most recent one available.

   On systems with ‘yum’ (Fedora, Red Hat, etc.), you may be able to
install most of the tools and external packages using a command similar
to

     yum-builddep octave

The ‘yum-builddep’ utility is part of the ‘yum-utils’ package.

   For either type of system, the package name may include a version
number.  The set of required tools and external dependencies does not
change frequently, so it is not important that the version exactly match
the version you are installing, but you should use the most recent one
available.


File: octave.info,  Node: Build Tools,  Next: External Packages,  Prev: Obtaining the Dependencies Automatically,  Up: Build Dependencies

E.1.2 Build Tools
-----------------

The following tools are required:

C++, C, and Fortran compilers
     The Octave sources are primarily written in C++, but some portions
     are also written in C and Fortran.  The Octave sources are intended
     to be portable.  Recent versions of the GNU compiler collection
     (GCC) should work (<https://gcc.gnu.org>).  If you use GCC, you
     should avoid mixing versions.  For example, be sure that you are
     not using the obsolete ‘g77’ Fortran compiler with modern versions
     of ‘gcc’ and ‘g++’.

GNU Make
     Tool for building software (<https://www.gnu.org/software/make>).
     Octave’s build system requires GNU Make.  Other versions of Make
     will not work.  Fortunately, GNU Make is highly portable and easy
     to install.

AWK, sed, and other Unix utilities
     Basic Unix system utilities are required for building Octave.  All
     will be available with any modern Unix system and also on Windows
     with either Cygwin or MinGW and MSYS.

   Additionally, the following tools may be needed:

Bison
     Parser generator (<https://www.gnu.org/software/bison>).  You will
     need Bison if you modify the ‘oct-parse.yy’ source file or if you
     delete the files that are generated from it.

Flex
     Lexer analyzer (<https://www.gnu.org/software/flex>).  You will
     need Flex if you modify the ‘lex.ll’ source file or if you delete
     the files that are generated from it.

Autoconf
     Package for software configuration
     (<https://www.gnu.org/software/autoconf>).  Autoconf is required if
     you modify Octave’s ‘configure.ac’ file or other files that it
     requires.

Automake
     Package for Makefile generation
     (<https://www.gnu.org/software/automake>).  Automake is required if
     you modify Octave’s ‘Makefile.am’ files or other files that they
     depend on.

Libtool
     Package for building software libraries
     (<https://www.gnu.org/software/libtool>).  Libtool is required by
     Automake.

gperf
     Perfect hash function generator
     (<https://www.gnu.org/software/gperf>).  You will need gperf if you
     modify the ‘octave.gperf’ file or if you delete the file that is
     generated from it.

Texinfo
     Package for generating online and print documentation
     (<https://www.gnu.org/software/texinfo>).  You will need Texinfo to
     build Octave’s documentation or if you modify the documentation
     source files or the docstring of any Octave function.


File: octave.info,  Node: External Packages,  Prev: Build Tools,  Up: Build Dependencies

E.1.3 External Packages
-----------------------

The following external packages are required:

BLAS
     Basic Linear Algebra Subroutine library.  Accelerated BLAS
     libraries such as OpenBLAS (<https://www.openblas.net/>) or ATLAS
     (<http://math-atlas.sourceforge.net>) are recommended for best
     performance.  The reference implementation
     (<http://www.netlib.org/blas>) is slow and suffers from certain
     bugs in corner case inputs.

LAPACK
     Linear Algebra Package (<http://www.netlib.org/lapack>).

PCRE
     The Perl Compatible Regular Expression library
     (<https://www.pcre.org>).

   The following external package is optional but strongly recommended:

GNU Readline
     Command-line editing library (<https://www.gnu.org/s/readline>).

   If you wish to build Octave without GNU readline installed, you must
use the ‘--disable-readline’ option when running the configure script.

   The following external software packages are optional.  Octave can be
built without them but certain features might be missing:

ARPACK
     Library for the solution of large-scale eigenvalue problems
     (<https://forge.scilab.org/index.php/p/arpack-ng>).  ARPACK is
     required to provide the functions ‘eigs’ and ‘svds’.

cURL
     Library for transferring data with URL syntax
     (<https://curl.haxx.se>).  cURL is required to provide the
     ‘urlread’ and ‘urlwrite’ functions and the ‘ftp’ class.

FFTW3
     Library for computing discrete Fourier transforms
     (<http://www.fftw.org>).  FFTW3 is used to provide better
     performance for functions that compute discrete Fourier transforms
     (‘fft’, ‘ifft’, ‘fft2’, etc.)

FLTK
     Portable GUI toolkit (<http://www.fltk.org>).  FLTK can be used to
     provide windows for Octave’s OpenGL-based graphics functions.

fontconfig
     Library for configuring and customizing font access
     (<https://www.freedesktop.org/wiki/Software/fontconfig>).
     Fontconfig is used to manage fonts for Octave’s OpenGL-based
     graphics functions.

FreeType
     Portable font engine (<https://www.freetype.org>).  FreeType is
     used to perform font rendering for Octave’s OpenGL-based graphics
     functions.

GLPK
     GNU Linear Programming Kit (<https://www.gnu.org/software/glpk>).
     GPLK is required for the function ‘glpk’.

gl2ps
     OpenGL to PostScript printing library
     (<https://www.geuz.org/gl2ps/>).  gl2ps is required for printing
     when using OpenGL-based graphics toolkits (currently either FLTK or
     Qt).

gnuplot
     Interactive graphics program (<http://www.gnuplot.info>).  gnuplot
     can be used as a graphics renderer for Octave; prior to Octave 4.0,
     gnuplot was the default graphics renderer.

GraphicsMagick++
     Image processing library (<http://www.graphicsmagick.org>).
     GraphicsMagick++ is used to provide the ‘imread’ and ‘imwrite’
     functions.

HDF5
     Library for manipulating portable data files
     (<https://www.hdfgroup.org/HDF5>).  HDF5 is required for Octave’s
     ‘load’ and ‘save’ commands to read and write HDF data files.

Java Development Kit
     Java programming language compiler and libraries.  The OpenJDK free
     software implementation is recommended
     (<http://openjdk.java.net/>), although other JDK implementations
     may work.  Java is required to be able to call Java functions from
     within Octave.

OpenGL
     API for portable 2-D and 3-D graphics (<https://www.opengl.org>).
     An OpenGL implementation can be used to provide a renderer for
     Octave’s graphics functions.  Octave’s OpenGL-based graphics
     functions usually outperform the gnuplot-based graphics functions
     because plot data can be rendered directly instead of sending data
     and commands to gnuplot for interpretation and rendering.  Since
     Octave 4.0, the default graphics renderer ("qt") has been
     OpenGL-based.

PortAudio
     PortAudio (<http://www.portaudio.com/>) provides a very simple API
     for recording and/or playing sound using a simple callback function
     or a blocking read/write interface.  It is required for the audio
     processing functions ‘audioplayer’, ‘audiorecorder’, and
     ‘audiodevinfo’.

Qhull
     Computational geometry library (<http://www.qhull.org>).  Qhull is
     required to provide the functions ‘convhull’, ‘convhulln’,
     ‘delaunay’, ‘delaunayn’, ‘voronoi’, and ‘voronoin’.

QRUPDATE
     QR factorization updating library
     (<https://sourceforge.net/projects/qrupdate>).  QRUPDATE is used to
     provide improved performance for the functions ‘qrdelete’,
     ‘qrinsert’, ‘qrshift’, and ‘qrupdate’.

QScintilla
     Source code highlighter and manipulator; a Qt port of Scintilla
     (<http://www.riverbankcomputing.co.uk/software/qscintilla>).
     QScintilla is used for syntax highlighting and code completion in
     the GUI.

Qt
     GUI and utility libraries (<https://www.qt.io>).  Qt is required
     for building the GUI.  It is a large framework, but the only
     components required are the GUI, core, and network modules.  Since
     Octave 4.0, the default graphics renderer ("qt") has been Qt-based,
     which has been OpenGL-based.

RapidJSON
     A fast JSON parser/generator for C++ with both SAX/DOM style API
     (<https://rapidjson.org/>).  RapidJSON is required to read or write
     from or to JSON files with the functions ‘jsondecode’ and
     ‘jsonencode’.

SuiteSparse
     Sparse matrix factorization library
     (<http://faculty.cse.tamu.edu/davis/suitesparse.html>).
     SuiteSparse is required to provide sparse matrix factorizations and
     solution of linear equations for sparse systems.

SUNDIALS
     The SUite of Nonlinear and DIfferential/ALgebraic Equation Solvers
     (<https://computation.llnl.gov/projects/sundials>) is required for
     the Ordinary Differential Equations (ODE) solvers ‘ode15i’ and
     ‘ode15s’.

zlib
     Data compression library (<https://zlib.net>).  The zlib library is
     required for Octave’s ‘load’ and ‘save’ commands to handle
     compressed data, including MATLAB v5 MAT files.


File: octave.info,  Node: Running Configure and Make,  Next: Compiling Octave with 64-bit Indexing,  Prev: Build Dependencies,  Up: Installation

E.2 Running Configure and Make
==============================

   • Run the shell script ‘configure’.  This will determine the features
     your system has (or doesn’t have) and create a file named
     ‘Makefile’ from each of the files named ‘Makefile.in’.

     For a complete list of configure options, run ‘configure --help’.
     Here is a summary of the configure options that are most frequently
     used when building Octave:

     ‘--help’
          Print a summary of the options recognized by the configure
          script.

     ‘--prefix=PREFIX’
          Install Octave in subdirectories below PREFIX.  The default
          value of PREFIX is ‘/usr/local’.

     ‘--srcdir=DIR’
          Look for Octave sources in the directory DIR.

     ‘--disable-64’
          Disable using 64-bit integers for indexing arrays and use
          32-bit integers instead.  On systems with 32-bit pointers,
          this option is always disabled.  If the configure script
          determines that your BLAS library uses 32-bit integers, then
          operations using the following libraries are limited to arrays
          with dimensions that are smaller than 2^{31} elements:

             • BLAS

             • LAPACK

             • QRUPDATE

             • SuiteSparse

             • ARPACK

          Additionally, the following libraries use ‘int’ internally, so
          maximum problem sizes are always limited:

             • GLPK

             • Qhull

          *Note Compiling Octave with 64-bit Indexing::, for more
          details about building Octave with more complete support for
          large arrays.

     ‘--enable-address-sanitizer-flags’
          Enable compiler options ‘-fsanitize=address’ and
          ‘-fomit-frame-pointer’ for memory access checking.  This
          option is primarily used for debugging Octave.  Building
          Octave with this option has a negative impact on performance
          and is not recommended for general use.  It may also interfere
          with proper functioning of the GUI.

     ‘--disable-docs’
          Disable building all forms of the documentation (Info, PDF,
          HTML). The default is to build documentation, but your system
          will need functioning Texinfo and TeX installs for this to
          succeed.

     ‘--enable-float-truncate’
          This option allows for truncation of intermediate floating
          point results in calculations.  It is only necessary for
          certain platforms.

     ‘--enable-readline’
          Use the readline library to provide for editing of the command
          line in terminal environments.  This option is on by default.

     ‘--enable-shared’
          Create shared libraries (this is the default).  If you are
          planning to use the dynamic loading features, you will
          probably want to use this option.  It will make your ‘.oct’
          files much smaller and on some systems it may be necessary to
          build shared libraries in order to use dynamically linked
          functions.

          You may also want to build a shared version of ‘libstdc++’, if
          your system doesn’t already have one.

     ‘--with-blas=<lib>’
          By default, configure looks for the best BLAS matrix libraries
          on your system, including optimized implementations such as
          the free ATLAS 3.0, as well as vendor-tuned libraries.  (The
          use of an optimized BLAS will generally result in
          several-times faster matrix operations.)  Use this option to
          specify a particular BLAS library that Octave should use.

     ‘--with-lapack=<lib>’
          By default, configure looks for the best LAPACK matrix
          libraries on your system, including optimized implementations
          such as the free ATLAS 3.0, as well as vendor-tuned libraries.
          (The use of an optimized LAPACK will generally result in
          several-times faster matrix operations.)  Use this option to
          specify a particular LAPACK library that Octave should use.

     ‘--with-magick=<lib>’
          Select the Magick++ library to use for image I/O.  For many
          distributions, possible values are "GraphicsMagick++"
          (default) or "ImageMagick++".

     ‘--with-sepchar=<char>’
          Use <char> as the path separation character.  This option can
          help when running Octave on non-Unix systems.

     ‘--without-amd’
          Don’t use AMD, disable some sparse matrix functionality.

     ‘--without-camd’
          Don’t use CAMD, disable some sparse matrix functionality.

     ‘--without-colamd’
          Don’t use COLAMD, disable some sparse matrix functionality.

     ‘--without-ccolamd’
          Don’t use CCOLAMD, disable some sparse matrix functionality.

     ‘--without-cholmod’
          Don’t use CHOLMOD, disable some sparse matrix functionality.

     ‘--without-curl’
          Don’t use the cURL library, disable the ftp objects, ‘urlread’
          and ‘urlwrite’ functions.

     ‘--without-cxsparse’
          Don’t use CXSPARSE, disable some sparse matrix functionality.

     ‘--without-fftw3’
          Use the included FFTPACK library for computing Fast Fourier
          Transforms instead of the FFTW3 library.

     ‘--without-fftw3f’
          Use the included FFTPACK library for computing Fast Fourier
          Transforms instead of the FFTW3 library when operating on
          single precision (float) values.

     ‘--without-glpk’
          Don’t use the GLPK library for linear programming.

     ‘--without-hdf5’
          Don’t use the HDF5 library, disable reading and writing of
          HDF5 files.

     ‘--without-opengl’
          Don’t use OpenGL, disable native graphics toolkit for
          plotting.  You will need ‘gnuplot’ installed in order to make
          plots.

     ‘--without-qhull_r’
          Don’t use (re-entrant) Qhull, disable ‘delaunay’, ‘convhull’,
          and related functions.

     ‘--without-qrupdate’
          Don’t use QRUPDATE, disable QR and Cholesky update functions.

     ‘--without-umfpack’
          Don’t use UMFPACK, disable some sparse matrix functionality.

     ‘--without-z’
          Don’t use the zlib library, disable data file compression and
          support for recent MAT file formats.

     ‘--without-framework-carbon’
          Don’t use framework Carbon headers, libraries, or specific
          source code even if the configure test succeeds (the default
          is to use Carbon framework if available).  This is a platform
          specific configure option for Mac systems.

     ‘--without-framework-opengl’
          Don’t use framework OpenGL headers, libraries, or specific
          source code even if the configure test succeeds.  If this
          option is given then OpenGL headers and libraries in standard
          system locations are tested (the default value is
          ‘--with-framework-opengl’).  This is a platform specific
          configure option for Mac systems.

     See the file ‘INSTALL’ for more general information about the
     command line options used by configure.  That file also contains
     instructions for compiling in a directory other than the one where
     the source is located.

   • Run make.

     You will need a recent version of GNU Make as Octave relies on
     certain features not generally available in all versions of make.
     Modifying Octave’s makefiles to work with other make programs is
     probably not worth your time; instead, we simply recommend
     installing GNU Make.

     There are currently three options for plotting in Octave: the
     external program gnuplot, the internal graphics engine using OpenGL
     coupled with either FLTK or Qt widgets.  Gnuplot is a
     command-driven interactive function plotting program.

     To compile Octave, you will need a recent version of ‘g++’ or other
     ANSI C++ compiler.  In addition, you will need a Fortran 77
     compiler or ‘f2c’.  If you use ‘f2c’, you will need a script like
     ‘fort77’ that works like a normal Fortran compiler by combining
     ‘f2c’ with your C compiler in a single script.

     If you plan to modify the parser you will also need GNU ‘bison’ and
     ‘flex’.  If you modify the documentation, you will need GNU
     Texinfo.

     GNU Make, ‘gcc’ (and ‘libstdc++’), ‘gnuplot’, ‘bison’, ‘flex’, and
     Texinfo are all available from many anonymous ftp archives.  The
     primary site is <ftp://ftp.gnu.org>, but it is often very busy.  A
     list of sites that mirror the software on <ftp://ftp.gnu.org> is
     available by anonymous ftp from
     <ftp://ftp.gnu.org/pub/gnu/GNUinfo/FTP>.

     Octave requires approximately 1.4 GB of disk storage to unpack and
     compile from source (significantly less, 400 MB, if you don’t
     compile with debugging symbols).  To compile without debugging
     symbols try the command

          make CFLAGS=-O CXXFLAGS=-O LDFLAGS=

     instead of just ‘make’.

   • If you encounter errors while compiling Octave, first see *note
     Installation Problems:: for a list of known problems and if there
     is a workaround or solution for your problem.  If not, see *note
     Trouble:: for information about how to report bugs.

   • Once you have successfully compiled Octave, run ‘make install’.

     This will install a copy of Octave, its libraries, and its
     documentation in the destination directory.  As distributed, Octave
     is installed in the following directories.  In the table below,
     PREFIX defaults to ‘/usr/local’, VERSION stands for the current
     version number of the interpreter, and ARCH is the type of computer
     on which Octave is installed (for example, ‘i586-unknown-gnu’).

     ‘PREFIX/bin’
          Octave and other binaries that people will want to run
          directly.

     ‘PREFIX/lib/octave-VERSION’
          Libraries like liboctave.a and liboctinterp.a.

     ‘PREFIX/include/octave-VERSION/octave’
          Include files distributed with Octave.

     ‘PREFIX/share’
          Architecture-independent data files.

     ‘PREFIX/share/man/man1’
          Unix-style man pages describing Octave.

     ‘PREFIX/share/info’
          Info files describing Octave.

     ‘PREFIX/share/octave/VERSION/m’
          Function files distributed with Octave.  This includes the
          Octave version, so that multiple versions of Octave may be
          installed at the same time.

     ‘PREFIX/libexec/octave/VERSION/exec/ARCH’
          Executables to be run by Octave rather than the user.

     ‘PREFIX/lib/octave/VERSION/oct/ARCH’
          Object files that will be dynamically loaded.

     ‘PREFIX/share/octave/VERSION/imagelib’
          Image files that are distributed with Octave.


File: octave.info,  Node: Compiling Octave with 64-bit Indexing,  Next: Installation Problems,  Prev: Running Configure and Make,  Up: Installation

E.3 Compiling Octave with 64-bit Indexing
=========================================

Note: the following only applies to systems that have 64-bit pointers.
Configuring Octave with ‘--enable-64’ cannot magically make a 32-bit
system have a 64-bit address space.

   On 64-bit systems, Octave uses 64-bit integers for indexing arrays by
default.  If the configure script determines that your BLAS library uses
32-bit integers, then operations using the following libraries are
limited to arrays with dimensions that are smaller than 2^{31} elements:

   • BLAS

   • LAPACK

   • QRUPDATE

   • SuiteSparse

   • SUNDIALS IDA

   • ARPACK

   Additionally, the following libraries use ‘int’ internally, so
maximum problem sizes are always limited:

   • GLPK

   • Qhull

   Except for GLPK and Qhull, these libraries may also be configured to
use 64-bit integers, but most systems do not provide packages built this
way.  If you wish to experiment with large arrays, the following
information may be helpful.

   To determine the integer size of the BLAS library used by Octave, the
following code can be executed:

     clear all;
     N = 2^31;
     ## The following line requires about 8 GB of RAM!
     a = b = ones (N, 1, "single");
     c = a' * b

   If the BLAS library uses 32-bit integers, an error will be thrown:

     error: integer dimension or index out of range for Fortran
     INTEGER type

   Otherwise, if the BLAS library uses 64-bit integers, the result is:

     c = 2^31 = 2147483648

   Note that the test case above usually requires twice the memory, if A
and B are not assigned by ‘a = b = ...’.  Note further, that the data
type ‘single’ has a precision of about 23 binary bits.  In this
particular example no rounding errors occur.

   Generally, it is best to have all of these libraries in versions that
support 32-bit indexing, or all of these libraries must support 64-bit
indexing.  Mixing libraries with 64-bit indexing with libraries with
32-bit indexing can cause unpredictable behavior including program
crashes with possible loss of data.

   The following instructions were tested with the development version
of Octave and GCC 4.3.4 on an x86_64 Debian system and may be out of
date now.  Please report any problems or corrections on the Octave bug
tracker.

   The versions listed below are the versions used for testing.  If
newer versions of these packages are available, you should try to use
them, although there may be some differences.

   All libraries and header files will be installed in subdirectories of
‘$prefix64’ (you must choose the location of this directory).

   • BLAS and LAPACK (<http://www.netlib.org/lapack>)

     Reference versions for both libraries are included in the reference
     LAPACK 3.2.1 distribution from <http://www.netlib.org/>.

        − Copy the file ‘make.inc.example’ and name it ‘make.inc’.  The
          options ‘-fdefault-integer-8’ and ‘-fPIC’ (on 64-bit CPU) have
          to be added to the variable ‘OPTS’ and ‘NOOPT’.

        − Once you have compiled this library make sure that you use it
          for compiling Suite Sparse and Octave.  In the following we
          assume that you installed the LAPACK library as
          $prefix64/lib/liblapack.a.

   • QRUPDATE (<https://sourceforge.net/projects/qrupdate>)

     In the ‘Makeconf’ file:

        − Add ‘-fdefault-integer-8’ to ‘FFLAGS’.

        − Adjust the BLAS and LAPACK variables as needed if your 64-bit
          aware BLAS and LAPACK libraries are in a non-standard
          location.

        − Set ‘PREFIX’ to the top-level directory of your install tree.

        − Run ‘make solib’ to make a shared library.

        − Run ‘make install’ to install the library.

   • SuiteSparse (<http://faculty.cse.tamu.edu/davis/suitesparse.html>)

     Pass the following options to ‘make’ to enable 64-bit integers for
     BLAS library calls.  On 64-bit Windows systems, use
     ‘-DLONGBLAS="long long"’ instead.

          CFLAGS='-DLONGBLAS=long'
          CXXFLAGS='-DLONGBLAS=long'

     The SuiteSparse makefiles don’t generate shared libraries.  On some
     systems, you can generate them by doing something as simple as

          top=$(pwd)
          for f in *.a; do
            mkdir tmp
            cd tmp
            ar vx ../$f
            gcc -shared -o ../${f%%.a}.so *.o
            cd $top
            rm -rf tmp
          done

     Other systems may require a different solution.

   • SUNDIALS IDA (<https://computing.llnl.gov/projects/sundials/ida>)

     When configuring with ‘cmake’ add the flag
     ‘-DSUNDIALS_INDEX_SIZE=64’.

   • ARPACK (<https://forge.scilab.org/index.php/p/arpack-ng/>)

        − Add ‘-fdefault-integer-8’ to ‘FFLAGS’ when running configure.

        − Run ‘make’ to build the library.

        − Run ‘make install’ to install the library.

   • ATLAS instead of reference BLAS and LAPACK

     Suggestions on how to compile ATLAS would be most welcome.

   • GLPK

   • Qhull (<http://www.qhull.org>)

     Both GLPK and Qhull use ‘int’ internally so maximum problem sizes
     may be limited.

   • Octave

     Octave’s 64-bit index support is activated with the configure
     option ‘--enable-64’.

          ./configure \
            LD_LIBRARY_PATH="$prefix64/lib" \
            CPPFLAGS="-I$prefix64/include" LDFLAGS="-L$prefix64/lib" \
            --enable-64

     You must ensure that all Fortran sources except those in the
     ‘liboctave/external/ranlib’ directory are compiled such that
     INTEGERS are 8-bytes wide.  If you are using gfortran, the
     configure script should automatically set the Makefile variable
     ‘F77_INTEGER_8_FLAG’ to ‘-fdefault-integer-8’.  If you are using
     another compiler, you must set this variable yourself.  You should
     NOT set this flag in ‘FFLAGS’, otherwise the files in
     ‘liboctave/external/ranlib’ will be miscompiled.

   • Other dependencies

     Probably nothing special needs to be done for the following
     dependencies.  If you discover that something does need to be done,
     please submit a bug report.

        − pcre

        − zlib

        − hdf5

        − fftw3

        − cURL

        − GraphicsMagick++

        − OpenGL

        − freetype

        − fontconfig

        − fltk


File: octave.info,  Node: Installation Problems,  Prev: Compiling Octave with 64-bit Indexing,  Up: Installation

E.4 Installation Problems
=========================

This section contains a list of problems (and some apparent problems
that don’t really mean anything is wrong) that may show up during
installation of Octave.

   • On some SCO systems, ‘info’ fails to compile if ‘HAVE_TERMIOS_H’ is
     defined in ‘config.h’.  Simply removing the definition from
     ‘info/config.h’ should allow it to compile.

   • If ‘configure’ finds ‘dlopen’, ‘dlsym’, ‘dlclose’, and ‘dlerror’,
     but not the header file ‘dlfcn.h’, you need to find the source for
     the header file and install it in the directory ‘usr/include’.
     This is reportedly a problem with Slackware 3.1.  For Linux/GNU
     systems, the source for ‘dlfcn.h’ is in the ‘ldso’ package.

   • Building ‘.oct’ files doesn’t work.

     You should probably have a shared version of ‘libstdc++’.  A patch
     is needed to build shared versions of version 2.7.2 of ‘libstdc++’
     on the HP-PA architecture.  You can find the patch at
     <ftp://ftp.cygnus.com/pub/g++/libg++-2.7.2-hppa-gcc-fix>.

   • On some DEC alpha systems there may be a problem with the ‘libdxml’
     library, resulting in floating point errors and/or segmentation
     faults in the linear algebra routines called by Octave.  If you
     encounter such problems, then you should modify the configure
     script so that ‘SPECIAL_MATH_LIB’ is not set to ‘-ldxml’.

   • On FreeBSD systems Octave may hang while initializing some internal
     constants.  The fix appears to be to use

          options      GPL_MATH_EMULATE

     rather than

          options      MATH_EMULATE

     in the kernel configuration files (typically found in the directory
     ‘/sys/i386/conf’).  After making this change, you’ll need to
     rebuild the kernel, install it, and reboot.

   • If you encounter errors like

          passing `void (*)()' as argument 2 of
            `octave_set_signal_handler(int, void (*)(int))'

     or

          warning: ANSI C++ prohibits conversion from `(int)'
                   to `(...)'

     while compiling ‘sighandlers.cc’, you may need to edit some files
     in the ‘gcc’ include subdirectory to add proper prototypes for
     functions there.  For example, Ultrix 4.2 needs proper declarations
     for the ‘signal’ function and the ‘SIG_IGN’ macro in the file
     ‘signal.h’.

     On some systems the ‘SIG_IGN’ macro is defined to be something like
     this:

          #define  SIG_IGN  (void (*)())1

     when it should really be something like:

          #define  SIG_IGN  (void (*)(int))1

     to match the prototype declaration for the ‘signal’ function.  This
     change should also be made for the ‘SIG_DFL’ and ‘SIG_ERR’ symbols.
     It may be necessary to change the definitions in ‘sys/signal.h’ as
     well.

     The ‘gcc’ ‘fixincludes’ and ‘fixproto’ scripts should probably fix
     these problems when ‘gcc’ installs its modified set of header
     files, but I don’t think that’s been done yet.

     *You should not change the files in ‘/usr/include’*.  You can find
     the ‘gcc’ include directory tree by running the command

          gcc -print-libgcc-file-name

     The directory of ‘gcc’ include files normally begins in the same
     directory that contains the file ‘libgcc.a’.

   • Some of the Fortran subroutines may fail to compile with older
     versions of the Sun Fortran compiler.  If you get errors like

          zgemm.f:
                  zgemm:
          warning: unexpected parent of complex expression subtree
          zgemm.f, line 245: warning: unexpected parent of complex
            expression subtree
          warning: unexpected parent of complex expression subtree
          zgemm.f, line 304: warning: unexpected parent of complex
            expression subtree
          warning: unexpected parent of complex expression subtree
          zgemm.f, line 327: warning: unexpected parent of complex
            expression subtree
          pcc_binval: missing IR_CONV in complex op
          make[2]: *** [zgemm.o] Error 1

     when compiling the Fortran subroutines in the ‘liboctave/external’
     subdirectory, you should either upgrade your compiler or try
     compiling with optimization turned off.

   • On NeXT systems, if you get errors like this:

          /usr/tmp/cc007458.s:unknown:Undefined local
                symbol LBB7656
          /usr/tmp/cc007458.s:unknown:Undefined local
                symbol LBE7656

     when compiling ‘Array.cc’ and ‘Matrix.cc’, try recompiling these
     files without ‘-g’.

   • Some people have reported that calls to system() and the pager do
     not work on SunOS systems.  This is apparently due to having
     ‘G_HAVE_SYS_WAIT’ defined to be 0 instead of 1 when compiling
     ‘libg++’.

   • On systems where the reference BLAS library is used the following
     matrix-by-vector multiplication incorrectly handles NaN values of
     the form ‘NaN * 0’.

          [NaN, 1; 0, 0] * [0; 1]
          ⇒
          [ 1
            0 ]

          correct result ⇒
          [ NaN
            0   ]

     Install a different BLAS library such as OpenBLAS or ATLAS to
     correct this issue.

   • On NeXT systems, linking to ‘libsys_s.a’ may fail to resolve the
     following functions

          _tcgetattr
          _tcsetattr
          _tcflow

     which are part of ‘libposix.a’.  Unfortunately, linking Octave with
     ‘-posix’ results in the following undefined symbols.

          .destructors_used
          .constructors_used
          _objc_msgSend
          _NXGetDefaultValue
          _NXRegisterDefaults
          .objc_class_name_NXStringTable
          .objc_class_name_NXBundle

     One kluge around this problem is to extract ‘termios.o’ from
     ‘libposix.a’, put it in Octave’s ‘src’ directory, and add it to the
     list of files to link together in the makefile.  Suggestions for
     better ways to solve this problem are welcome!

   • If Octave crashes immediately with a floating point exception, it
     is likely that it is failing to initialize the IEEE floating point
     values for infinity and NaN.

     If your system actually does support IEEE arithmetic, you should be
     able to fix this problem by modifying the function
     ‘octave_ieee_init’ in the file ‘lo-ieee.cc’ to correctly initialize
     Octave’s internal infinity and NaN variables.

     If your system does not support IEEE arithmetic but Octave’s
     configure script incorrectly determined that it does, you can work
     around the problem by editing the file ‘config.h’ to not define
     ‘HAVE_ISINF’, ‘HAVE_FINITE’, and ‘HAVE_ISNAN’.

     In any case, please report this as a bug since it might be possible
     to modify Octave’s configuration script to automatically determine
     the proper thing to do.

   • If Octave is unable to find a header file because it is installed
     in a location that is not normally searched by the compiler, you
     can add the directory to the include search path by specifying (for
     example) ‘CPPFLAGS=-I/some/nonstandard/directory’ as an argument to
     ‘configure’.  Other variables that can be specified this way are
     ‘CFLAGS’, ‘CXXFLAGS’, ‘FFLAGS’, and ‘LDFLAGS’.  Passing them as
     options to the configure script also records them in the
     ‘config.status’ file.  By default, ‘CPPFLAGS’ and ‘LDFLAGS’ are
     empty, ‘CFLAGS’ and ‘CXXFLAGS’ are set to "-g -O2" and ‘FFLAGS’ is
     set to "-O".


File: octave.info,  Node: Grammar and Parser,  Next: Copying,  Prev: Installation,  Up: Top

Appendix F Grammar and Parser
*****************************

This appendix will eventually contain a semi-formal description of
Octave’s language.

* Menu:

* Keywords::
* Parser::


File: octave.info,  Node: Keywords,  Next: Parser,  Up: Grammar and Parser

F.1 Keywords
============

The following identifiers are keywords, and may not be used as variable
or function names:

‘__FILE__’               ‘__LINE__’               ‘break’
‘case’                   ‘catch’                  ‘classdef’
‘continue’               ‘do’                     ‘else’
‘elseif’                 ‘end’                    ‘end_try_catch’
‘end_unwind_protect’     ‘endclassdef’            ‘endenumeration’
‘endevents’              ‘endfor’                 ‘endfunction’
‘endif’                  ‘endmethods’             ‘endparfor’
‘endproperties’          ‘endswitch’              ‘endwhile’
‘enumeration’            ‘events’                 ‘for’
‘function’               ‘global’                 ‘if’
‘methods’                ‘otherwise’              ‘parfor’
‘persistent’             ‘properties’             ‘return’
‘switch’                 ‘try’                    ‘until’
‘unwind_protect’         ‘unwind_protect_cleanup’ ‘while’

   The function ‘iskeyword’ can be used to quickly check whether an
identifier is reserved by Octave.

 -- : iskeyword ()
 -- : iskeyword (NAME)
     Return true if NAME is an Octave keyword.

     If NAME is omitted, return a list of keywords.

     See also: *note isvarname: XREFisvarname, *note exist: XREFexist.


File: octave.info,  Node: Parser,  Prev: Keywords,  Up: Grammar and Parser

F.2 Parser
==========

The parser has a number of variables that affect its internal operation.
These variables are generally documented in the manual alongside the
code that they affect.

   In addition, there are three non-specific parser customization
functions.  ‘add_input_event_hook’ can be used to schedule a user
function for periodic evaluation.  ‘remove_input_event_hook’ will stop a
user function from being evaluated periodically.

 -- : ID = add_input_event_hook (FCN)
 -- : ID = add_input_event_hook (FCN, DATA)
     Add the named function or function handle FCN to the list of
     functions to call periodically when Octave is waiting for input.

     The function should have the form

          FCN (DATA)

     If DATA is omitted, Octave calls the function without any
     arguments.

     The returned identifier may be used to remove the function handle
     from the list of input hook functions.

     See also: *note remove_input_event_hook:
     XREFremove_input_event_hook.

 -- : remove_input_event_hook (NAME)
 -- : remove_input_event_hook (FCN_ID)
     Remove the named function or function handle with the given
     identifier from the list of functions to call periodically when
     Octave is waiting for input.

     See also: *note add_input_event_hook: XREFadd_input_event_hook.

   Finally, when the parser cannot identify an input token it calls a
particular function to handle this.  By default, this is the internal
function "__unimplemented__" which makes suggestions about possible
Octave substitutes for MATLAB functions.

 -- : VAL = missing_function_hook ()
 -- : OLD_VAL = missing_function_hook (NEW_VAL)
 -- : missing_function_hook (NEW_VAL, "local")
     Query or set the internal variable that specifies the function to
     call to provide extra information when an unknown identifier is
     referenced.

     When called from inside a function with the "local" option, the
     variable is changed locally for the function and any subroutines it
     calls.  The original variable value is restored when exiting the
     function.

     See also: *note missing_component_hook: XREFmissing_component_hook.


File: octave.info,  Node: Copying,  Next: Concept Index,  Prev: Grammar and Parser,  Up: Top

Appendix G GNU GENERAL PUBLIC LICENSE
*************************************

                        Version 3, 29 June 2007

     Copyright © 2007 Free Software Foundation, Inc. <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program—to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers’ and authors’ protection, the GPL clearly explains
that there is no warranty for this free software.  For both users’ and
authors’ sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users’ freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     “This License” refers to version 3 of the GNU General Public
     License.

     “Copyright” also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     “The Program” refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as “you”.  “Licensees” and
     “recipients” may be individuals or organizations.

     To “modify” a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a “modified
     version” of the earlier work or a work “based on” the earlier work.

     A “covered work” means either the unmodified Program or a work
     based on the Program.

     To “propagate” a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To “convey” a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays “Appropriate Legal Notices”
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The “source code” for a work means the preferred form of the work
     for making modifications to it.  “Object code” means any non-source
     form of a work.

     A “Standard Interface” means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The “System Libraries” of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A “Major Component”, in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The “Corresponding Source” for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work’s System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users’ Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work’s users, your or third parties’ legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program’s source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to “keep intact all notices”.

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an “aggregate” if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation’s users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A “User Product” is either (1) a “consumer product”, which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     “normally used” refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     “Installation Information” for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     “Additional permissions” are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered “further
     restrictions” within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An “entity transaction” is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party’s predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A “contributor” is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor’s “contributor
     version”.

     A contributor’s “essential patent claims” are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, “control”
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor’s essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a “patent license” is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To “grant”
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  “Knowingly relying” means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient’s use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is “discriminatory” if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others’ Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS”
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
“copyright” line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <https://www.gnu.org/licenses/>.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type ‘show w’.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type ‘show c’ for details.

   The hypothetical commands ‘show w’ and ‘show c’ should show the
appropriate parts of the General Public License.  Of course, your
program’s commands might be different; for a GUI interface, you would
use an “about box”.

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a “copyright disclaimer” for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <https://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <https://www.gnu.org/licenses/why-not-lgpl.html>.


File: octave.info,  Node: Concept Index,  Next: Function Index,  Prev: Copying,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* acknowledgements:                      Acknowledgements.    (line   6)
* addition:                              Arithmetic Ops.      (line   6)
* addition <1>:                          Operator Overloading.
                                                              (line   6)
* and operator:                          Boolean Expressions. (line   6)
* and operator <1>:                      Operator Overloading.
                                                              (line   6)
* anonymous functions:                   Function Handles and Anonymous Functions.
                                                              (line   6)
* ans:                                   Variables.           (line  44)
* answers, incorrect:                    Bug Criteria.        (line  12)
* answers, incorrect <1>:                Bug Reporting.       (line  70)
* application-defined data:              Application-defined Data.
                                                              (line   6)
* apply:                                 Function Application.
                                                              (line   6)
* area series:                           Area Series.         (line   6)
* arguments in function call:            Calling Functions.   (line  15)
* arithmetic operators:                  Arithmetic Ops.      (line   6)
* arithmetic operators <1>:              Operator Overloading.
                                                              (line   6)
* array, creating a Java array:          Java Interface Functions.
                                                              (line  24)
* assignment expressions:                Assignment Ops.      (line   6)
* assignment operators:                  Assignment Ops.      (line   6)
* axes graphics object:                  Graphics Objects.    (line  20)
* bar series:                            Bar Series.          (line   6)
* batch processing:                      Executable Octave Programs.
                                                              (line   6)
* block comments:                        Block Comments.      (line   6)
* body of a loop:                        The while Statement. (line   6)
* boolean expressions:                   Boolean Expressions. (line   6)
* boolean expressions <1>:               Operator Overloading.
                                                              (line   6)
* boolean operators:                     Boolean Expressions. (line   6)
* boolean operators <1>:                 Operator Overloading.
                                                              (line   6)
* break statement:                       The break Statement. (line   6)
* broadcast:                             Broadcasting.        (line   6)
* broadcasting:                          Broadcasting.        (line   6)
* BSX:                                   Broadcasting.        (line   6)
* bug criteria:                          Bug Criteria.        (line   6)
* bug tracker:                           Bug Tracker.         (line   6)
* bugs:                                  Reporting Bugs.      (line   6)
* bugs, investigating:                   Bug Reporting.       (line 102)
* bugs, known:                           Trouble.             (line   6)
* bugs, reporting:                       Bug Tracker.         (line   6)
* bugs, reporting <1>:                   Bug Reporting.       (line   6)
* built-in data types:                   Built-in Data Types. (line   6)
* callbacks:                             Callbacks.           (line   6)
* calling Java from Octave:              Java Interface.      (line   6)
* calling Octave from Java:              Java Interface.      (line   6)
* case statement:                        The switch Statement.
                                                              (line   6)
* catch:                                 The try Statement.   (line   6)
* cell arrays:                           Cell Array Objects.  (line   6)
* cell arrays <1>:                       Cell Arrays.         (line   6)
* character strings:                     String Objects.      (line   6)
* character strings <1>:                 Strings.             (line   6)
* Cholesky factorization:                Matrix Factorizations.
                                                              (line  12)
* Citations:                             Citing Octave in Publications.
                                                              (line   6)
* Citing Octave:                         Citing Octave in Publications.
                                                              (line   6)
* classes, making available to Octave:   Making Java Classes Available.
                                                              (line   6)
* classpath, adding new path:            Java Interface Functions.
                                                              (line 201)
* classpath, difference between static and dynamic: Making Java Classes Available.
                                                              (line   6)
* classpath, displaying:                 Java Interface Functions.
                                                              (line 167)
* classpath, dynamic:                    Java Interface Functions.
                                                              (line 167)
* classpath, dynamic <1>:                Java Interface Functions.
                                                              (line 201)
* classpath, removing path:              Java Interface Functions.
                                                              (line 219)
* classpath, setting:                    Making Java Classes Available.
                                                              (line   6)
* classpath, static:                     Java Interface Functions.
                                                              (line 167)
* classpath.txt:                         Making Java Classes Available.
                                                              (line   6)
* clearing the screen:                   Cursor Motion.       (line  56)
* code profiling:                        Profiling.           (line   6)
* colors, graphics:                      Colors.              (line   6)
* comma separated lists:                 Comma Separated Lists.
                                                              (line   6)
* command and output logs:               Diary and Echo Commands.
                                                              (line   6)
* command completion:                    Commands for Completion.
                                                              (line   6)
* command descriptions:                  A Sample Command Description.
                                                              (line   6)
* command echoing:                       Diary and Echo Commands.
                                                              (line   6)
* command history:                       Commands for History.
                                                              (line   6)
* command options:                       Command Line Options.
                                                              (line   6)
* command-line editing:                  Command Line Editing.
                                                              (line   6)
* commands functions:                    Command Syntax and Function Syntax.
                                                              (line   6)
* comments:                              Comments.            (line   6)
* comparison expressions:                Comparison Ops.      (line   6)
* comparison expressions <1>:            Operator Overloading.
                                                              (line   6)
* complex-conjugate transpose:           Arithmetic Ops.      (line   6)
* complex-conjugate transpose <1>:       Operator Overloading.
                                                              (line   6)
* containers:                            Data Containers.     (line   6)
* continuation lines:                    Continuation Lines.  (line   6)
* continue statement:                    The continue Statement.
                                                              (line   6)
* contour series:                        Contour Groups.      (line   6)
* contributing to Octave:                How You Can Contribute to Octave.
                                                              (line   6)
* contributors:                          Preface.             (line   6)
* conversion specifications (printf):    Formatted Output.    (line  79)
* conversion specifications (scanf):     Formatted Input.     (line  92)
* copy-on-write:                         Miscellaneous Techniques.
                                                              (line  16)
* copyright:                             Copying.             (line   6)
* core dump:                             Bug Criteria.        (line   9)
* COW:                                   Miscellaneous Techniques.
                                                              (line  16)
* creating graphics objects:             Graphics Objects.    (line  44)
* cs-lists:                              Comma Separated Lists.
                                                              (line   6)
* customizing readline:                  Customizing readline.
                                                              (line   6)
* customizing the prompt:                Customizing the Prompt.
                                                              (line   6)
* DAE:                                   Differential Equations.
                                                              (line  14)
* data sources in object groups:         Data Sources in Object Groups.
                                                              (line   6)
* data structures:                       Data Structure Objects.
                                                              (line   6)
* data structures <1>:                   Structures.          (line   6)
* data types:                            Data Types.          (line   6)
* data types, built-in:                  Built-in Data Types. (line   6)
* data types, user-defined:              User-defined Data Types.
                                                              (line   6)
* decrement operator:                    Assignment Ops.      (line 170)
* default arguments:                     Default Arguments.   (line   6)
* default graphics properties:           Managing Default Properties.
                                                              (line   6)
* defining functions:                    Functions and Scripts.
                                                              (line   6)
* Degree Symbol:                         tex interpreter.     (line 104)
* deprecated functions:                  Obsolete Functions.  (line   6)
* description format:                    Format of Descriptions.
                                                              (line   6)
* diagonal and permutation matrices:     Diagonal and Permutation Matrices.
                                                              (line   6)
* diagonal matrix expressions:           Expressions Involving Diagonal Matrices.
                                                              (line   6)
* dialog, displaying a dialog for selecting directories: I/O Dialogs.
                                                              (line  10)
* dialog, displaying a dialog for selecting files: I/O Dialogs.
                                                              (line  26)
* dialog, displaying a dialog for storing files: I/O Dialogs. (line  85)
* dialog, displaying a font selection dialog: I/O Dialogs.    (line 444)
* dialog, displaying a help dialog:      I/O Dialogs.         (line 159)
* dialog, displaying a list dialog:      I/O Dialogs.         (line 240)
* dialog, displaying a message dialog:   I/O Dialogs.         (line 305)
* dialog, displaying a modal dialog:     I/O Dialogs.         (line 476)
* dialog, displaying a question dialog:  I/O Dialogs.         (line 372)
* dialog, displaying a warning dialog:   I/O Dialogs.         (line 412)
* dialog, displaying an error dialog:    I/O Dialogs.         (line 127)
* dialog, displaying an input dialog:    I/O Dialogs.         (line 186)
* diary of commands and output:          Diary and Echo Commands.
                                                              (line   6)
* differential equations:                Differential Equations.
                                                              (line  15)
* diffs, submitting:                     Sending Patches.     (line   6)
* distribution of Octave:                Distribution.        (line   6)
* division:                              Arithmetic Ops.      (line   6)
* division <1>:                          Operator Overloading.
                                                              (line   6)
* do-until statement:                    The do-until Statement.
                                                              (line   6)
* documentation fonts:                   Fonts.               (line   6)
* documentation notation:                Evaluation Notation. (line   6)
* documenting functions:                 Comments and the Help System.
                                                              (line   6)
* documenting Octave programs:           Comments.            (line   6)
* documenting user scripts:              Comments and the Help System.
                                                              (line   6)
* Dulmage-Mendelsohn decomposition:      Mathematical Considerations.
                                                              (line 369)
* dynamic classpath:                     Making Java Classes Available.
                                                              (line   6)
* dynamic classpath <1>:                 Java Interface Functions.
                                                              (line 167)
* dynamic classpath, adding new path:    Java Interface Functions.
                                                              (line 201)
* dynamic naming:                        Creating Structures. (line   6)
* dynamic-linking:                       External Code Interface.
                                                              (line   6)
* Dynamically Linked Functions:          External Code Interface.
                                                              (line   6)
* echoing executing commands:            Diary and Echo Commands.
                                                              (line   6)
* editing the command line:              Command Line Editing.
                                                              (line   6)
* element-by-element evaluation:         Element-by-element Boolean Operators.
                                                              (line   6)
* else statement:                        The if Statement.    (line   6)
* elseif statement:                      The if Statement.    (line   6)
* end statement:                         Statements.          (line  16)
* end, indexing:                         Index Expressions.   (line 118)
* end: and :end:                         Index Expressions.   (line 118)
* endfor statement:                      The for Statement.   (line   6)
* endfunction statement:                 Defining Functions.  (line   6)
* endif statement:                       The if Statement.    (line   6)
* endswitch statement:                   The switch Statement.
                                                              (line   6)
* endwhile statement:                    The while Statement. (line   6)
* end_try_catch:                         The try Statement.   (line   6)
* end_unwind_protect:                    The unwind_protect Statement.
                                                              (line   6)
* equality operator:                     Comparison Ops.      (line   6)
* equality operator <1>:                 Operator Overloading.
                                                              (line   6)
* equality, tests for:                   Comparison Ops.      (line   6)
* equality, tests for <1>:               Operator Overloading.
                                                              (line   6)
* equations, nonlinear:                  Nonlinear Equations. (line   6)
* erroneous messages:                    Bug Criteria.        (line  21)
* erroneous results:                     Bug Criteria.        (line  12)
* erroneous results <1>:                 Bug Reporting.       (line  70)
* error bar series:                      Error Bar Series.    (line   6)
* error ids:                             Catching Errors.     (line 127)
* error message notation:                Error Messages.      (line   6)
* error messages:                        Errors.              (line   6)
* error messages, incorrect:             Bug Criteria.        (line  21)
* escape sequence notation:              Escape Sequences in String Constants.
                                                              (line   6)
* evaluation notation:                   Evaluation Notation. (line   6)
* executable scripts:                    Executable Octave Programs.
                                                              (line   6)
* execution speed:                       Miscellaneous Techniques.
                                                              (line   6)
* exiting octave:                        Running Octave.      (line  20)
* exiting octave <1>:                    Quitting Octave.     (line   6)
* exponentiation:                        Arithmetic Ops.      (line   6)
* exponentiation <1>:                    Operator Overloading.
                                                              (line   6)
* expression, range:                     Ranges.              (line   6)
* expressions:                           Expressions.         (line   6)
* expressions, assignment:               Assignment Ops.      (line   6)
* expressions, boolean:                  Boolean Expressions. (line   6)
* expressions, boolean <1>:              Operator Overloading.
                                                              (line   6)
* expressions, comparison:               Comparison Ops.      (line   6)
* expressions, comparison <1>:           Operator Overloading.
                                                              (line   6)
* expressions, logical:                  Boolean Expressions. (line   6)
* expressions, logical <1>:              Operator Overloading.
                                                              (line   6)
* factorial function:                    Recursion.           (line   6)
* fatal signal:                          Bug Criteria.        (line   9)
* field, returning value of Java object field: Java Interface Functions.
                                                              (line  76)
* field, setting value of Java object field: Java Interface Functions.
                                                              (line 104)
* fields, displaying available fields of a Java object: Java Interface Functions.
                                                              (line  57)
* figure deletefcn:                      Access via Handle.   (line  18)
* figure graphics object:                Graphics Objects.    (line  17)
* finding minimums:                      Minimizers.          (line   6)
* finish.m:                              Quitting Octave.     (line   6)
* flag character (printf):               Output Conversion Syntax.
                                                              (line  28)
* flag character (scanf):                Input Conversion Syntax.
                                                              (line  34)
* for statement:                         The for Statement.   (line   6)
* Frobenius norm:                        Basic Matrix Functions.
                                                              (line 434)
* function application:                  Function Application.
                                                              (line   6)
* function descriptions:                 A Sample Function Description.
                                                              (line   6)
* function file:                         Function Files.      (line   6)
* function handle:                       Access via Handle.   (line   6)
* function statement:                    Defining Functions.  (line   6)
* functions, deprecated:                 Obsolete Functions.  (line   6)
* functions, obsolete:                   Obsolete Functions.  (line   6)
* functions, user-defined:               Functions and Scripts.
                                                              (line   6)
* funding Octave development:            How You Can Contribute to Octave.
                                                              (line   6)
* general p-norm:                        Basic Matrix Functions.
                                                              (line 437)
* global statement:                      Global Variables.    (line   6)
* global variables:                      Global Variables.    (line   6)
* GNUTERM:                               Customizing Toolkit Behavior.
                                                              (line  22)
* grammar rules:                         Grammar and Parser.  (line   6)
* graphics:                              Plotting.            (line   6)
* graphics colors:                       Colors.              (line   6)
* graphics data structures:              Graphics Data Structures.
                                                              (line   6)
* graphics line styles:                  Line Styles.         (line   6)
* graphics marker styles:                Marker Styles.       (line   6)
* graphics object properties:            Graphics Object Properties.
                                                              (line   6)
* graphics object, axes:                 Graphics Objects.    (line  20)
* graphics object, figure:               Graphics Objects.    (line  17)
* graphics object, image:                Graphics Objects.    (line  30)
* graphics object, light:                Graphics Objects.    (line  39)
* graphics object, line:                 Graphics Objects.    (line  24)
* graphics object, patch:                Graphics Objects.    (line  33)
* graphics object, root:                 Graphics Objects.    (line  12)
* graphics object, surface:              Graphics Objects.    (line  36)
* graphics object, text:                 Graphics Objects.    (line  27)
* graphics objects:                      Graphics Objects.    (line   6)
* graphics objects, saving:              Graphics Objects.    (line 604)
* graphics properties, default:          Managing Default Properties.
                                                              (line   6)
* graphics toolkits:                     Graphics Toolkits.   (line   6)
* greater than operator:                 Comparison Ops.      (line   6)
* greater than operator <1>:             Operator Overloading.
                                                              (line   6)
* group objects:                         Quiver Group.        (line   6)
* group objects <1>:                     Stair Group.         (line   6)
* group objects <2>:                     Surface Group.       (line   6)
* handle functions:                      Graphics Objects.    (line 271)
* handle, function handles:              Function Handles and Anonymous Functions.
                                                              (line   6)
* hash table:                            containers.Map.      (line   6)
* help, online:                          Getting Help.        (line   6)
* help, user-defined functions:          Comments and the Help System.
                                                              (line   6)
* help, where to find:                   How To Get Help with Octave.
                                                              (line   6)
* Hermitian operator:                    Arithmetic Ops.      (line   6)
* Hermitian operator <1>:                Operator Overloading.
                                                              (line   6)
* Hessenberg decomposition:              Matrix Factorizations.
                                                              (line 157)
* history:                               Preface.             (line   6)
* history of commands:                   Commands for History.
                                                              (line   6)
* if statement:                          The if Statement.    (line   6)
* image graphics object:                 Graphics Objects.    (line  30)
* improving Octave:                      Bug Criteria.        (line  28)
* improving Octave <1>:                  Sending Patches.     (line   6)
* incorrect error messages:              Bug Criteria.        (line  21)
* incorrect output:                      Bug Criteria.        (line  12)
* incorrect output <1>:                  Bug Reporting.       (line  70)
* incorrect results:                     Bug Criteria.        (line  12)
* incorrect results <1>:                 Bug Reporting.       (line  70)
* increment operator:                    Assignment Ops.      (line 170)
* indirect function call:                Access via Handle.   (line   6)
* infinity norm:                         Basic Matrix Functions.
                                                              (line 430)
* initialization:                        Startup Files.       (line   6)
* input conversions, for scanf:          Table of Input Conversions.
                                                              (line   6)
* input history:                         Commands for History.
                                                              (line   6)
* ~/.inputrc:                            Customizing readline.
                                                              (line   6)
* installation trouble:                  Trouble.             (line   6)
* installing Octave:                     Installation.        (line   6)
* instance, creating a Java instance:    Java Interface Functions.
                                                              (line  10)
* introduction:                          Introduction.        (line   6)
* introduction to graphics structures:   Introduction to Graphics Structures.
                                                              (line   6)
* invalid input:                         Bug Criteria.        (line  23)
* Java, calling from Octave:             Java Interface.      (line   6)
* Java, using with Octave:               Java Interface.      (line   6)
* javaclasspath.txt:                     Making Java Classes Available.
                                                              (line   6)
* Jupyter Notebooks:                     Jupyter Notebooks.   (line   6)
* Kendall’s Tau:                         Correlation and Regression Analysis.
                                                              (line 118)
* key/value store:                       containers.Map.      (line   6)
* keywords:                              Keywords.            (line   6)
* known causes of trouble:               Trouble.             (line   6)
* language definition:                   Grammar and Parser.  (line   6)
* less than operator:                    Comparison Ops.      (line   6)
* less than operator <1>:                Operator Overloading.
                                                              (line   6)
* light graphics object:                 Graphics Objects.    (line  39)
* line graphics object:                  Graphics Objects.    (line  24)
* line series:                           Line Series.         (line   6)
* line styles, graphics:                 Line Styles.         (line   6)
* linear algebra:                        Linear Algebra.      (line   6)
* linear algebra, techniques:            Techniques Used for Linear Algebra.
                                                              (line   6)
* loading data:                          Simple File I/O.     (line   6)
* local minimum:                         Minimizers.          (line   6)
* logging commands and output:           Diary and Echo Commands.
                                                              (line   6)
* logical expressions:                   Boolean Expressions. (line   6)
* logical expressions <1>:               Operator Overloading.
                                                              (line   6)
* logical operators:                     Boolean Expressions. (line   6)
* logical operators <1>:                 Operator Overloading.
                                                              (line   6)
* loop:                                  The while Statement. (line   6)
* looping over structure elements:       Looping Over Structure Elements.
                                                              (line   6)
* LP:                                    Optimization.        (line  18)
* LU decomposition:                      Matrix Factorizations.
                                                              (line 180)
* lvalue:                                Assignment Ops.      (line  33)
* Map:                                   containers.Map.      (line   6)
* map:                                   Function Application.
                                                              (line   6)
* marker styles, graphics:               Marker Styles.       (line   6)
* matching failure, in scanf:            Formatted Input.     (line 115)
* matrices:                              Matrices.            (line   6)
* matrices, diagonal and permutation:    Diagonal and Permutation Matrices.
                                                              (line   6)
* matrix factorizations:                 Matrix Factorizations.
                                                              (line   6)
* matrix functions, basic:               Basic Matrix Functions.
                                                              (line   6)
* matrix multiplication:                 Arithmetic Ops.      (line   6)
* matrix multiplication <1>:             Operator Overloading.
                                                              (line   6)
* matrix, functions of:                  Functions of a Matrix.
                                                              (line   6)
* matrix, permutation functions:         Permutation Matrix Functions.
                                                              (line   6)
* matrix, specialized solvers:           Specialized Solvers. (line   6)
* matrix, zero elements:                 Zeros Treatment.     (line   6)
* maximum field width (scanf):           Input Conversion Syntax.
                                                              (line  42)
* memory management:                     Miscellaneous Techniques.
                                                              (line  16)
* memory, displaying Java memory status: Java Interface Functions.
                                                              (line 302)
* memory, limitations on JVM:            Set up the JVM.      (line   6)
* messages, error:                       Errors.              (line   6)
* method, invoking a method of a Java object: Java Interface Functions.
                                                              (line 142)
* methods, displaying available methods of a Java object: Java Interface Functions.
                                                              (line 120)
* mex:                                   Mex-Files.           (line   6)
* mex-files:                             Mex-Files.           (line   6)
* minimum field width (printf):          Output Conversion Syntax.
                                                              (line  35)
* missing data:                          Missing Data.        (line   6)
* mkoctfile:                             Oct-Files.           (line   6)
* multi-line comments:                   Block Comments.      (line   6)
* multiplication:                        Arithmetic Ops.      (line   6)
* multiplication <1>:                    Operator Overloading.
                                                              (line   6)
* negation:                              Arithmetic Ops.      (line   6)
* negation <1>:                          Operator Overloading.
                                                              (line   6)
* NLP:                                   Optimization.        (line  17)
* nonlinear equations:                   Nonlinear Equations. (line   6)
* nonlinear programming:                 Optimization.        (line  18)
* not operator:                          Boolean Expressions. (line   6)
* not operator <1>:                      Operator Overloading.
                                                              (line   6)
* numeric constant:                      Numeric Objects.     (line   6)
* numeric constant <1>:                  Numeric Data Types.  (line   6)
* numeric value:                         Numeric Objects.     (line   6)
* numeric value <1>:                     Numeric Data Types.  (line   6)
* object groups:                         Object Groups.       (line   6)
* object, creating a Java object:        Java Interface Functions.
                                                              (line  10)
* obsolete functions:                    Obsolete Functions.  (line   6)
* oct:                                   Oct-Files.           (line   6)
* oct-files:                             Oct-Files.           (line   6)
* Octave and MATLAB, how to distinguish between: How to Distinguish Between Octave and Matlab.
                                                              (line   6)
* Octave API:                            External Code Interface.
                                                              (line   6)
* Octave command options:                Command Line Options.
                                                              (line   6)
* Octave, calling from Java:             Java Interface.      (line   6)
* .octaverc:                             Command Line Options.
                                                              (line  88)
* .octaverc <1>:                         Startup Files.       (line  40)
* ~/.octaverc:                           Command Line Options.
                                                              (line  88)
* ~/.octaverc <1>:                       Startup Files.       (line  36)
* ODE:                                   Differential Equations.
                                                              (line  15)
* online help:                           Getting Help.        (line   6)
* opengl rendering slow windows:         Hardware vs. Software Rendering.
                                                              (line   6)
* opengl single precision date time:     Precision issues.    (line   6)
* operator precedence:                   Operator Precedence. (line   6)
* operators, arithmetic:                 Arithmetic Ops.      (line   6)
* operators, arithmetic <1>:             Operator Overloading.
                                                              (line   6)
* operators, assignment:                 Assignment Ops.      (line   6)
* operators, boolean:                    Boolean Expressions. (line   6)
* operators, boolean <1>:                Operator Overloading.
                                                              (line   6)
* operators, decrement:                  Assignment Ops.      (line 169)
* operators, increment:                  Assignment Ops.      (line 170)
* operators, logical:                    Boolean Expressions. (line   6)
* operators, logical <1>:                Operator Overloading.
                                                              (line   6)
* operators, relational:                 Comparison Ops.      (line   6)
* operators, relational <1>:             Operator Overloading.
                                                              (line   6)
* optimization:                          Miscellaneous Techniques.
                                                              (line   6)
* optimization <1>:                      Optimization.        (line  18)
* options, Octave command:               Command Line Options.
                                                              (line   6)
*   --braindead:                         Command Line Options.
                                                              (line 134)
*   --built-in-docstrings-file FILENAME: Command Line Options.
                                                              (line   9)
*   --debug:                             Command Line Options.
                                                              (line  15)
*   --doc-cache-file FILENAME:           Command Line Options.
                                                              (line  21)
*   --echo-commands:                     Command Line Options.
                                                              (line  29)
*   --eval CODE:                         Command Line Options.
                                                              (line  32)
*   --exec-path PATH:                    Command Line Options.
                                                              (line  36)
*   --gui:                               Command Line Options.
                                                              (line  43)
*   --help:                              Command Line Options.
                                                              (line  47)
*   --image-path PATH:                   Command Line Options.
                                                              (line  50)
*   --info-file FILENAME:                Command Line Options.
                                                              (line  57)
*   --info-program PROGRAM:              Command Line Options.
                                                              (line  64)
*   --interactive:                       Command Line Options.
                                                              (line  72)
*   --line-editing:                      Command Line Options.
                                                              (line  76)
*   --no-gui:                            Command Line Options.
                                                              (line  79)
*   --no-history:                        Command Line Options.
                                                              (line  85)
*   --no-init-file:                      Command Line Options.
                                                              (line  88)
*   --no-init-path:                      Command Line Options.
                                                              (line  91)
*   --no-line-editing:                   Command Line Options.
                                                              (line  95)
*   --no-site-file:                      Command Line Options.
                                                              (line  98)
*   --no-window-system:                  Command Line Options.
                                                              (line 102)
*   --norc:                              Command Line Options.
                                                              (line 107)
*   --path PATH:                         Command Line Options.
                                                              (line 113)
*   --persist:                           Command Line Options.
                                                              (line 120)
*   --quiet:                             Command Line Options.
                                                              (line 126)
*   --silent:                            Command Line Options.
                                                              (line 126)
*   --texi-macros-file FILENAME:         Command Line Options.
                                                              (line 129)
*   --traditional:                       Command Line Options.
                                                              (line 134)
*   --verbose:                           Command Line Options.
                                                              (line 168)
*   --version:                           Command Line Options.
                                                              (line 172)
*   -d:                                  Command Line Options.
                                                              (line  15)
*   -f:                                  Command Line Options.
                                                              (line 107)
*   -h:                                  Command Line Options.
                                                              (line  47)
*   -H:                                  Command Line Options.
                                                              (line  85)
*   -i:                                  Command Line Options.
                                                              (line  72)
*   -p PATH:                             Command Line Options.
                                                              (line 113)
*   -q:                                  Command Line Options.
                                                              (line 126)
*   -V:                                  Command Line Options.
                                                              (line 168)
*   -v:                                  Command Line Options.
                                                              (line 172)
*   -W:                                  Command Line Options.
                                                              (line 102)
*   -x:                                  Command Line Options.
                                                              (line  29)
* or operator:                           Boolean Expressions. (line   6)
* or operator <1>:                       Operator Overloading.
                                                              (line   6)
* oregonator:                            Ordinary Differential Equations.
                                                              (line 165)
* otherwise statement:                   The switch Statement.
                                                              (line   6)
* output conversions, for printf:        Table of Output Conversions.
                                                              (line   6)
* parser:                                Parser.              (line   6)
* patch graphics object:                 Graphics Objects.    (line  33)
* patches, submitting:                   Sending Patches.     (line   6)
* path, adding to classpath:             Java Interface Functions.
                                                              (line 201)
* path, removing from classpath:         Java Interface Functions.
                                                              (line 219)
* permutation matrix functions:          Permutation Matrix Functions.
                                                              (line   6)
* persistent statement:                  Persistent Variables.
                                                              (line   6)
* persistent variables:                  Persistent Variables.
                                                              (line   6)
* personal startup file:                 Startup Files.       (line  31)
* personal startup file <1>:             Startup Files.       (line  36)
* PKG_ADD:                               Creating Packages.   (line  45)
* PKG_DEL:                               Creating Packages.   (line  63)
* plotting:                              Plotting.            (line   6)
* plotting, high-level:                  High-Level Plotting. (line   6)
* plotting, multiple plot windows:       Multiple Plot Windows.
                                                              (line   6)
* plotting, multiple plots per figure:   Multiple Plots on One Page.
                                                              (line   6)
* plotting, object manipulation:         Manipulation of Plot Objects.
                                                              (line   6)
* plotting, saving and printing plots:   Printing and Saving Plots.
                                                              (line   6)
* plotting, three-dimensional:           Three-Dimensional Plots.
                                                              (line   6)
* plotting, two-dimensional functions:   Two-dimensional Function Plotting.
                                                              (line   6)
* plotting, window manipulation:         Manipulation of Plot Windows.
                                                              (line   6)
* precision (printf):                    Output Conversion Syntax.
                                                              (line  47)
* printing notation:                     Printing Notation.   (line   6)
* printing plots:                        Printing and Saving Plots.
                                                              (line   6)
* profiler:                              Profiling.           (line   6)
* program, self contained:               Executable Octave Programs.
                                                              (line   6)
* Progress Bar:                          Progress Bar.        (line   6)
* project startup file:                  Startup Files.       (line  40)
* prompt customization:                  Customizing the Prompt.
                                                              (line   6)
* pseudoinverse:                         Basic Matrix Functions.
                                                              (line 515)
* pseudoinverse <1>:                     Expressions Involving Diagonal Matrices.
                                                              (line  27)
* QP:                                    Optimization.        (line  18)
* QR factorization:                      Matrix Factorizations.
                                                              (line 289)
* quadratic programming:                 Optimization.        (line  18)
* quitting octave:                       Running Octave.      (line  20)
* quitting octave <1>:                   Quitting Octave.     (line   6)
* quiver group:                          Quiver Group.        (line   6)
* quotient:                              Arithmetic Ops.      (line   6)
* quotient <1>:                          Operator Overloading.
                                                              (line   6)
* range expressions:                     Ranges.              (line   6)
* readline customization:                Customizing readline.
                                                              (line   6)
* recycling:                             Broadcasting.        (line   6)
* relational operators:                  Comparison Ops.      (line   6)
* relational operators <1>:              Operator Overloading.
                                                              (line   6)
* reporting bugs:                        Reporting Bugs.      (line   6)
* reporting bugs <1>:                    Bug Tracker.         (line   6)
* results, incorrect:                    Bug Criteria.        (line  12)
* results, incorrect <1>:                Bug Reporting.       (line  70)
* root graphics object:                  Graphics Objects.    (line  12)
* saving data:                           Simple File I/O.     (line   6)
* saving graphics objects:               Graphics Objects.    (line 604)
* saving plots:                          Printing and Saving Plots.
                                                              (line   6)
* Schur decomposition:                   Matrix Factorizations.
                                                              (line 611)
* script files:                          Functions and Scripts.
                                                              (line   6)
* scripts:                               Executable Octave Programs.
                                                              (line   6)
* select JVM version:                    Set up the JVM.      (line   6)
* self contained programs:               Executable Octave Programs.
                                                              (line   6)
* series objects:                        Area Series.         (line   6)
* series objects <1>:                    Bar Series.          (line   6)
* series objects <2>:                    Contour Groups.      (line   6)
* series objects <3>:                    Error Bar Series.    (line   6)
* series objects <4>:                    Line Series.         (line   6)
* series objects <5>:                    Stem Series.         (line   6)
* short-circuit evaluation:              Short-circuit Boolean Operators.
                                                              (line   6)
* side effect:                           Assignment Ops.      (line  26)
* SIMD:                                  Broadcasting.        (line   6)
* singular value decomposition:          Matrix Factorizations.
                                                              (line 769)
* site exiting file:                     Quitting Octave.     (line   6)
* site startup file:                     Command Line Options.
                                                              (line  98)
* site startup file <1>:                 Startup Files.       (line  11)
* Spearman’s Rho:                        Correlation and Regression Analysis.
                                                              (line 103)
* speedups:                              Miscellaneous Techniques.
                                                              (line   6)
* stair group:                           Stair Group.         (line   6)
* startup:                               Startup Files.       (line   6)
* startup files:                         Startup Files.       (line  10)
* startup.m:                             Startup Files.       (line  50)
* statements:                            Statements.          (line   6)
* static classpath:                      Making Java Classes Available.
                                                              (line   6)
* static classpath <1>:                  Java Interface Functions.
                                                              (line 167)
* stem series:                           Stem Series.         (line   6)
* strings:                               String Objects.      (line   6)
* strings <1>:                           Strings.             (line   6)
* structural rank:                       Sparse Linear Algebra.
                                                              (line 312)
* structure elements, looping over:      Looping Over Structure Elements.
                                                              (line   6)
* structures:                            Data Structure Objects.
                                                              (line   6)
* structures <1>:                        Structures.          (line   6)
* submitting diffs:                      Sending Patches.     (line   6)
* submitting patches:                    Sending Patches.     (line   6)
* subtraction:                           Arithmetic Ops.      (line   6)
* subtraction <1>:                       Operator Overloading.
                                                              (line   6)
* suggestions:                           Bug Criteria.        (line  28)
* surface graphics object:               Graphics Objects.    (line  36)
* surface group:                         Surface Group.       (line   6)
* switch statement:                      The switch Statement.
                                                              (line   6)
* test functions:                        Test and Demo Functions.
                                                              (line   6)
* tests for equality:                    Comparison Ops.      (line   6)
* tests for equality <1>:                Operator Overloading.
                                                              (line   6)
* text graphics object:                  Graphics Objects.    (line  27)
* toolkit customization:                 Customizing Toolkit Behavior.
                                                              (line   6)
* toolkits, graphics:                    Graphics Toolkits.   (line   6)
* transform groups:                      Transform Groups.    (line   6)
* transpose:                             Arithmetic Ops.      (line   6)
* transpose <1>:                         Operator Overloading.
                                                              (line   6)
* transpose, complex-conjugate:          Arithmetic Ops.      (line   6)
* transpose, complex-conjugate <1>:      Operator Overloading.
                                                              (line   6)
* troubleshooting:                       Trouble.             (line   6)
* try statement:                         The try Statement.   (line   6)
* uitable properties:                    Uitable Properties.  (line   6)
* unary minus:                           Arithmetic Ops.      (line   6)
* unary minus <1>:                       Operator Overloading.
                                                              (line   6)
* undefined behavior:                    Bug Criteria.        (line  15)
* undefined function value:              Bug Criteria.        (line  15)
* unwind_protect statement:              The unwind_protect Statement.
                                                              (line   6)
* unwind_protect_cleanup:                The unwind_protect Statement.
                                                              (line   6)
* use of comments:                       Comments.            (line   6)
* user-defined data types:               User-defined Data Types.
                                                              (line   6)
* user-defined functions:                Functions and Scripts.
                                                              (line   6)
* user-defined variables:                Variables.           (line   6)
* using Octave with Java:                Java Interface.      (line   6)
* validating arguments:                  Validating Arguments.
                                                              (line   6)
* varargin:                              Variable-length Argument Lists.
                                                              (line   6)
* varargout:                             Variable-length Return Lists.
                                                              (line   6)
* variable-length argument lists:        Variable-length Argument Lists.
                                                              (line   6)
* variable-length return lists:          Variable-length Return Lists.
                                                              (line   6)
* variables, global:                     Global Variables.    (line   6)
* variables, persistent:                 Persistent Variables.
                                                              (line   6)
* variables, user-defined:               Variables.           (line   6)
* vectorization:                         Vectorization and Faster Code Execution.
                                                              (line   6)
* vectorize:                             Vectorization and Faster Code Execution.
                                                              (line   6)
* version startup file:                  Startup Files.       (line  21)
* warning ids:                           Issuing Warnings.    (line 158)
* warranty:                              Copying.             (line   6)
* while statement:                       The while Statement. (line   6)
* wrong answers:                         Bug Criteria.        (line  12)
* wrong answers <1>:                     Bug Reporting.       (line  70)


File: octave.info,  Node: Function Index,  Next: Operator Index,  Prev: Concept Index,  Up: Top

Function Index
**************

 [index ]
* Menu:

* abs:                                   Complex Arithmetic. (line    9)
* accumarray:                            Accumulation.       (line   10)
* accumarray <1>:                        Accumulation.       (line   11)
* accumdim:                              Accumulation.       (line  101)
* acos:                                  Trigonometry.       (line  108)
* acosd:                                 Trigonometry.       (line  265)
* acosh:                                 Trigonometry.       (line  171)
* acot:                                  Trigonometry.       (line  128)
* acotd:                                 Trigonometry.       (line  291)
* acoth:                                 Trigonometry.       (line  191)
* acsc:                                  Trigonometry.       (line  123)
* acscd:                                 Trigonometry.       (line  286)
* acsch:                                 Trigonometry.       (line  186)
* addlistener:                           Object Groups.      (line  123)
* addpath:                               Manipulating the Load Path.
                                                             (line   21)
* addpath <1>:                           Manipulating the Load Path.
                                                             (line   22)
* addpref:                               User-Defined Preferences.
                                                             (line   56)
* addpref <1>:                           User-Defined Preferences.
                                                             (line   57)
* addproperty:                           Object Groups.      (line   52)
* addproperty <1>:                       Object Groups.      (line   53)
* addtodate:                             Timing Utilities.   (line  711)
* add_input_event_hook:                  Parser.             (line   15)
* add_input_event_hook <1>:              Parser.             (line   16)
* airy:                                  Special Functions.  (line    6)
* all:                                   Finding Elements and Checking Conditions.
                                                             (line   31)
* all <1>:                               Finding Elements and Checking Conditions.
                                                             (line   32)
* allchild:                              Graphics Objects.   (line  584)
* amd:                                   Mathematical Considerations.
                                                             (line  122)
* amd <1>:                               Mathematical Considerations.
                                                             (line  123)
* ancestor:                              Graphics Objects.   (line  567)
* ancestor <1>:                          Graphics Objects.   (line  568)
* and:                                   Element-by-element Boolean Operators.
                                                             (line   65)
* and <1>:                               Element-by-element Boolean Operators.
                                                             (line   66)
* angle:                                 Complex Arithmetic. (line   22)
* annotation:                            Plot Annotations.   (line  416)
* annotation <1>:                        Plot Annotations.   (line  417)
* annotation <2>:                        Plot Annotations.   (line  418)
* annotation <3>:                        Plot Annotations.   (line  419)
* annotation <4>:                        Plot Annotations.   (line  420)
* annotation <5>:                        Plot Annotations.   (line  421)
* annotation <6>:                        Plot Annotations.   (line  422)
* annotation <7>:                        Plot Annotations.   (line  423)
* annotation <8>:                        Plot Annotations.   (line  424)
* annotation <9>:                        Plot Annotations.   (line  425)
* annotation <10>:                       Plot Annotations.   (line  426)
* any:                                   Finding Elements and Checking Conditions.
                                                             (line   11)
* any <1>:                               Finding Elements and Checking Conditions.
                                                             (line   12)
* arch_fit:                              Signal Processing.  (line  385)
* arch_rnd:                              Signal Processing.  (line  408)
* arch_test:                             Signal Processing.  (line  420)
* area:                                  Two-Dimensional Plots.
                                                             (line 1866)
* area <1>:                              Two-Dimensional Plots.
                                                             (line 1867)
* area <2>:                              Two-Dimensional Plots.
                                                             (line 1868)
* area <3>:                              Two-Dimensional Plots.
                                                             (line 1869)
* area <4>:                              Two-Dimensional Plots.
                                                             (line 1870)
* area <5>:                              Two-Dimensional Plots.
                                                             (line 1871)
* arg:                                   Complex Arithmetic. (line   21)
* argv:                                  Command Line Options.
                                                             (line  182)
* arma_rnd:                              Signal Processing.  (line  451)
* arrayfun:                              Function Application.
                                                             (line   13)
* arrayfun <1>:                          Function Application.
                                                             (line   14)
* arrayfun <2>:                          Function Application.
                                                             (line   15)
* arrayfun <3>:                          Function Application.
                                                             (line   16)
* arrayfun <4>:                          Function Application.
                                                             (line   17)
* arrayfun <5>:                          Function Application.
                                                             (line   18)
* ascii:                                 FTP Objects.        (line   83)
* asctime:                               Timing Utilities.   (line  165)
* asec:                                  Trigonometry.       (line  118)
* asecd:                                 Trigonometry.       (line  281)
* asech:                                 Trigonometry.       (line  181)
* asin:                                  Trigonometry.       (line  103)
* asind:                                 Trigonometry.       (line  260)
* asinh:                                 Trigonometry.       (line  166)
* assert:                                Test Functions.     (line  420)
* assert <1>:                            Test Functions.     (line  421)
* assert <2>:                            Test Functions.     (line  422)
* assert <3>:                            Test Functions.     (line  423)
* assert <4>:                            Test Functions.     (line  424)
* assert <5>:                            Test Functions.     (line  425)
* assignin:                              Evaluation in a Different Context.
                                                             (line   75)
* atan:                                  Trigonometry.       (line  113)
* atan2:                                 Trigonometry.       (line  196)
* atan2d:                                Trigonometry.       (line  275)
* atand:                                 Trigonometry.       (line  270)
* atanh:                                 Trigonometry.       (line  176)
* atexit:                                Quitting Octave.    (line   49)
* atexit <1>:                            Quitting Octave.    (line   50)
* audiodevinfo:                          Audio Device Information.
                                                             (line    6)
* audiodevinfo <1>:                      Audio Device Information.
                                                             (line    8)
* audiodevinfo <2>:                      Audio Device Information.
                                                             (line    9)
* audiodevinfo <3>:                      Audio Device Information.
                                                             (line   10)
* audiodevinfo <4>:                      Audio Device Information.
                                                             (line   11)
* audiodevinfo <5>:                      Audio Device Information.
                                                             (line   12)
* audiodevinfo <6>:                      Audio Device Information.
                                                             (line   13)
* audioformats:                          Audio File Utilities.
                                                             (line  111)
* audioformats <1>:                      Audio File Utilities.
                                                             (line  112)
* audioinfo:                             Audio File Utilities.
                                                             (line   10)
* audioplayer:                           Audio Player.       (line   12)
* audioplayer <1>:                       Audio Player.       (line   13)
* audioplayer <2>:                       Audio Player.       (line   14)
* audioplayer <3>:                       Audio Player.       (line   15)
* audioplayer <4>:                       Audio Player.       (line   16)
* audioread:                             Audio File Utilities.
                                                             (line   56)
* audioread <1>:                         Audio File Utilities.
                                                             (line   57)
* audioread <2>:                         Audio File Utilities.
                                                             (line   59)
* audioread <3>:                         Audio File Utilities.
                                                             (line   60)
* audiorecorder:                         Audio Recorder.     (line   13)
* audiorecorder <1>:                     Audio Recorder.     (line   14)
* audiorecorder <2>:                     Audio Recorder.     (line   15)
* audiowrite:                            Audio File Utilities.
                                                             (line   77)
* audiowrite <1>:                        Audio File Utilities.
                                                             (line   78)
* autoload:                              Overloading and Autoloading.
                                                             (line   47)
* autoload <1>:                          Overloading and Autoloading.
                                                             (line   48)
* autoload <2>:                          Overloading and Autoloading.
                                                             (line   49)
* autoreg_matrix:                        Signal Processing.  (line  467)
* auto_repeat_debug_command:             Debug Mode.         (line   91)
* auto_repeat_debug_command <1>:         Debug Mode.         (line   92)
* auto_repeat_debug_command <2>:         Debug Mode.         (line   93)
* autumn:                                Representing Images.
                                                             (line  344)
* autumn <1>:                            Representing Images.
                                                             (line  345)
* available_graphics_toolkits:           Graphics Toolkits.  (line   26)
* axes:                                  Graphics Objects.   (line   59)
* axes <1>:                              Graphics Objects.   (line   60)
* axes <2>:                              Graphics Objects.   (line   61)
* axes <3>:                              Graphics Objects.   (line   62)
* axes <4>:                              Graphics Objects.   (line   63)
* axis:                                  Axis Configuration. (line   13)
* axis <1>:                              Axis Configuration. (line   14)
* axis <2>:                              Axis Configuration. (line   15)
* axis <3>:                              Axis Configuration. (line   16)
* axis <4>:                              Axis Configuration. (line   17)
* axis <5>:                              Axis Configuration. (line   18)
* axis <6>:                              Axis Configuration. (line   19)
* axis <7>:                              Axis Configuration. (line   20)
* axis <8>:                              Axis Configuration. (line   21)
* balance:                               Basic Matrix Functions.
                                                             (line    6)
* balance <1>:                           Basic Matrix Functions.
                                                             (line    7)
* balance <2>:                           Basic Matrix Functions.
                                                             (line    8)
* balance <3>:                           Basic Matrix Functions.
                                                             (line    9)
* balance <4>:                           Basic Matrix Functions.
                                                             (line   10)
* bandwidth:                             Basic Matrix Functions.
                                                             (line   44)
* bandwidth <1>:                         Basic Matrix Functions.
                                                             (line   45)
* bar:                                   Two-Dimensional Plots.
                                                             (line  322)
* bar <1>:                               Two-Dimensional Plots.
                                                             (line  323)
* bar <2>:                               Two-Dimensional Plots.
                                                             (line  324)
* bar <3>:                               Two-Dimensional Plots.
                                                             (line  325)
* bar <4>:                               Two-Dimensional Plots.
                                                             (line  326)
* bar <5>:                               Two-Dimensional Plots.
                                                             (line  327)
* bar <6>:                               Two-Dimensional Plots.
                                                             (line  328)
* barh:                                  Two-Dimensional Plots.
                                                             (line  396)
* barh <1>:                              Two-Dimensional Plots.
                                                             (line  397)
* barh <2>:                              Two-Dimensional Plots.
                                                             (line  398)
* barh <3>:                              Two-Dimensional Plots.
                                                             (line  399)
* barh <4>:                              Two-Dimensional Plots.
                                                             (line  400)
* barh <5>:                              Two-Dimensional Plots.
                                                             (line  401)
* barh <6>:                              Two-Dimensional Plots.
                                                             (line  402)
* bartlett:                              Signal Processing.  (line  478)
* base2dec:                              Numerical Data and Strings.
                                                             (line  331)
* base64_decode:                         Base64 and Binary Data Transmission.
                                                             (line   17)
* base64_decode <1>:                     Base64 and Binary Data Transmission.
                                                             (line   18)
* base64_encode:                         Base64 and Binary Data Transmission.
                                                             (line   10)
* beep:                                  Raising Errors.     (line  145)
* beep_on_error:                         Raising Errors.     (line  155)
* beep_on_error <1>:                     Raising Errors.     (line  156)
* beep_on_error <2>:                     Raising Errors.     (line  157)
* besselh:                               Special Functions.  (line  192)
* besselh <1>:                           Special Functions.  (line  193)
* besselh <2>:                           Special Functions.  (line  194)
* besselh <3>:                           Special Functions.  (line  195)
* besseli:                               Special Functions.  (line  115)
* besseli <1>:                           Special Functions.  (line  116)
* besseli <2>:                           Special Functions.  (line  117)
* besselj:                               Special Functions.  (line   39)
* besselj <1>:                           Special Functions.  (line   40)
* besselj <2>:                           Special Functions.  (line   41)
* besselk:                               Special Functions.  (line  153)
* besselk <1>:                           Special Functions.  (line  154)
* besselk <2>:                           Special Functions.  (line  155)
* bessely:                               Special Functions.  (line   77)
* bessely <1>:                           Special Functions.  (line   78)
* bessely <2>:                           Special Functions.  (line   79)
* beta:                                  Special Functions.  (line  233)
* betainc:                               Special Functions.  (line  248)
* betainc <1>:                           Special Functions.  (line  249)
* betaincinv:                            Special Functions.  (line  283)
* betaincinv <1>:                        Special Functions.  (line  284)
* betaincinv <2>:                        Special Functions.  (line  285)
* betaln:                                Special Functions.  (line  318)
* bicg:                                  Specialized Solvers.
                                                             (line    6)
* bicg <1>:                              Specialized Solvers.
                                                             (line    7)
* bicg <2>:                              Specialized Solvers.
                                                             (line    8)
* bicg <3>:                              Specialized Solvers.
                                                             (line    9)
* bicg <4>:                              Specialized Solvers.
                                                             (line   10)
* bicg <5>:                              Specialized Solvers.
                                                             (line   11)
* bicg <6>:                              Specialized Solvers.
                                                             (line   12)
* bicg <7>:                              Specialized Solvers.
                                                             (line   13)
* bicg <8>:                              Specialized Solvers.
                                                             (line   14)
* bicg <9>:                              Specialized Solvers.
                                                             (line   15)
* bicgstab:                              Specialized Solvers.
                                                             (line  161)
* bicgstab <1>:                          Specialized Solvers.
                                                             (line  162)
* bicgstab <2>:                          Specialized Solvers.
                                                             (line  163)
* bin2dec:                               Numerical Data and Strings.
                                                             (line  202)
* binary:                                FTP Objects.        (line   92)
* bincoeff:                              Special Functions.  (line  335)
* bitand:                                Bit Manipulations.  (line   84)
* bitcmp:                                Bit Manipulations.  (line  115)
* bitget:                                Bit Manipulations.  (line   43)
* bitor:                                 Bit Manipulations.  (line   94)
* bitpack:                               Built-in Data Types.
                                                             (line  160)
* bitset:                                Bit Manipulations.  (line   10)
* bitset <1>:                            Bit Manipulations.  (line   11)
* bitshift:                              Bit Manipulations.  (line  135)
* bitshift <1>:                          Bit Manipulations.  (line  136)
* bitunpack:                             Built-in Data Types.
                                                             (line  191)
* bitxor:                                Bit Manipulations.  (line  102)
* blackman:                              Signal Processing.  (line  485)
* blackman <1>:                          Signal Processing.  (line  486)
* blackman <2>:                          Signal Processing.  (line  487)
* blanks:                                Strings.            (line   35)
* blkdiag:                               Rearranging Matrices.
                                                             (line  656)
* blkmm:                                 Functions of a Matrix.
                                                             (line   79)
* bone:                                  Representing Images.
                                                             (line  354)
* bone <1>:                              Representing Images.
                                                             (line  355)
* bounds:                                Descriptive Statistics.
                                                             (line  109)
* bounds <1>:                            Descriptive Statistics.
                                                             (line  110)
* bounds <2>:                            Descriptive Statistics.
                                                             (line  111)
* box:                                   Plot Annotations.   (line  307)
* box <1>:                               Plot Annotations.   (line  308)
* box <2>:                               Plot Annotations.   (line  309)
* box <3>:                               Plot Annotations.   (line  310)
* brighten:                              Representing Images.
                                                             (line  605)
* brighten <1>:                          Representing Images.
                                                             (line  606)
* brighten <2>:                          Representing Images.
                                                             (line  607)
* brighten <3>:                          Representing Images.
                                                             (line  608)
* bsxfun:                                Broadcasting.       (line   85)
* builtin:                               Overloading and Autoloading.
                                                             (line   14)
* built_in_docstrings_file:              Getting Help.       (line  218)
* built_in_docstrings_file <1>:          Getting Help.       (line  219)
* built_in_docstrings_file <2>:          Getting Help.       (line  220)
* bunzip2:                               File Archiving Utilities.
                                                             (line    6)
* bunzip2 <1>:                           File Archiving Utilities.
                                                             (line    7)
* bunzip2 <2>:                           File Archiving Utilities.
                                                             (line    8)
* byte_size:                             Matrices and Arrays in Oct-Files.
                                                             (line   92)
* bzip2:                                 File Archiving Utilities.
                                                             (line  180)
* bzip2 <1>:                             File Archiving Utilities.
                                                             (line  181)
* calendar:                              Timing Utilities.   (line  720)
* calendar <1>:                          Timing Utilities.   (line  721)
* calendar <2>:                          Timing Utilities.   (line  722)
* calendar <3>:                          Timing Utilities.   (line  723)
* camlight:                              Three-Dimensional Plots.
                                                             (line  952)
* camlight <1>:                          Three-Dimensional Plots.
                                                             (line  953)
* camlight <2>:                          Three-Dimensional Plots.
                                                             (line  954)
* camlight <3>:                          Three-Dimensional Plots.
                                                             (line  955)
* camlight <4>:                          Three-Dimensional Plots.
                                                             (line  956)
* camlight <5>:                          Three-Dimensional Plots.
                                                             (line  957)
* camlight <6>:                          Three-Dimensional Plots.
                                                             (line  958)
* camlight <7>:                          Three-Dimensional Plots.
                                                             (line  959)
* camlight <8>:                          Three-Dimensional Plots.
                                                             (line  960)
* camlookat:                             Three-Dimensional Plots.
                                                             (line 1193)
* camlookat <1>:                         Three-Dimensional Plots.
                                                             (line 1194)
* camlookat <2>:                         Three-Dimensional Plots.
                                                             (line 1195)
* camlookat <3>:                         Three-Dimensional Plots.
                                                             (line 1196)
* camorbit:                              Three-Dimensional Plots.
                                                             (line 1262)
* camorbit <1>:                          Three-Dimensional Plots.
                                                             (line 1263)
* camorbit <2>:                          Three-Dimensional Plots.
                                                             (line 1264)
* camorbit <3>:                          Three-Dimensional Plots.
                                                             (line 1265)
* camorbit <4>:                          Three-Dimensional Plots.
                                                             (line 1266)
* camorbit <5>:                          Three-Dimensional Plots.
                                                             (line 1267)
* camorbit <6>:                          Three-Dimensional Plots.
                                                             (line 1268)
* camorbit <7>:                          Three-Dimensional Plots.
                                                             (line 1269)
* camorbit <8>:                          Three-Dimensional Plots.
                                                             (line 1270)
* camorbit <9>:                          Three-Dimensional Plots.
                                                             (line 1271)
* campos:                                Three-Dimensional Plots.
                                                             (line 1220)
* campos <1>:                            Three-Dimensional Plots.
                                                             (line 1221)
* campos <2>:                            Three-Dimensional Plots.
                                                             (line 1222)
* campos <3>:                            Three-Dimensional Plots.
                                                             (line 1223)
* campos <4>:                            Three-Dimensional Plots.
                                                             (line 1224)
* camroll:                               Three-Dimensional Plots.
                                                             (line 1314)
* camroll <1>:                           Three-Dimensional Plots.
                                                             (line 1315)
* camtarget:                             Three-Dimensional Plots.
                                                             (line 1340)
* camtarget <1>:                         Three-Dimensional Plots.
                                                             (line 1341)
* camtarget <2>:                         Three-Dimensional Plots.
                                                             (line 1342)
* camtarget <3>:                         Three-Dimensional Plots.
                                                             (line 1343)
* camtarget <4>:                         Three-Dimensional Plots.
                                                             (line 1344)
* camup:                                 Three-Dimensional Plots.
                                                             (line 1388)
* camup <1>:                             Three-Dimensional Plots.
                                                             (line 1389)
* camup <2>:                             Three-Dimensional Plots.
                                                             (line 1390)
* camup <3>:                             Three-Dimensional Plots.
                                                             (line 1391)
* camup <4>:                             Three-Dimensional Plots.
                                                             (line 1392)
* camva:                                 Three-Dimensional Plots.
                                                             (line 1440)
* camva <1>:                             Three-Dimensional Plots.
                                                             (line 1441)
* camva <2>:                             Three-Dimensional Plots.
                                                             (line 1442)
* camva <3>:                             Three-Dimensional Plots.
                                                             (line 1443)
* camva <4>:                             Three-Dimensional Plots.
                                                             (line 1444)
* camzoom:                               Three-Dimensional Plots.
                                                             (line 1477)
* camzoom <1>:                           Three-Dimensional Plots.
                                                             (line 1478)
* canonicalize_file_name:                Filesystem Utilities.
                                                             (line  595)
* cart2pol:                              Coordinate Transformations.
                                                             (line    6)
* cart2pol <1>:                          Coordinate Transformations.
                                                             (line    7)
* cart2pol <2>:                          Coordinate Transformations.
                                                             (line    8)
* cart2pol <3>:                          Coordinate Transformations.
                                                             (line    9)
* cart2sph:                              Coordinate Transformations.
                                                             (line   76)
* cart2sph <1>:                          Coordinate Transformations.
                                                             (line   77)
* cast:                                  Built-in Data Types.
                                                             (line   49)
* cast <1>:                              Built-in Data Types.
                                                             (line   50)
* cat:                                   Rearranging Matrices.
                                                             (line  129)
* caxis:                                 Axis Configuration. (line  132)
* caxis <1>:                             Axis Configuration. (line  133)
* caxis <2>:                             Axis Configuration. (line  134)
* caxis <3>:                             Axis Configuration. (line  135)
* caxis <4>:                             Axis Configuration. (line  136)
* cbrt:                                  Exponents and Logarithms.
                                                             (line  106)
* ccolamd:                               Mathematical Considerations.
                                                             (line  153)
* ccolamd <1>:                           Mathematical Considerations.
                                                             (line  154)
* ccolamd <2>:                           Mathematical Considerations.
                                                             (line  155)
* ccolamd <3>:                           Mathematical Considerations.
                                                             (line  156)
* cd:                                    FTP Objects.        (line   64)
* cd <1>:                                FTP Objects.        (line   65)
* cd <2>:                                Current Working Directory.
                                                             (line    6)
* cd <3>:                                Current Working Directory.
                                                             (line    7)
* cd <4>:                                Current Working Directory.
                                                             (line    8)
* cd <5>:                                Current Working Directory.
                                                             (line    9)
* ceil:                                  Utility Functions.  (line    6)
* cell:                                  Creating Cell Arrays.
                                                             (line   44)
* cell <1>:                              Creating Cell Arrays.
                                                             (line   45)
* cell <2>:                              Creating Cell Arrays.
                                                             (line   46)
* cell <3>:                              Creating Cell Arrays.
                                                             (line   47)
* cell2mat:                              Processing Data in Cell Arrays.
                                                             (line   17)
* cell2struct:                           Processing Data in Cell Arrays.
                                                             (line   28)
* cell2struct <1>:                       Processing Data in Cell Arrays.
                                                             (line   29)
* celldisp:                              Basic Usage of Cell Arrays.
                                                             (line   53)
* celldisp <1>:                          Basic Usage of Cell Arrays.
                                                             (line   54)
* cellfun:                               Function Application.
                                                             (line  151)
* cellfun <1>:                           Function Application.
                                                             (line  152)
* cellfun <2>:                           Function Application.
                                                             (line  153)
* cellfun <3>:                           Function Application.
                                                             (line  154)
* cellfun <4>:                           Function Application.
                                                             (line  155)
* cellfun <5>:                           Function Application.
                                                             (line  156)
* cellfun <6>:                           Function Application.
                                                             (line  157)
* cellfun <7>:                           Function Application.
                                                             (line  158)
* cellindexmat:                          Indexing Cell Arrays.
                                                             (line  113)
* cellslices:                            Creating Cell Arrays.
                                                             (line  203)
* cellstr:                               Cell Arrays of Strings.
                                                             (line   25)
* center:                                Basic Statistical Functions.
                                                             (line   11)
* center <1>:                            Basic Statistical Functions.
                                                             (line   12)
* cgs:                                   Specialized Solvers.
                                                             (line  303)
* cgs <1>:                               Specialized Solvers.
                                                             (line  304)
* cgs <2>:                               Specialized Solvers.
                                                             (line  305)
* char:                                  Concatenating Strings.
                                                             (line  115)
* char <1>:                              Concatenating Strings.
                                                             (line  116)
* char <2>:                              Concatenating Strings.
                                                             (line  117)
* char <3>:                              Concatenating Strings.
                                                             (line  118)
* chdir:                                 Current Working Directory.
                                                             (line   10)
* chol:                                  Matrix Factorizations.
                                                             (line    6)
* chol <1>:                              Matrix Factorizations.
                                                             (line    7)
* chol <2>:                              Matrix Factorizations.
                                                             (line    8)
* chol <3>:                              Matrix Factorizations.
                                                             (line    9)
* chol <4>:                              Matrix Factorizations.
                                                             (line   10)
* chol <5>:                              Matrix Factorizations.
                                                             (line   11)
* chol2inv:                              Matrix Factorizations.
                                                             (line   68)
* choldelete:                            Matrix Factorizations.
                                                             (line  128)
* cholinsert:                            Matrix Factorizations.
                                                             (line  103)
* cholinsert <1>:                        Matrix Factorizations.
                                                             (line  104)
* cholinv:                               Matrix Factorizations.
                                                             (line   61)
* cholshift:                             Matrix Factorizations.
                                                             (line  140)
* cholupdate:                            Matrix Factorizations.
                                                             (line   79)
* circshift:                             Rearranging Matrices.
                                                             (line  283)
* circshift <1>:                         Rearranging Matrices.
                                                             (line  284)
* citation:                              Citing Octave in Publications.
                                                             (line   13)
* citation <1>:                          Citing Octave in Publications.
                                                             (line   14)
* cla:                                   Manipulation of Plot Windows.
                                                             (line  184)
* cla <1>:                               Manipulation of Plot Windows.
                                                             (line  185)
* cla <2>:                               Manipulation of Plot Windows.
                                                             (line  186)
* cla <3>:                               Manipulation of Plot Windows.
                                                             (line  187)
* clabel:                                Plot Annotations.   (line  265)
* clabel <1>:                            Plot Annotations.   (line  266)
* clabel <2>:                            Plot Annotations.   (line  267)
* clabel <3>:                            Plot Annotations.   (line  268)
* clabel <4>:                            Plot Annotations.   (line  269)
* clabel <5>:                            Plot Annotations.   (line  270)
* class:                                 Built-in Data Types.
                                                             (line   16)
* class <1>:                             Built-in Data Types.
                                                             (line   17)
* class <2>:                             Built-in Data Types.
                                                             (line   18)
* clc:                                   Cursor Motion.      (line   59)
* clear:                                 Status of Variables.
                                                             (line  265)
* clear <1>:                             Status of Variables.
                                                             (line  266)
* clear <2>:                             Status of Variables.
                                                             (line  267)
* clearvars:                             Status of Variables.
                                                             (line  350)
* clearvars <1>:                         Status of Variables.
                                                             (line  351)
* clearvars <2>:                         Status of Variables.
                                                             (line  352)
* clearvars <3>:                         Status of Variables.
                                                             (line  353)
* clearvars <4>:                         Status of Variables.
                                                             (line  354)
* clearvars <5>:                         Status of Variables.
                                                             (line  355)
* clf:                                   Manipulation of Plot Windows.
                                                             (line  160)
* clf <1>:                               Manipulation of Plot Windows.
                                                             (line  161)
* clf <2>:                               Manipulation of Plot Windows.
                                                             (line  162)
* clf <3>:                               Manipulation of Plot Windows.
                                                             (line  163)
* clf <4>:                               Manipulation of Plot Windows.
                                                             (line  164)
* clock:                                 Timing Utilities.   (line  347)
* close:                                 Manipulation of Plot Windows.
                                                             (line  236)
* close <1>:                             Manipulation of Plot Windows.
                                                             (line  237)
* close <2>:                             Manipulation of Plot Windows.
                                                             (line  238)
* close <3>:                             Manipulation of Plot Windows.
                                                             (line  239)
* close <4>:                             Manipulation of Plot Windows.
                                                             (line  240)
* close <5>:                             Manipulation of Plot Windows.
                                                             (line  241)
* close <6>:                             FTP Objects.        (line   35)
* closereq:                              Manipulation of Plot Windows.
                                                             (line  271)
* cmpermute:                             Representing Images.
                                                             (line  714)
* cmpermute <1>:                         Representing Images.
                                                             (line  715)
* cmunique:                              Representing Images.
                                                             (line  681)
* cmunique <1>:                          Representing Images.
                                                             (line  682)
* cmunique <2>:                          Representing Images.
                                                             (line  683)
* colamd:                                Mathematical Considerations.
                                                             (line  234)
* colamd <1>:                            Mathematical Considerations.
                                                             (line  235)
* colamd <2>:                            Mathematical Considerations.
                                                             (line  236)
* colamd <3>:                            Mathematical Considerations.
                                                             (line  237)
* colloc:                                Orthogonal Collocation.
                                                             (line    6)
* colon:                                 Defining Indexing And Indexed Assignment.
                                                             (line  203)
* colon <1>:                             Defining Indexing And Indexed Assignment.
                                                             (line  204)
* colorbar:                              Plot Annotations.   (line  346)
* colorbar <1>:                          Plot Annotations.   (line  347)
* colorbar <2>:                          Plot Annotations.   (line  348)
* colorbar <3>:                          Plot Annotations.   (line  349)
* colorbar <4>:                          Plot Annotations.   (line  350)
* colorbar <5>:                          Plot Annotations.   (line  351)
* colorbar <6>:                          Plot Annotations.   (line  352)
* colorbar <7>:                          Plot Annotations.   (line  353)
* colorbar <8>:                          Plot Annotations.   (line  354)
* colorcube:                             Representing Images.
                                                             (line  364)
* colorcube <1>:                         Representing Images.
                                                             (line  365)
* colormap:                              Representing Images.
                                                             (line  230)
* colormap <1>:                          Representing Images.
                                                             (line  231)
* colormap <2>:                          Representing Images.
                                                             (line  232)
* colormap <3>:                          Representing Images.
                                                             (line  233)
* colormap <4>:                          Representing Images.
                                                             (line  234)
* colormap <5>:                          Representing Images.
                                                             (line  235)
* colperm:                               Mathematical Considerations.
                                                             (line  300)
* colstyle:                              Marker Styles.      (line   27)
* columns:                               Object Sizes.       (line   24)
* comet:                                 Two-Dimensional Plots.
                                                             (line 1995)
* comet <1>:                             Two-Dimensional Plots.
                                                             (line 1996)
* comet <2>:                             Two-Dimensional Plots.
                                                             (line 1997)
* comet <3>:                             Two-Dimensional Plots.
                                                             (line 1998)
* comet3:                                Two-Dimensional Plots.
                                                             (line 2013)
* comet3 <1>:                            Two-Dimensional Plots.
                                                             (line 2014)
* comet3 <2>:                            Two-Dimensional Plots.
                                                             (line 2015)
* comet3 <3>:                            Two-Dimensional Plots.
                                                             (line 2016)
* commandhistory:                        Octave Workspace Windows.
                                                             (line   11)
* commandwindow:                         Octave Workspace Windows.
                                                             (line   17)
* command_line_path:                     Manipulating the Load Path.
                                                             (line  183)
* common_size:                           Finding Elements and Checking Conditions.
                                                             (line  143)
* commutation_matrix:                    Special Functions.  (line  357)
* compan:                                Finding Roots.      (line   55)
* compare_versions:                      System Information. (line  227)
* compass:                               Two-Dimensional Plots.
                                                             (line 1773)
* compass <1>:                           Two-Dimensional Plots.
                                                             (line 1774)
* compass <2>:                           Two-Dimensional Plots.
                                                             (line 1775)
* compass <3>:                           Two-Dimensional Plots.
                                                             (line 1776)
* compass <4>:                           Two-Dimensional Plots.
                                                             (line 1777)
* completion_append_char:                Commands for Completion.
                                                             (line   16)
* completion_append_char <1>:            Commands for Completion.
                                                             (line   17)
* completion_append_char <2>:            Commands for Completion.
                                                             (line   18)
* completion_matches:                    Commands for Completion.
                                                             (line   29)
* complex:                               Numeric Data Types. (line   64)
* complex <1>:                           Numeric Data Types. (line   65)
* computer:                              System Information. (line    6)
* computer <1>:                          System Information. (line    7)
* computer <2>:                          System Information. (line    8)
* computer <3>:                          System Information. (line    9)
* computer <4>:                          System Information. (line   10)
* cond:                                  Basic Matrix Functions.
                                                             (line   58)
* cond <1>:                              Basic Matrix Functions.
                                                             (line   59)
* condeig:                               Basic Matrix Functions.
                                                             (line   81)
* condeig <1>:                           Basic Matrix Functions.
                                                             (line   82)
* condest:                               Sparse Linear Algebra.
                                                             (line  169)
* condest <1>:                           Sparse Linear Algebra.
                                                             (line  170)
* condest <2>:                           Sparse Linear Algebra.
                                                             (line  171)
* condest <3>:                           Sparse Linear Algebra.
                                                             (line  172)
* condest <4>:                           Sparse Linear Algebra.
                                                             (line  173)
* condest <5>:                           Sparse Linear Algebra.
                                                             (line  174)
* condest <6>:                           Sparse Linear Algebra.
                                                             (line  175)
* condest <7>:                           Sparse Linear Algebra.
                                                             (line  176)
* condest <8>:                           Sparse Linear Algebra.
                                                             (line  177)
* confirm_recursive_rmdir:               Filesystem Utilities.
                                                             (line  154)
* confirm_recursive_rmdir <1>:           Filesystem Utilities.
                                                             (line  155)
* confirm_recursive_rmdir <2>:           Filesystem Utilities.
                                                             (line  156)
* conj:                                  Complex Arithmetic. (line   34)
* containers.Map:                        containers.Map.     (line    6)
* containers.Map <1>:                    containers.Map.     (line    7)
* containers.Map <2>:                    containers.Map.     (line    8)
* containers.Map <3>:                    containers.Map.     (line    9)
* contour:                               Two-Dimensional Plots.
                                                             (line  917)
* contour <1>:                           Two-Dimensional Plots.
                                                             (line  918)
* contour <2>:                           Two-Dimensional Plots.
                                                             (line  919)
* contour <3>:                           Two-Dimensional Plots.
                                                             (line  920)
* contour <4>:                           Two-Dimensional Plots.
                                                             (line  921)
* contour <5>:                           Two-Dimensional Plots.
                                                             (line  922)
* contour <6>:                           Two-Dimensional Plots.
                                                             (line  923)
* contour3:                              Two-Dimensional Plots.
                                                             (line 1041)
* contour3 <1>:                          Two-Dimensional Plots.
                                                             (line 1042)
* contour3 <2>:                          Two-Dimensional Plots.
                                                             (line 1043)
* contour3 <3>:                          Two-Dimensional Plots.
                                                             (line 1044)
* contour3 <4>:                          Two-Dimensional Plots.
                                                             (line 1045)
* contour3 <5>:                          Two-Dimensional Plots.
                                                             (line 1046)
* contour3 <6>:                          Two-Dimensional Plots.
                                                             (line 1047)
* contourc:                              Two-Dimensional Plots.
                                                             (line  997)
* contourc <1>:                          Two-Dimensional Plots.
                                                             (line  998)
* contourc <2>:                          Two-Dimensional Plots.
                                                             (line  999)
* contourc <3>:                          Two-Dimensional Plots.
                                                             (line 1000)
* contourc <4>:                          Two-Dimensional Plots.
                                                             (line 1001)
* contourf:                              Two-Dimensional Plots.
                                                             (line  956)
* contourf <1>:                          Two-Dimensional Plots.
                                                             (line  957)
* contourf <2>:                          Two-Dimensional Plots.
                                                             (line  958)
* contourf <3>:                          Two-Dimensional Plots.
                                                             (line  959)
* contourf <4>:                          Two-Dimensional Plots.
                                                             (line  960)
* contourf <5>:                          Two-Dimensional Plots.
                                                             (line  961)
* contourf <6>:                          Two-Dimensional Plots.
                                                             (line  962)
* contrast:                              Representing Images.
                                                             (line  592)
* contrast <1>:                          Representing Images.
                                                             (line  593)
* conv:                                  Products of Polynomials.
                                                             (line    6)
* conv <1>:                              Products of Polynomials.
                                                             (line    7)
* conv2:                                 Products of Polynomials.
                                                             (line   66)
* conv2 <1>:                             Products of Polynomials.
                                                             (line   67)
* conv2 <2>:                             Products of Polynomials.
                                                             (line   68)
* convhull:                              Convex Hull.        (line   11)
* convhull <1>:                          Convex Hull.        (line   12)
* convhull <2>:                          Convex Hull.        (line   13)
* convhull <3>:                          Convex Hull.        (line   14)
* convhull <4>:                          Convex Hull.        (line   15)
* convhulln:                             Convex Hull.        (line   45)
* convhulln <1>:                         Convex Hull.        (line   46)
* convhulln <2>:                         Convex Hull.        (line   47)
* convn:                                 Products of Polynomials.
                                                             (line   32)
* convn <1>:                             Products of Polynomials.
                                                             (line   33)
* cool:                                  Representing Images.
                                                             (line  379)
* cool <1>:                              Representing Images.
                                                             (line  380)
* copper:                                Representing Images.
                                                             (line  388)
* copper <1>:                            Representing Images.
                                                             (line  389)
* copyfile:                              Filesystem Utilities.
                                                             (line   51)
* copyfile <1>:                          Filesystem Utilities.
                                                             (line   52)
* copyfile <2>:                          Filesystem Utilities.
                                                             (line   53)
* copyfile <3>:                          Filesystem Utilities.
                                                             (line   54)
* copyfile <4>:                          Filesystem Utilities.
                                                             (line   55)
* copyobj:                               Graphics Objects.   (line  647)
* copyobj <1>:                           Graphics Objects.   (line  648)
* corr:                                  Correlation and Regression Analysis.
                                                             (line   45)
* corr <1>:                              Correlation and Regression Analysis.
                                                             (line   46)
* corrcoef:                              Correlation and Regression Analysis.
                                                             (line   61)
* corrcoef <1>:                          Correlation and Regression Analysis.
                                                             (line   62)
* corrcoef <2>:                          Correlation and Regression Analysis.
                                                             (line   63)
* corrcoef <3>:                          Correlation and Regression Analysis.
                                                             (line   64)
* corrcoef <4>:                          Correlation and Regression Analysis.
                                                             (line   65)
* cos:                                   Trigonometry.       (line   73)
* cosd:                                  Trigonometry.       (line  227)
* cosh:                                  Trigonometry.       (line  139)
* cosint:                                Special Functions.  (line  367)
* cospi:                                 Trigonometry.       (line  322)
* cot:                                   Trigonometry.       (line   97)
* cotd:                                  Trigonometry.       (line  255)
* coth:                                  Trigonometry.       (line  161)
* cov:                                   Correlation and Regression Analysis.
                                                             (line    6)
* cov <1>:                               Correlation and Regression Analysis.
                                                             (line    7)
* cov <2>:                               Correlation and Regression Analysis.
                                                             (line    8)
* cov <3>:                               Correlation and Regression Analysis.
                                                             (line    9)
* cplxpair:                              Complex Arithmetic. (line   41)
* cplxpair <1>:                          Complex Arithmetic. (line   42)
* cplxpair <2>:                          Complex Arithmetic. (line   43)
* cputime:                               Timing Utilities.   (line  395)
* crash_dumps_octave_core:               Saving Data on Unexpected Exits.
                                                             (line   12)
* crash_dumps_octave_core <1>:           Saving Data on Unexpected Exits.
                                                             (line   13)
* crash_dumps_octave_core <2>:           Saving Data on Unexpected Exits.
                                                             (line   14)
* cross:                                 Utility Functions.  (line  282)
* cross <1>:                             Utility Functions.  (line  283)
* csc:                                   Trigonometry.       (line   91)
* cscd:                                  Trigonometry.       (line  250)
* csch:                                  Trigonometry.       (line  156)
* cstrcat:                               Concatenating Strings.
                                                             (line  216)
* csvread:                               Simple File I/O.    (line  483)
* csvread <1>:                           Simple File I/O.    (line  484)
* csvwrite:                              Simple File I/O.    (line  468)
* csvwrite <1>:                          Simple File I/O.    (line  469)
* csymamd:                               Mathematical Considerations.
                                                             (line  307)
* csymamd <1>:                           Mathematical Considerations.
                                                             (line  308)
* csymamd <2>:                           Mathematical Considerations.
                                                             (line  309)
* csymamd <3>:                           Mathematical Considerations.
                                                             (line  310)
* ctime:                                 Timing Utilities.   (line   78)
* ctranspose:                            Arithmetic Ops.     (line  112)
* cubehelix:                             Representing Images.
                                                             (line  398)
* cubehelix <1>:                         Representing Images.
                                                             (line  399)
* cubehelix <2>:                         Representing Images.
                                                             (line  400)
* cummax:                                Utility Functions.  (line  165)
* cummax <1>:                            Utility Functions.  (line  166)
* cummax <2>:                            Utility Functions.  (line  167)
* cummin:                                Utility Functions.  (line  187)
* cummin <1>:                            Utility Functions.  (line  188)
* cummin <2>:                            Utility Functions.  (line  189)
* cumprod:                               Sums and Products.  (line   87)
* cumprod <1>:                           Sums and Products.  (line   88)
* cumsum:                                Sums and Products.  (line   68)
* cumsum <1>:                            Sums and Products.  (line   69)
* cumsum <2>:                            Sums and Products.  (line   70)
* cumsum <3>:                            Sums and Products.  (line   71)
* cumtrapz:                              Functions of One Variable.
                                                             (line  586)
* cumtrapz <1>:                          Functions of One Variable.
                                                             (line  587)
* cumtrapz <2>:                          Functions of One Variable.
                                                             (line  588)
* curl:                                  Utility Functions.  (line  319)
* curl <1>:                              Utility Functions.  (line  320)
* curl <2>:                              Utility Functions.  (line  321)
* curl <3>:                              Utility Functions.  (line  322)
* curl <4>:                              Utility Functions.  (line  323)
* cylinder:                              Three-dimensional Geometric Shapes.
                                                             (line    6)
* cylinder <1>:                          Three-dimensional Geometric Shapes.
                                                             (line    7)
* cylinder <2>:                          Three-dimensional Geometric Shapes.
                                                             (line    8)
* cylinder <3>:                          Three-dimensional Geometric Shapes.
                                                             (line    9)
* cylinder <4>:                          Three-dimensional Geometric Shapes.
                                                             (line   10)
* daspect:                               Aspect Ratio.       (line   10)
* daspect <1>:                           Aspect Ratio.       (line   11)
* daspect <2>:                           Aspect Ratio.       (line   12)
* daspect <3>:                           Aspect Ratio.       (line   13)
* daspect <4>:                           Aspect Ratio.       (line   14)
* daspk:                                 Differential-Algebraic Equations.
                                                             (line   13)
* daspk_options:                         Differential-Algebraic Equations.
                                                             (line   81)
* daspk_options <1>:                     Differential-Algebraic Equations.
                                                             (line   82)
* daspk_options <2>:                     Differential-Algebraic Equations.
                                                             (line   83)
* dasrt:                                 Differential-Algebraic Equations.
                                                             (line  381)
* dasrt <1>:                             Differential-Algebraic Equations.
                                                             (line  382)
* dasrt <2>:                             Differential-Algebraic Equations.
                                                             (line  383)
* dasrt <3>:                             Differential-Algebraic Equations.
                                                             (line  384)
* dasrt_options:                         Differential-Algebraic Equations.
                                                             (line  486)
* dasrt_options <1>:                     Differential-Algebraic Equations.
                                                             (line  487)
* dasrt_options <2>:                     Differential-Algebraic Equations.
                                                             (line  488)
* dassl:                                 Differential-Algebraic Equations.
                                                             (line  249)
* dassl_options:                         Differential-Algebraic Equations.
                                                             (line  318)
* dassl_options <1>:                     Differential-Algebraic Equations.
                                                             (line  319)
* dassl_options <2>:                     Differential-Algebraic Equations.
                                                             (line  320)
* date:                                  Timing Utilities.   (line  366)
* datenum:                               Timing Utilities.   (line  522)
* datenum <1>:                           Timing Utilities.   (line  523)
* datenum <2>:                           Timing Utilities.   (line  524)
* datenum <3>:                           Timing Utilities.   (line  525)
* datenum <4>:                           Timing Utilities.   (line  526)
* datenum <5>:                           Timing Utilities.   (line  527)
* datenum <6>:                           Timing Utilities.   (line  528)
* datenum <7>:                           Timing Utilities.   (line  529)
* datenum <8>:                           Timing Utilities.   (line  530)
* datestr:                               Timing Utilities.   (line  596)
* datestr <1>:                           Timing Utilities.   (line  597)
* datestr <2>:                           Timing Utilities.   (line  598)
* datetick:                              Timing Utilities.   (line  773)
* datetick <1>:                          Timing Utilities.   (line  774)
* datetick <2>:                          Timing Utilities.   (line  775)
* datetick <3>:                          Timing Utilities.   (line  776)
* datetick <4>:                          Timing Utilities.   (line  777)
* datetick <5>:                          Timing Utilities.   (line  778)
* datetick <6>:                          Timing Utilities.   (line  779)
* datevec:                               Timing Utilities.   (line  685)
* datevec <1>:                           Timing Utilities.   (line  686)
* datevec <2>:                           Timing Utilities.   (line  687)
* datevec <3>:                           Timing Utilities.   (line  688)
* datevec <4>:                           Timing Utilities.   (line  689)
* dawson:                                Special Functions.  (line  402)
* dbclear:                               Breakpoints.        (line  162)
* dbclear <1>:                           Breakpoints.        (line  163)
* dbclear <2>:                           Breakpoints.        (line  164)
* dbclear <3>:                           Breakpoints.        (line  165)
* dbclear <4>:                           Breakpoints.        (line  166)
* dbclear <5>:                           Breakpoints.        (line  167)
* dbclear <6>:                           Breakpoints.        (line  168)
* dbclear <7>:                           Breakpoints.        (line  169)
* dbclear <8>:                           Breakpoints.        (line  170)
* dbclear <9>:                           Breakpoints.        (line  171)
* dbclear <10>:                          Breakpoints.        (line  172)
* dbclear <11>:                          Breakpoints.        (line  173)
* dbclear <12>:                          Breakpoints.        (line  174)
* dbclear <13>:                          Breakpoints.        (line  175)
* dbcont:                                Leaving Debug Mode. (line    9)
* dbdown:                                Call Stack.         (line   58)
* dbdown <1>:                            Call Stack.         (line   59)
* dblist:                                Debug Mode.         (line   42)
* dblist <1>:                            Debug Mode.         (line   43)
* dblquad:                               Functions of Multiple Variables.
                                                             (line   42)
* dblquad <1>:                           Functions of Multiple Variables.
                                                             (line   43)
* dblquad <2>:                           Functions of Multiple Variables.
                                                             (line   44)
* dblquad <3>:                           Functions of Multiple Variables.
                                                             (line   45)
* dbnext:                                Debug Mode.         (line   68)
* dbquit:                                Leaving Debug Mode. (line   18)
* dbquit <1>:                            Leaving Debug Mode. (line   19)
* dbstack:                               Call Stack.         (line   14)
* dbstack <1>:                           Call Stack.         (line   15)
* dbstack <2>:                           Call Stack.         (line   16)
* dbstack <3>:                           Call Stack.         (line   17)
* dbstatus:                              Breakpoints.        (line  119)
* dbstatus <1>:                          Breakpoints.        (line  120)
* dbstatus <2>:                          Breakpoints.        (line  121)
* dbstep:                                Debug Mode.         (line   64)
* dbstep <1>:                            Debug Mode.         (line   65)
* dbstep <2>:                            Debug Mode.         (line   66)
* dbstep <3>:                            Debug Mode.         (line   67)
* dbstop:                                Breakpoints.        (line    9)
* dbstop <1>:                            Breakpoints.        (line   10)
* dbstop <2>:                            Breakpoints.        (line   11)
* dbstop <3>:                            Breakpoints.        (line   12)
* dbstop <4>:                            Breakpoints.        (line   13)
* dbstop <5>:                            Breakpoints.        (line   14)
* dbstop <6>:                            Breakpoints.        (line   15)
* dbstop <7>:                            Breakpoints.        (line   16)
* dbstop <8>:                            Breakpoints.        (line   17)
* dbstop <9>:                            Breakpoints.        (line   18)
* dbstop <10>:                           Breakpoints.        (line   19)
* dbstop <11>:                           Breakpoints.        (line   20)
* dbtype:                                Debug Mode.         (line   19)
* dbtype <1>:                            Debug Mode.         (line   20)
* dbtype <2>:                            Debug Mode.         (line   21)
* dbtype <3>:                            Debug Mode.         (line   22)
* dbtype <4>:                            Debug Mode.         (line   23)
* dbtype <5>:                            Debug Mode.         (line   24)
* dbtype <6>:                            Debug Mode.         (line   25)
* dbtype <7>:                            Debug Mode.         (line   26)
* dbup:                                  Call Stack.         (line   50)
* dbup <1>:                              Call Stack.         (line   51)
* dbwhere:                               Debug Mode.         (line   11)
* deal:                                  Variable-length Return Lists.
                                                             (line   33)
* deal <1>:                              Variable-length Return Lists.
                                                             (line   34)
* deblank:                               Common String Operations.
                                                             (line   34)
* debug_java:                            Java Interface Functions.
                                                             (line  375)
* debug_java <1>:                        Java Interface Functions.
                                                             (line  376)
* debug_java <2>:                        Java Interface Functions.
                                                             (line  377)
* debug_on_error:                        Entering Debug Mode.
                                                             (line   46)
* debug_on_error <1>:                    Entering Debug Mode.
                                                             (line   47)
* debug_on_error <2>:                    Entering Debug Mode.
                                                             (line   48)
* debug_on_interrupt:                    Entering Debug Mode.
                                                             (line   14)
* debug_on_interrupt <1>:                Entering Debug Mode.
                                                             (line   15)
* debug_on_interrupt <2>:                Entering Debug Mode.
                                                             (line   16)
* debug_on_warning:                      Entering Debug Mode.
                                                             (line   32)
* debug_on_warning <1>:                  Entering Debug Mode.
                                                             (line   33)
* debug_on_warning <2>:                  Entering Debug Mode.
                                                             (line   34)
* dec2base:                              Numerical Data and Strings.
                                                             (line  306)
* dec2base <1>:                          Numerical Data and Strings.
                                                             (line  307)
* dec2bin:                               Numerical Data and Strings.
                                                             (line  226)
* dec2bin <1>:                           Numerical Data and Strings.
                                                             (line  227)
* dec2hex:                               Numerical Data and Strings.
                                                             (line  262)
* dec2hex <1>:                           Numerical Data and Strings.
                                                             (line  263)
* decic:                                 Matlab-compatible solvers.
                                                             (line  383)
* decic <1>:                             Matlab-compatible solvers.
                                                             (line  384)
* decic <2>:                             Matlab-compatible solvers.
                                                             (line  386)
* deconv:                                Products of Polynomials.
                                                             (line   53)
* deconv <1>:                            Products of Polynomials.
                                                             (line   54)
* deg2rad:                               Trigonometry.       (line   29)
* del2:                                  Utility Functions.  (line  341)
* del2 <1>:                              Utility Functions.  (line  342)
* del2 <2>:                              Utility Functions.  (line  343)
* delaunay:                              Delaunay Triangulation.
                                                             (line   17)
* delaunay <1>:                          Delaunay Triangulation.
                                                             (line   18)
* delaunay <2>:                          Delaunay Triangulation.
                                                             (line   19)
* delaunay <3>:                          Delaunay Triangulation.
                                                             (line   20)
* delaunayn:                             Delaunay Triangulation.
                                                             (line   76)
* delaunayn <1>:                         Delaunay Triangulation.
                                                             (line   77)
* delete:                                Manipulation of Plot Windows.
                                                             (line  220)
* delete <1>:                            Manipulation of Plot Windows.
                                                             (line  221)
* delete <2>:                            Manipulation of Plot Windows.
                                                             (line  222)
* delete <3>:                            FTP Objects.        (line  100)
* dellistener:                           Object Groups.      (line  153)
* demo:                                  Demonstration Functions.
                                                             (line    6)
* demo <1>:                              Demonstration Functions.
                                                             (line    7)
* demo <2>:                              Demonstration Functions.
                                                             (line    8)
* demo <3>:                              Demonstration Functions.
                                                             (line    9)
* det:                                   Basic Matrix Functions.
                                                             (line  112)
* det <1>:                               Basic Matrix Functions.
                                                             (line  113)
* detrend:                               Signal Processing.  (line  498)
* diag:                                  Rearranging Matrices.
                                                             (line  631)
* diag <1>:                              Rearranging Matrices.
                                                             (line  632)
* diag <2>:                              Rearranging Matrices.
                                                             (line  633)
* diag <3>:                              Rearranging Matrices.
                                                             (line  634)
* diag <4>:                              Rearranging Matrices.
                                                             (line  635)
* dialog:                                I/O Dialogs.        (line  476)
* dialog <1>:                            I/O Dialogs.        (line  477)
* diary:                                 A Sample Command Description.
                                                             (line   11)
* diary <1>:                             A Sample Command Description.
                                                             (line   12)
* diary <2>:                             A Sample Command Description.
                                                             (line   13)
* diary <3>:                             A Sample Command Description.
                                                             (line   14)
* diary <4>:                             A Sample Command Description.
                                                             (line   15)
* diary <5>:                             Diary and Echo Commands.
                                                             (line   10)
* diary <6>:                             Diary and Echo Commands.
                                                             (line   11)
* diary <7>:                             Diary and Echo Commands.
                                                             (line   12)
* diary <8>:                             Diary and Echo Commands.
                                                             (line   13)
* diary <9>:                             Diary and Echo Commands.
                                                             (line   14)
* diff:                                  Finding Elements and Checking Conditions.
                                                             (line   85)
* diff <1>:                              Finding Elements and Checking Conditions.
                                                             (line   86)
* diff <2>:                              Finding Elements and Checking Conditions.
                                                             (line   87)
* diffpara:                              Signal Processing.  (line  514)
* diffuse:                               Three-Dimensional Plots.
                                                             (line  846)
* dims:                                  Matrices and Arrays in Oct-Files.
                                                             (line   95)
* dir:                                   FTP Objects.        (line   77)
* dir <1>:                               Current Working Directory.
                                                             (line   72)
* dir <2>:                               Current Working Directory.
                                                             (line   73)
* dir <3>:                               Current Working Directory.
                                                             (line   74)
* dir_encoding:                          Manipulating the Load Path.
                                                             (line  212)
* dir_encoding <1>:                      Manipulating the Load Path.
                                                             (line  213)
* dir_encoding <2>:                      Manipulating the Load Path.
                                                             (line  214)
* dir_in_loadpath:                       Manipulating the Load Path.
                                                             (line  191)
* dir_in_loadpath <1>:                   Manipulating the Load Path.
                                                             (line  192)
* discrete_cdf:                          Distributions.      (line   26)
* discrete_inv:                          Distributions.      (line   31)
* discrete_pdf:                          Distributions.      (line   21)
* discrete_rnd:                          Random Number Generation.
                                                             (line   27)
* discrete_rnd <1>:                      Random Number Generation.
                                                             (line   28)
* discrete_rnd <2>:                      Random Number Generation.
                                                             (line   29)
* discrete_rnd <3>:                      Random Number Generation.
                                                             (line   30)
* disp:                                  Terminal Output.    (line   21)
* disp <1>:                              Terminal Output.    (line   22)
* display:                               Inheritance and Aggregation.
                                                             (line   87)
* divergence:                            Utility Functions.  (line  302)
* divergence <1>:                        Utility Functions.  (line  303)
* divergence <2>:                        Utility Functions.  (line  304)
* divergence <3>:                        Utility Functions.  (line  305)
* dlmread:                               Simple File I/O.    (line  434)
* dlmread <1>:                           Simple File I/O.    (line  435)
* dlmread <2>:                           Simple File I/O.    (line  436)
* dlmread <3>:                           Simple File I/O.    (line  437)
* dlmread <4>:                           Simple File I/O.    (line  438)
* dlmwrite:                              Simple File I/O.    (line  380)
* dlmwrite <1>:                          Simple File I/O.    (line  381)
* dlmwrite <2>:                          Simple File I/O.    (line  382)
* dlmwrite <3>:                          Simple File I/O.    (line  383)
* dlmwrite <4>:                          Simple File I/O.    (line  384)
* dmperm:                                Mathematical Considerations.
                                                             (line  366)
* dmperm <1>:                            Mathematical Considerations.
                                                             (line  367)
* doc:                                   Getting Help.       (line   41)
* doc <1>:                               Getting Help.       (line   42)
* doc_cache_create:                      Getting Help.       (line  252)
* doc_cache_create <1>:                  Getting Help.       (line  253)
* doc_cache_create <2>:                  Getting Help.       (line  254)
* doc_cache_file:                        Getting Help.       (line  192)
* doc_cache_file <1>:                    Getting Help.       (line  193)
* doc_cache_file <2>:                    Getting Help.       (line  194)
* dos:                                   Controlling Subprocesses.
                                                             (line   79)
* dos <1>:                               Controlling Subprocesses.
                                                             (line   80)
* dos <2>:                               Controlling Subprocesses.
                                                             (line   81)
* dos <3>:                               Controlling Subprocesses.
                                                             (line   82)
* dot:                                   Utility Functions.  (line  264)
* double:                                Numeric Data Types. (line   59)
* do_string_escapes:                     Common String Operations.
                                                             (line  103)
* drawnow:                               Manipulation of Plot Windows.
                                                             (line   10)
* drawnow <1>:                           Manipulation of Plot Windows.
                                                             (line   11)
* drawnow <2>:                           Manipulation of Plot Windows.
                                                             (line   12)
* dsearch:                               Identifying Points in Triangulation.
                                                             (line  104)
* dsearch <1>:                           Identifying Points in Triangulation.
                                                             (line  105)
* dsearchn:                              Identifying Points in Triangulation.
                                                             (line  113)
* dsearchn <1>:                          Identifying Points in Triangulation.
                                                             (line  114)
* dsearchn <2>:                          Identifying Points in Triangulation.
                                                             (line  115)
* dsearchn <3>:                          Identifying Points in Triangulation.
                                                             (line  116)
* dup2:                                  Controlling Subprocesses.
                                                             (line  308)
* duplication_matrix:                    Special Functions.  (line  394)
* durbinlevinson:                        Signal Processing.  (line  532)
* e:                                     Mathematical Constants.
                                                             (line    6)
* e <1>:                                 Mathematical Constants.
                                                             (line    7)
* e <2>:                                 Mathematical Constants.
                                                             (line    8)
* e <3>:                                 Mathematical Constants.
                                                             (line    9)
* e <4>:                                 Mathematical Constants.
                                                             (line   10)
* echo:                                  Diary and Echo Commands.
                                                             (line   44)
* echo <1>:                              Diary and Echo Commands.
                                                             (line   45)
* echo <2>:                              Diary and Echo Commands.
                                                             (line   46)
* echo <3>:                              Diary and Echo Commands.
                                                             (line   47)
* echo <4>:                              Diary and Echo Commands.
                                                             (line   48)
* echo <5>:                              Diary and Echo Commands.
                                                             (line   49)
* echo <6>:                              Diary and Echo Commands.
                                                             (line   50)
* edit:                                  Function Files.     (line   51)
* edit <1>:                              Function Files.     (line   52)
* edit <2>:                              Function Files.     (line   53)
* edit <3>:                              Function Files.     (line   54)
* EDITOR:                                Commands for History.
                                                             (line  278)
* EDITOR <1>:                            Commands for History.
                                                             (line  279)
* EDITOR <2>:                            Commands for History.
                                                             (line  280)
* edit_history:                          Commands for History.
                                                             (line   90)
* edit_history <1>:                      Commands for History.
                                                             (line   91)
* edit_history <2>:                      Commands for History.
                                                             (line   92)
* eig:                                   Basic Matrix Functions.
                                                             (line  128)
* eig <1>:                               Basic Matrix Functions.
                                                             (line  129)
* eig <2>:                               Basic Matrix Functions.
                                                             (line  130)
* eig <3>:                               Basic Matrix Functions.
                                                             (line  131)
* eig <4>:                               Basic Matrix Functions.
                                                             (line  132)
* eig <5>:                               Basic Matrix Functions.
                                                             (line  133)
* eig <6>:                               Basic Matrix Functions.
                                                             (line  134)
* eig <7>:                               Basic Matrix Functions.
                                                             (line  135)
* eig <8>:                               Basic Matrix Functions.
                                                             (line  136)
* eigs:                                  Sparse Linear Algebra.
                                                             (line  426)
* eigs <1>:                              Sparse Linear Algebra.
                                                             (line  427)
* eigs <2>:                              Sparse Linear Algebra.
                                                             (line  428)
* eigs <3>:                              Sparse Linear Algebra.
                                                             (line  429)
* eigs <4>:                              Sparse Linear Algebra.
                                                             (line  430)
* eigs <5>:                              Sparse Linear Algebra.
                                                             (line  431)
* eigs <6>:                              Sparse Linear Algebra.
                                                             (line  432)
* eigs <7>:                              Sparse Linear Algebra.
                                                             (line  433)
* eigs <8>:                              Sparse Linear Algebra.
                                                             (line  434)
* eigs <9>:                              Sparse Linear Algebra.
                                                             (line  435)
* eigs <10>:                             Sparse Linear Algebra.
                                                             (line  436)
* eigs <11>:                             Sparse Linear Algebra.
                                                             (line  437)
* eigs <12>:                             Sparse Linear Algebra.
                                                             (line  438)
* eigs <13>:                             Sparse Linear Algebra.
                                                             (line  439)
* eigs <14>:                             Sparse Linear Algebra.
                                                             (line  440)
* eigs <15>:                             Sparse Linear Algebra.
                                                             (line  441)
* eigs <16>:                             Sparse Linear Algebra.
                                                             (line  442)
* eigs <17>:                             Sparse Linear Algebra.
                                                             (line  443)
* elem:                                  Matrices and Arrays in Oct-Files.
                                                             (line   77)
* ellipj:                                Special Functions.  (line  413)
* ellipj <1>:                            Special Functions.  (line  414)
* ellipke:                               Special Functions.  (line  444)
* ellipke <1>:                           Special Functions.  (line  445)
* ellipke <2>:                           Special Functions.  (line  446)
* ellipsoid:                             Three-dimensional Geometric Shapes.
                                                             (line   62)
* ellipsoid <1>:                         Three-dimensional Geometric Shapes.
                                                             (line   63)
* ellipsoid <2>:                         Three-dimensional Geometric Shapes.
                                                             (line   64)
* ellipsoid <3>:                         Three-dimensional Geometric Shapes.
                                                             (line   65)
* empirical_cdf:                         Distributions.      (line   41)
* empirical_inv:                         Distributions.      (line   46)
* empirical_pdf:                         Distributions.      (line   36)
* empirical_rnd:                         Random Number Generation.
                                                             (line   44)
* empirical_rnd <1>:                     Random Number Generation.
                                                             (line   45)
* empirical_rnd <2>:                     Random Number Generation.
                                                             (line   46)
* empirical_rnd <3>:                     Random Number Generation.
                                                             (line   47)
* endgrent:                              Group Database Functions.
                                                             (line   56)
* endpwent:                              Password Database Functions.
                                                             (line   67)
* endsWith:                              Searching in Strings.
                                                             (line  142)
* endsWith <1>:                          Searching in Strings.
                                                             (line  143)
* eomday:                                Timing Utilities.   (line  766)
* eps:                                   Mathematical Constants.
                                                             (line  150)
* eps <1>:                               Mathematical Constants.
                                                             (line  151)
* eps <2>:                               Mathematical Constants.
                                                             (line  152)
* eps <3>:                               Mathematical Constants.
                                                             (line  153)
* eps <4>:                               Mathematical Constants.
                                                             (line  154)
* eq:                                    Comparison Ops.     (line   53)
* erase:                                 Searching and Replacing in Strings.
                                                             (line   27)
* erf:                                   Special Functions.  (line  482)
* erfc:                                  Special Functions.  (line  497)
* erfcinv:                               Special Functions.  (line  539)
* erfcx:                                 Special Functions.  (line  506)
* erfi:                                  Special Functions.  (line  517)
* erfinv:                                Special Functions.  (line  528)
* errno:                                 Catching Errors.    (line  183)
* errno <1>:                             Catching Errors.    (line  184)
* errno <2>:                             Catching Errors.    (line  185)
* errno_list:                            Catching Errors.    (line  200)
* error:                                 Raising Errors.     (line   29)
* error <1>:                             Raising Errors.     (line   30)
* errorbar:                              Two-Dimensional Plots.
                                                             (line 1104)
* errorbar <1>:                          Two-Dimensional Plots.
                                                             (line 1105)
* errorbar <2>:                          Two-Dimensional Plots.
                                                             (line 1106)
* errorbar <3>:                          Two-Dimensional Plots.
                                                             (line 1107)
* errorbar <4>:                          Two-Dimensional Plots.
                                                             (line 1108)
* errorbar <5>:                          Two-Dimensional Plots.
                                                             (line 1109)
* errorbar <6>:                          Two-Dimensional Plots.
                                                             (line 1110)
* errorbar <7>:                          Two-Dimensional Plots.
                                                             (line 1111)
* errorbar <8>:                          Two-Dimensional Plots.
                                                             (line 1112)
* errorbar <9>:                          Two-Dimensional Plots.
                                                             (line 1113)
* errordlg:                              I/O Dialogs.        (line  127)
* errordlg <1>:                          I/O Dialogs.        (line  128)
* errordlg <2>:                          I/O Dialogs.        (line  129)
* errordlg <3>:                          I/O Dialogs.        (line  130)
* errordlg <4>:                          I/O Dialogs.        (line  131)
* etime:                                 Timing Utilities.   (line  378)
* etree:                                 Information.        (line  141)
* etree <1>:                             Information.        (line  142)
* etree <2>:                             Information.        (line  143)
* etreeplot:                             Information.        (line  156)
* etreeplot <1>:                         Information.        (line  157)
* eval:                                  Evaluation.         (line   14)
* eval <1>:                              Evaluation.         (line   15)
* evalc:                                 Evaluation.         (line   50)
* evalc <1>:                             Evaluation.         (line   51)
* evalin:                                Evaluation in a Different Context.
                                                             (line   68)
* evalin <1>:                            Evaluation in a Different Context.
                                                             (line   69)
* example:                               Demonstration Functions.
                                                             (line   70)
* example <1>:                           Demonstration Functions.
                                                             (line   71)
* example <2>:                           Demonstration Functions.
                                                             (line   72)
* example <3>:                           Demonstration Functions.
                                                             (line   73)
* example <4>:                           Demonstration Functions.
                                                             (line   74)
* exec:                                  Controlling Subprocesses.
                                                             (line  284)
* EXEC_PATH:                             Controlling Subprocesses.
                                                             (line  241)
* EXEC_PATH <1>:                         Controlling Subprocesses.
                                                             (line  242)
* EXEC_PATH <2>:                         Controlling Subprocesses.
                                                             (line  243)
* exist:                                 Status of Variables.
                                                             (line  182)
* exist <1>:                             Status of Variables.
                                                             (line  183)
* exp:                                   Exponents and Logarithms.
                                                             (line    6)
* expint:                                Special Functions.  (line  550)
* expm:                                  Functions of a Matrix.
                                                             (line    6)
* expm1:                                 Exponents and Logarithms.
                                                             (line   13)
* eye:                                   Special Utility Matrices.
                                                             (line    6)
* eye <1>:                               Special Utility Matrices.
                                                             (line    7)
* eye <2>:                               Special Utility Matrices.
                                                             (line    8)
* eye <3>:                               Special Utility Matrices.
                                                             (line    9)
* ezcontour:                             Two-dimensional Function Plotting.
                                                             (line  132)
* ezcontour <1>:                         Two-dimensional Function Plotting.
                                                             (line  133)
* ezcontour <2>:                         Two-dimensional Function Plotting.
                                                             (line  134)
* ezcontour <3>:                         Two-dimensional Function Plotting.
                                                             (line  135)
* ezcontour <4>:                         Two-dimensional Function Plotting.
                                                             (line  136)
* ezcontourf:                            Two-dimensional Function Plotting.
                                                             (line  167)
* ezcontourf <1>:                        Two-dimensional Function Plotting.
                                                             (line  168)
* ezcontourf <2>:                        Two-dimensional Function Plotting.
                                                             (line  169)
* ezcontourf <3>:                        Two-dimensional Function Plotting.
                                                             (line  170)
* ezcontourf <4>:                        Two-dimensional Function Plotting.
                                                             (line  171)
* ezmesh:                                Three-dimensional Function Plotting.
                                                             (line   43)
* ezmesh <1>:                            Three-dimensional Function Plotting.
                                                             (line   44)
* ezmesh <2>:                            Three-dimensional Function Plotting.
                                                             (line   45)
* ezmesh <3>:                            Three-dimensional Function Plotting.
                                                             (line   46)
* ezmesh <4>:                            Three-dimensional Function Plotting.
                                                             (line   47)
* ezmesh <5>:                            Three-dimensional Function Plotting.
                                                             (line   48)
* ezmesh <6>:                            Three-dimensional Function Plotting.
                                                             (line   49)
* ezmeshc:                               Three-dimensional Function Plotting.
                                                             (line   93)
* ezmeshc <1>:                           Three-dimensional Function Plotting.
                                                             (line   94)
* ezmeshc <2>:                           Three-dimensional Function Plotting.
                                                             (line   95)
* ezmeshc <3>:                           Three-dimensional Function Plotting.
                                                             (line   96)
* ezmeshc <4>:                           Three-dimensional Function Plotting.
                                                             (line   97)
* ezmeshc <5>:                           Three-dimensional Function Plotting.
                                                             (line   98)
* ezmeshc <6>:                           Three-dimensional Function Plotting.
                                                             (line   99)
* ezplot:                                Two-dimensional Function Plotting.
                                                             (line   82)
* ezplot <1>:                            Two-dimensional Function Plotting.
                                                             (line   83)
* ezplot <2>:                            Two-dimensional Function Plotting.
                                                             (line   84)
* ezplot <3>:                            Two-dimensional Function Plotting.
                                                             (line   85)
* ezplot <4>:                            Two-dimensional Function Plotting.
                                                             (line   86)
* ezplot <5>:                            Two-dimensional Function Plotting.
                                                             (line   87)
* ezplot <6>:                            Two-dimensional Function Plotting.
                                                             (line   88)
* ezplot3:                               Three-dimensional Function Plotting.
                                                             (line    6)
* ezplot3 <1>:                           Three-dimensional Function Plotting.
                                                             (line    7)
* ezplot3 <2>:                           Three-dimensional Function Plotting.
                                                             (line    8)
* ezplot3 <3>:                           Three-dimensional Function Plotting.
                                                             (line    9)
* ezplot3 <4>:                           Three-dimensional Function Plotting.
                                                             (line   10)
* ezplot3 <5>:                           Three-dimensional Function Plotting.
                                                             (line   11)
* ezpolar:                               Two-dimensional Function Plotting.
                                                             (line  202)
* ezpolar <1>:                           Two-dimensional Function Plotting.
                                                             (line  203)
* ezpolar <2>:                           Two-dimensional Function Plotting.
                                                             (line  204)
* ezpolar <3>:                           Two-dimensional Function Plotting.
                                                             (line  205)
* ezpolar <4>:                           Two-dimensional Function Plotting.
                                                             (line  206)
* ezsurf:                                Three-dimensional Function Plotting.
                                                             (line  137)
* ezsurf <1>:                            Three-dimensional Function Plotting.
                                                             (line  138)
* ezsurf <2>:                            Three-dimensional Function Plotting.
                                                             (line  139)
* ezsurf <3>:                            Three-dimensional Function Plotting.
                                                             (line  140)
* ezsurf <4>:                            Three-dimensional Function Plotting.
                                                             (line  141)
* ezsurf <5>:                            Three-dimensional Function Plotting.
                                                             (line  142)
* ezsurf <6>:                            Three-dimensional Function Plotting.
                                                             (line  143)
* ezsurfc:                               Three-dimensional Function Plotting.
                                                             (line  187)
* ezsurfc <1>:                           Three-dimensional Function Plotting.
                                                             (line  188)
* ezsurfc <2>:                           Three-dimensional Function Plotting.
                                                             (line  189)
* ezsurfc <3>:                           Three-dimensional Function Plotting.
                                                             (line  190)
* ezsurfc <4>:                           Three-dimensional Function Plotting.
                                                             (line  191)
* ezsurfc <5>:                           Three-dimensional Function Plotting.
                                                             (line  192)
* ezsurfc <6>:                           Three-dimensional Function Plotting.
                                                             (line  193)
* factor:                                Utility Functions.  (line  394)
* factor <1>:                            Utility Functions.  (line  395)
* factorial:                             Utility Functions.  (line  379)
* fail:                                  Test Functions.     (line  468)
* fail <1>:                              Test Functions.     (line  469)
* fail <2>:                              Test Functions.     (line  470)
* fail <3>:                              Test Functions.     (line  471)
* false:                                 Logical Values.     (line   67)
* false <1>:                             Logical Values.     (line   68)
* false <2>:                             Logical Values.     (line   69)
* false <3>:                             Logical Values.     (line   70)
* fclear:                                EOF and Errors.     (line   56)
* fclose:                                Opening and Closing Files.
                                                             (line  128)
* fclose <1>:                            Opening and Closing Files.
                                                             (line  129)
* fclose <2>:                            Opening and Closing Files.
                                                             (line  130)
* fcntl:                                 Controlling Subprocesses.
                                                             (line  490)
* fcntl <1>:                             Controlling Subprocesses.
                                                             (line  491)
* fdisp:                                 Simple File I/O.    (line  363)
* feather:                               Two-Dimensional Plots.
                                                             (line 1801)
* feather <1>:                           Two-Dimensional Plots.
                                                             (line 1802)
* feather <2>:                           Two-Dimensional Plots.
                                                             (line 1803)
* feather <3>:                           Two-Dimensional Plots.
                                                             (line 1804)
* feather <4>:                           Two-Dimensional Plots.
                                                             (line 1805)
* feof:                                  EOF and Errors.     (line   24)
* ferror:                                EOF and Errors.     (line   35)
* ferror <1>:                            EOF and Errors.     (line   36)
* ferror <2>:                            EOF and Errors.     (line   37)
* feval:                                 Calling a Function by its Name.
                                                             (line   50)
* fflush:                                Paging Screen Output.
                                                             (line  114)
* fft:                                   Signal Processing.  (line   10)
* fft <1>:                               Signal Processing.  (line   11)
* fft <2>:                               Signal Processing.  (line   12)
* fft2:                                  Signal Processing.  (line   57)
* fft2 <1>:                              Signal Processing.  (line   58)
* fftconv:                               Signal Processing.  (line  216)
* fftconv <1>:                           Signal Processing.  (line  217)
* fftfilt:                               Signal Processing.  (line  231)
* fftfilt <1>:                           Signal Processing.  (line  232)
* fftn:                                  Signal Processing.  (line   87)
* fftn <1>:                              Signal Processing.  (line   88)
* fftshift:                              Signal Processing.  (line  542)
* fftshift <1>:                          Signal Processing.  (line  543)
* fftw:                                  Signal Processing.  (line  129)
* fftw <1>:                              Signal Processing.  (line  130)
* fftw <2>:                              Signal Processing.  (line  131)
* fftw <3>:                              Signal Processing.  (line  132)
* fftw <4>:                              Signal Processing.  (line  133)
* fftw <5>:                              Signal Processing.  (line  134)
* fgetl:                                 Line-Oriented Input.
                                                             (line   18)
* fgetl <1>:                             Line-Oriented Input.
                                                             (line   19)
* fgets:                                 Line-Oriented Input.
                                                             (line   36)
* fgets <1>:                             Line-Oriented Input.
                                                             (line   37)
* fieldnames:                            Manipulating Structures.
                                                             (line   14)
* fieldnames <1>:                        Manipulating Structures.
                                                             (line   15)
* fieldnames <2>:                        Manipulating Structures.
                                                             (line   16)
* fieldnames <3>:                        Manipulating Structures.
                                                             (line   17)
* figure:                                Multiple Plot Windows.
                                                             (line   17)
* figure <1>:                            Multiple Plot Windows.
                                                             (line   18)
* figure <2>:                            Multiple Plot Windows.
                                                             (line   19)
* figure <3>:                            Multiple Plot Windows.
                                                             (line   20)
* figure <4>:                            Multiple Plot Windows.
                                                             (line   21)
* fileattrib:                            Filesystem Utilities.
                                                             (line  337)
* fileattrib <1>:                        Filesystem Utilities.
                                                             (line  338)
* fileattrib <2>:                        Filesystem Utilities.
                                                             (line  339)
* fileattrib <3>:                        Filesystem Utilities.
                                                             (line  340)
* filebrowser:                           Octave Workspace Windows.
                                                             (line   23)
* fileparts:                             Filesystem Utilities.
                                                             (line  532)
* fileread:                              Simple File I/O.    (line  340)
* filesep:                               Filesystem Utilities.
                                                             (line  520)
* filesep <1>:                           Filesystem Utilities.
                                                             (line  521)
* file_in_loadpath:                      Manipulating the Load Path.
                                                             (line  152)
* file_in_loadpath <1>:                  Manipulating the Load Path.
                                                             (line  153)
* file_in_path:                          Filesystem Utilities.
                                                             (line  498)
* file_in_path <1>:                      Filesystem Utilities.
                                                             (line  499)
* fill:                                  Two-Dimensional Plots.
                                                             (line 1903)
* fill <1>:                              Two-Dimensional Plots.
                                                             (line 1904)
* fill <2>:                              Two-Dimensional Plots.
                                                             (line 1905)
* fill <3>:                              Two-Dimensional Plots.
                                                             (line 1906)
* fill <4>:                              Two-Dimensional Plots.
                                                             (line 1907)
* fill3:                                 Two-Dimensional Plots.
                                                             (line 1948)
* fill3 <1>:                             Two-Dimensional Plots.
                                                             (line 1949)
* fill3 <2>:                             Two-Dimensional Plots.
                                                             (line 1950)
* fill3 <3>:                             Two-Dimensional Plots.
                                                             (line 1951)
* fill3 <4>:                             Two-Dimensional Plots.
                                                             (line 1952)
* filter:                                Signal Processing.  (line  246)
* filter <1>:                            Signal Processing.  (line  247)
* filter <2>:                            Signal Processing.  (line  248)
* filter <3>:                            Signal Processing.  (line  249)
* filter2:                               Signal Processing.  (line  292)
* filter2 <1>:                           Signal Processing.  (line  293)
* find:                                  Finding Elements and Checking Conditions.
                                                             (line  163)
* find <1>:                              Finding Elements and Checking Conditions.
                                                             (line  164)
* find <2>:                              Finding Elements and Checking Conditions.
                                                             (line  165)
* find <3>:                              Finding Elements and Checking Conditions.
                                                             (line  166)
* find <4>:                              Finding Elements and Checking Conditions.
                                                             (line  167)
* findall:                               Searching Properties.
                                                             (line   68)
* findall <1>:                           Searching Properties.
                                                             (line   69)
* findall <2>:                           Searching Properties.
                                                             (line   70)
* findall <3>:                           Searching Properties.
                                                             (line   72)
* findall <4>:                           Searching Properties.
                                                             (line   73)
* findall <5>:                           Searching Properties.
                                                             (line   74)
* findall <6>:                           Searching Properties.
                                                             (line   75)
* findall <7>:                           Searching Properties.
                                                             (line   76)
* findfigs:                              Graphics Objects.   (line  597)
* findobj:                               Searching Properties.
                                                             (line    6)
* findobj <1>:                           Searching Properties.
                                                             (line    7)
* findobj <2>:                           Searching Properties.
                                                             (line    8)
* findobj <3>:                           Searching Properties.
                                                             (line   10)
* findobj <4>:                           Searching Properties.
                                                             (line   11)
* findobj <5>:                           Searching Properties.
                                                             (line   12)
* findobj <6>:                           Searching Properties.
                                                             (line   13)
* findobj <7>:                           Searching Properties.
                                                             (line   14)
* findstr:                               Searching in Strings.
                                                             (line  183)
* findstr <1>:                           Searching in Strings.
                                                             (line  184)
* fix:                                   Utility Functions.  (line   19)
* fixed_point_format:                    Matrices.           (line  193)
* fixed_point_format <1>:                Matrices.           (line  194)
* fixed_point_format <2>:                Matrices.           (line  195)
* flag:                                  Representing Images.
                                                             (line  421)
* flag <1>:                              Representing Images.
                                                             (line  422)
* flintmax:                              Integer Data Types. (line  184)
* flintmax <1>:                          Integer Data Types. (line  185)
* flintmax <2>:                          Integer Data Types. (line  186)
* flintmax <3>:                          Integer Data Types. (line  187)
* flip:                                  Rearranging Matrices.
                                                             (line   34)
* flip <1>:                              Rearranging Matrices.
                                                             (line   35)
* fliplr:                                Rearranging Matrices.
                                                             (line    6)
* flipud:                                Rearranging Matrices.
                                                             (line   20)
* floor:                                 Utility Functions.  (line   31)
* fminbnd:                               Minimizers.         (line   19)
* fminbnd <1>:                           Minimizers.         (line   20)
* fminbnd <2>:                           Minimizers.         (line   21)
* fminsearch:                            Minimizers.         (line  164)
* fminsearch <1>:                        Minimizers.         (line  165)
* fminsearch <2>:                        Minimizers.         (line  166)
* fminsearch <3>:                        Minimizers.         (line  167)
* fminunc:                               Minimizers.         (line   73)
* fminunc <1>:                           Minimizers.         (line   74)
* fminunc <2>:                           Minimizers.         (line   75)
* foo:                                   A Sample Function Description.
                                                             (line   20)
* foo <1>:                               A Sample Function Description.
                                                             (line   21)
* foo <2>:                               A Sample Function Description.
                                                             (line   22)
* fopen:                                 Opening and Closing Files.
                                                             (line   19)
* fopen <1>:                             Opening and Closing Files.
                                                             (line   20)
* fopen <2>:                             Opening and Closing Files.
                                                             (line   21)
* fopen <3>:                             Opening and Closing Files.
                                                             (line   22)
* fopen <4>:                             Opening and Closing Files.
                                                             (line   23)
* fopen <5>:                             Opening and Closing Files.
                                                             (line   24)
* fopen <6>:                             Opening and Closing Files.
                                                             (line   25)
* fork:                                  Controlling Subprocesses.
                                                             (line  264)
* format:                                Terminal Output.    (line   79)
* format <1>:                            Terminal Output.    (line   80)
* format <2>:                            Terminal Output.    (line   81)
* fortran_vec:                           Matrices and Arrays in Oct-Files.
                                                             (line  109)
* fplot:                                 Two-dimensional Function Plotting.
                                                             (line   17)
* fplot <1>:                             Two-dimensional Function Plotting.
                                                             (line   18)
* fplot <2>:                             Two-dimensional Function Plotting.
                                                             (line   19)
* fplot <3>:                             Two-dimensional Function Plotting.
                                                             (line   20)
* fplot <4>:                             Two-dimensional Function Plotting.
                                                             (line   21)
* fplot <5>:                             Two-dimensional Function Plotting.
                                                             (line   22)
* fplot <6>:                             Two-dimensional Function Plotting.
                                                             (line   23)
* fplot <7>:                             Two-dimensional Function Plotting.
                                                             (line   24)
* fprintf:                               Formatted Output.   (line   33)
* fprintf <1>:                           Formatted Output.   (line   34)
* fprintf <2>:                           Formatted Output.   (line   35)
* fputs:                                 Simple Output.      (line   16)
* fputs <1>:                             Simple Output.      (line   17)
* fractdiff:                             Signal Processing.  (line  572)
* frame2im:                              Representing Images.
                                                             (line  199)
* fread:                                 Binary I/O.         (line   12)
* fread <1>:                             Binary I/O.         (line   13)
* fread <2>:                             Binary I/O.         (line   14)
* fread <3>:                             Binary I/O.         (line   15)
* fread <4>:                             Binary I/O.         (line   16)
* fread <5>:                             Binary I/O.         (line   17)
* freport:                               EOF and Errors.     (line   62)
* freqz:                                 Signal Processing.  (line  313)
* freqz <1>:                             Signal Processing.  (line  314)
* freqz <2>:                             Signal Processing.  (line  315)
* freqz <3>:                             Signal Processing.  (line  316)
* freqz <4>:                             Signal Processing.  (line  317)
* freqz <5>:                             Signal Processing.  (line  318)
* freqz <6>:                             Signal Processing.  (line  319)
* freqz_plot:                            Signal Processing.  (line  358)
* freqz_plot <1>:                        Signal Processing.  (line  359)
* frewind:                               File Positioning.   (line   56)
* frewind <1>:                           File Positioning.   (line   57)
* fscanf:                                Formatted Input.    (line   11)
* fscanf <1>:                            Formatted Input.    (line   12)
* fseek:                                 File Positioning.   (line   16)
* fseek <1>:                             File Positioning.   (line   17)
* fseek <2>:                             File Positioning.   (line   18)
* fskipl:                                Line-Oriented Input.
                                                             (line   54)
* fskipl <1>:                            Line-Oriented Input.
                                                             (line   55)
* fskipl <2>:                            Line-Oriented Input.
                                                             (line   56)
* fsolve:                                Solvers.            (line   15)
* fsolve <1>:                            Solvers.            (line   16)
* fsolve <2>:                            Solvers.            (line   17)
* ftell:                                 File Positioning.   (line    9)
* ftp:                                   FTP Objects.        (line   10)
* ftp <1>:                               FTP Objects.        (line   11)
* full:                                  Creating Sparse Matrices.
                                                             (line  212)
* fullfile:                              Filesystem Utilities.
                                                             (line  541)
* func2str:                              Function Handles.   (line   87)
* functions:                             Function Handles.   (line   42)
* fwrite:                                Binary I/O.         (line  159)
* fwrite <1>:                            Binary I/O.         (line  160)
* fwrite <2>:                            Binary I/O.         (line  161)
* fwrite <3>:                            Binary I/O.         (line  162)
* fwrite <4>:                            Binary I/O.         (line  163)
* fzero:                                 Solvers.            (line  218)
* fzero <1>:                             Solvers.            (line  219)
* fzero <2>:                             Solvers.            (line  220)
* gallery:                               Famous Matrices.    (line    8)
* gallery <1>:                           Famous Matrices.    (line    9)
* gallery <2>:                           Famous Matrices.    (line   12)
* gallery <3>:                           Famous Matrices.    (line   13)
* gallery <4>:                           Famous Matrices.    (line   16)
* gallery <5>:                           Famous Matrices.    (line   17)
* gallery <6>:                           Famous Matrices.    (line   20)
* gallery <7>:                           Famous Matrices.    (line   21)
* gallery <8>:                           Famous Matrices.    (line   24)
* gallery <9>:                           Famous Matrices.    (line   25)
* gallery <10>:                          Famous Matrices.    (line   26)
* gallery <11>:                          Famous Matrices.    (line   29)
* gallery <12>:                          Famous Matrices.    (line   32)
* gallery <13>:                          Famous Matrices.    (line   33)
* gallery <14>:                          Famous Matrices.    (line   36)
* gallery <15>:                          Famous Matrices.    (line   37)
* gallery <16>:                          Famous Matrices.    (line   40)
* gallery <17>:                          Famous Matrices.    (line   41)
* gallery <18>:                          Famous Matrices.    (line   42)
* gallery <19>:                          Famous Matrices.    (line   45)
* gallery <20>:                          Famous Matrices.    (line   46)
* gallery <21>:                          Famous Matrices.    (line   47)
* gallery <22>:                          Famous Matrices.    (line   50)
* gallery <23>:                          Famous Matrices.    (line   51)
* gallery <24>:                          Famous Matrices.    (line   52)
* gallery <25>:                          Famous Matrices.    (line   55)
* gallery <26>:                          Famous Matrices.    (line   56)
* gallery <27>:                          Famous Matrices.    (line   59)
* gallery <28>:                          Famous Matrices.    (line   62)
* gallery <29>:                          Famous Matrices.    (line   63)
* gallery <30>:                          Famous Matrices.    (line   64)
* gallery <31>:                          Famous Matrices.    (line   67)
* gallery <32>:                          Famous Matrices.    (line   68)
* gallery <33>:                          Famous Matrices.    (line   71)
* gallery <34>:                          Famous Matrices.    (line   78)
* gallery <35>:                          Famous Matrices.    (line   79)
* gallery <36>:                          Famous Matrices.    (line   80)
* gallery <37>:                          Famous Matrices.    (line   83)
* gallery <38>:                          Famous Matrices.    (line   84)
* gallery <39>:                          Famous Matrices.    (line   87)
* gallery <40>:                          Famous Matrices.    (line   88)
* gallery <41>:                          Famous Matrices.    (line   92)
* gallery <42>:                          Famous Matrices.    (line   93)
* gallery <43>:                          Famous Matrices.    (line   96)
* gallery <44>:                          Famous Matrices.    (line   97)
* gallery <45>:                          Famous Matrices.    (line   98)
* gallery <46>:                          Famous Matrices.    (line   99)
* gallery <47>:                          Famous Matrices.    (line  100)
* gallery <48>:                          Famous Matrices.    (line  117)
* gallery <49>:                          Famous Matrices.    (line  118)
* gallery <50>:                          Famous Matrices.    (line  121)
* gallery <51>:                          Famous Matrices.    (line  124)
* gallery <52>:                          Famous Matrices.    (line  125)
* gallery <53>:                          Famous Matrices.    (line  128)
* gallery <54>:                          Famous Matrices.    (line  129)
* gallery <55>:                          Famous Matrices.    (line  132)
* gallery <56>:                          Famous Matrices.    (line  133)
* gallery <57>:                          Famous Matrices.    (line  134)
* gallery <58>:                          Famous Matrices.    (line  137)
* gallery <59>:                          Famous Matrices.    (line  138)
* gallery <60>:                          Famous Matrices.    (line  141)
* gallery <61>:                          Famous Matrices.    (line  142)
* gallery <62>:                          Famous Matrices.    (line  143)
* gallery <63>:                          Famous Matrices.    (line  146)
* gallery <64>:                          Famous Matrices.    (line  147)
* gallery <65>:                          Famous Matrices.    (line  150)
* gallery <66>:                          Famous Matrices.    (line  153)
* gallery <67>:                          Famous Matrices.    (line  156)
* gallery <68>:                          Famous Matrices.    (line  159)
* gallery <69>:                          Famous Matrices.    (line  162)
* gallery <70>:                          Famous Matrices.    (line  163)
* gallery <71>:                          Famous Matrices.    (line  166)
* gallery <72>:                          Famous Matrices.    (line  170)
* gallery <73>:                          Famous Matrices.    (line  171)
* gallery <74>:                          Famous Matrices.    (line  172)
* gallery <75>:                          Famous Matrices.    (line  188)
* gallery <76>:                          Famous Matrices.    (line  189)
* gallery <77>:                          Famous Matrices.    (line  192)
* gallery <78>:                          Famous Matrices.    (line  196)
* gallery <79>:                          Famous Matrices.    (line  197)
* gallery <80>:                          Famous Matrices.    (line  200)
* gallery <81>:                          Famous Matrices.    (line  203)
* gallery <82>:                          Famous Matrices.    (line  204)
* gallery <83>:                          Famous Matrices.    (line  208)
* gallery <84>:                          Famous Matrices.    (line  211)
* gallery <85>:                          Famous Matrices.    (line  212)
* gallery <86>:                          Famous Matrices.    (line  215)
* gallery <87>:                          Famous Matrices.    (line  216)
* gallery <88>:                          Famous Matrices.    (line  217)
* gallery <89>:                          Famous Matrices.    (line  218)
* gallery <90>:                          Famous Matrices.    (line  219)
* gallery <91>:                          Famous Matrices.    (line  222)
* gallery <92>:                          Famous Matrices.    (line  226)
* gallery <93>:                          Famous Matrices.    (line  229)
* gallery <94>:                          Famous Matrices.    (line  232)
* gallery <95>:                          Famous Matrices.    (line  233)
* gallery <96>:                          Famous Matrices.    (line  236)
* gallery <97>:                          Famous Matrices.    (line  237)
* gallery <98>:                          Famous Matrices.    (line  238)
* gallery <99>:                          Famous Matrices.    (line  239)
* gallery <100>:                         Famous Matrices.    (line  242)
* gallery <101>:                         Famous Matrices.    (line  243)
* gallery <102>:                         Famous Matrices.    (line  244)
* gallery <103>:                         Famous Matrices.    (line  245)
* gallery <104>:                         Famous Matrices.    (line  246)
* gallery <105>:                         Famous Matrices.    (line  247)
* gallery <106>:                         Famous Matrices.    (line  250)
* gallery <107>:                         Famous Matrices.    (line  251)
* gallery <108>:                         Famous Matrices.    (line  252)
* gallery <109>:                         Famous Matrices.    (line  255)
* gallery <110>:                         Famous Matrices.    (line  256)
* gallery <111>:                         Famous Matrices.    (line  257)
* gallery <112>:                         Famous Matrices.    (line  261)
* gallery <113>:                         Famous Matrices.    (line  262)
* gallery <114>:                         Famous Matrices.    (line  263)
* gallery <115>:                         Famous Matrices.    (line  279)
* gallery <116>:                         Famous Matrices.    (line  280)
* gallery <117>:                         Famous Matrices.    (line  283)
* gamma:                                 Special Functions.  (line  589)
* gammainc:                              Special Functions.  (line  609)
* gammainc <1>:                          Special Functions.  (line  610)
* gammaincinv:                           Special Functions.  (line  655)
* gammaincinv <1>:                       Special Functions.  (line  656)
* gammaln:                               Special Functions.  (line  758)
* gca:                                   Graphics Objects.   (line  398)
* gcbf:                                  Callbacks.          (line  110)
* gcbo:                                  Callbacks.          (line   92)
* gcbo <1>:                              Callbacks.          (line   93)
* gcd:                                   Utility Functions.  (line  411)
* gcd <1>:                               Utility Functions.  (line  412)
* gcf:                                   Graphics Objects.   (line  370)
* gco:                                   Graphics Objects.   (line  424)
* gco <1>:                               Graphics Objects.   (line  425)
* ge:                                    Comparison Ops.     (line   62)
* genpath:                               Manipulating the Load Path.
                                                             (line   50)
* genpath <1>:                           Manipulating the Load Path.
                                                             (line   51)
* get:                                   Graphics Objects.   (line  497)
* get <1>:                               Graphics Objects.   (line  498)
* get <2>:                               Player Properties.  (line    9)
* get <3>:                               Player Properties.  (line   10)
* get <4>:                               Recorder Properties.
                                                             (line    9)
* get <5>:                               Recorder Properties.
                                                             (line   10)
* getappdata:                            Application-defined Data.
                                                             (line   29)
* getappdata <1>:                        Application-defined Data.
                                                             (line   30)
* getaudiodata:                          Data Retrieval.     (line    9)
* getaudiodata <1>:                      Data Retrieval.     (line   10)
* getegid:                               Process ID Information.
                                                             (line   29)
* getenv:                                Environment Variables.
                                                             (line    6)
* geteuid:                               Process ID Information.
                                                             (line   19)
* getfield:                              Manipulating Structures.
                                                             (line  121)
* getfield <1>:                          Manipulating Structures.
                                                             (line  122)
* getframe:                              Representing Images.
                                                             (line  140)
* getframe <1>:                          Representing Images.
                                                             (line  141)
* getframe <2>:                          Representing Images.
                                                             (line  142)
* getframe <3>:                          Representing Images.
                                                             (line  143)
* getgid:                                Process ID Information.
                                                             (line   34)
* getgrent:                              Group Database Functions.
                                                             (line   24)
* getgrgid:                              Group Database Functions.
                                                             (line   32)
* getgrnam:                              Group Database Functions.
                                                             (line   41)
* gethostname:                           Networking Utilities.
                                                             (line   12)
* getpgrp:                               Process ID Information.
                                                             (line    6)
* getpid:                                Process ID Information.
                                                             (line    9)
* getpixelposition:                      GUI Utility Functions.
                                                             (line   54)
* getpixelposition <1>:                  GUI Utility Functions.
                                                             (line   55)
* getplayer:                             Data Retrieval.     (line   18)
* getppid:                               Process ID Information.
                                                             (line   14)
* getpref:                               User-Defined Preferences.
                                                             (line    6)
* getpref <1>:                           User-Defined Preferences.
                                                             (line    7)
* getpref <2>:                           User-Defined Preferences.
                                                             (line    8)
* getpref <3>:                           User-Defined Preferences.
                                                             (line    9)
* getpref <4>:                           User-Defined Preferences.
                                                             (line   10)
* getpwent:                              Password Database Functions.
                                                             (line   33)
* getpwnam:                              Password Database Functions.
                                                             (line   51)
* getpwuid:                              Password Database Functions.
                                                             (line   42)
* getrusage:                             System Information. (line  446)
* getuid:                                Process ID Information.
                                                             (line   24)
* get_first_help_sentence:               Getting Help.       (line  289)
* get_first_help_sentence <1>:           Getting Help.       (line  290)
* get_first_help_sentence <2>:           Getting Help.       (line  291)
* get_help_text:                         Getting Help.       (line  270)
* get_help_text_from_file:               Getting Help.       (line  280)
* get_home_directory:                    Environment Variables.
                                                             (line   35)
* ginput:                                Interacting with Plots.
                                                             (line   10)
* ginput <1>:                            Interacting with Plots.
                                                             (line   11)
* givens:                                Basic Matrix Functions.
                                                             (line  180)
* givens <1>:                            Basic Matrix Functions.
                                                             (line  181)
* glob:                                  Filesystem Utilities.
                                                             (line  449)
* glpk:                                  Linear Programming. (line   15)
* gls:                                   Linear Least Squares.
                                                             (line   52)
* gmres:                                 Specialized Solvers.
                                                             (line  440)
* gmres <1>:                             Specialized Solvers.
                                                             (line  441)
* gmres <2>:                             Specialized Solvers.
                                                             (line  442)
* gmtime:                                Timing Utilities.   (line   92)
* gnuplot_binary:                        Customizing Toolkit Behavior.
                                                             (line   10)
* gnuplot_binary <1>:                    Customizing Toolkit Behavior.
                                                             (line   11)
* gnuplot_binary <2>:                    Customizing Toolkit Behavior.
                                                             (line   12)
* gplot:                                 Information.        (line  166)
* gplot <1>:                             Information.        (line  167)
* gplot <2>:                             Information.        (line  168)
* grabcode:                              Publish Octave Script Files.
                                                             (line  156)
* grabcode <1>:                          Publish Octave Script Files.
                                                             (line  157)
* grabcode <2>:                          Publish Octave Script Files.
                                                             (line  158)
* gradient:                              Utility Functions.  (line  223)
* gradient <1>:                          Utility Functions.  (line  224)
* gradient <2>:                          Utility Functions.  (line  225)
* gradient <3>:                          Utility Functions.  (line  226)
* gradient <4>:                          Utility Functions.  (line  227)
* gradient <5>:                          Utility Functions.  (line  228)
* gradient <6>:                          Utility Functions.  (line  229)
* graphics_toolkit:                      Graphics Toolkits.  (line    6)
* graphics_toolkit <1>:                  Graphics Toolkits.  (line    7)
* graphics_toolkit <2>:                  Graphics Toolkits.  (line    8)
* graphics_toolkit <3>:                  Graphics Toolkits.  (line    9)
* gray:                                  Representing Images.
                                                             (line  431)
* gray <1>:                              Representing Images.
                                                             (line  432)
* gray2ind:                              Representing Images.
                                                             (line   58)
* gray2ind <1>:                          Representing Images.
                                                             (line   59)
* gray2ind <2>:                          Representing Images.
                                                             (line   60)
* gray2ind <3>:                          Representing Images.
                                                             (line   61)
* gray2ind <4>:                          Representing Images.
                                                             (line   62)
* grid:                                  Plot Annotations.   (line  321)
* grid <1>:                              Plot Annotations.   (line  322)
* grid <2>:                              Plot Annotations.   (line  323)
* grid <3>:                              Plot Annotations.   (line  324)
* grid <4>:                              Plot Annotations.   (line  325)
* grid <5>:                              Plot Annotations.   (line  326)
* grid <6>:                              Plot Annotations.   (line  327)
* griddata:                              Interpolation on Scattered Data.
                                                             (line   14)
* griddata <1>:                          Interpolation on Scattered Data.
                                                             (line   15)
* griddata <2>:                          Interpolation on Scattered Data.
                                                             (line   16)
* griddata <3>:                          Interpolation on Scattered Data.
                                                             (line   17)
* griddata <4>:                          Interpolation on Scattered Data.
                                                             (line   18)
* griddata <5>:                          Interpolation on Scattered Data.
                                                             (line   19)
* griddata3:                             Interpolation on Scattered Data.
                                                             (line   65)
* griddata3 <1>:                         Interpolation on Scattered Data.
                                                             (line   66)
* griddata3 <2>:                         Interpolation on Scattered Data.
                                                             (line   67)
* griddatan:                             Interpolation on Scattered Data.
                                                             (line  101)
* griddatan <1>:                         Interpolation on Scattered Data.
                                                             (line  102)
* griddatan <2>:                         Interpolation on Scattered Data.
                                                             (line  103)
* groot:                                 Graphics Objects.   (line  338)
* gsvd:                                  Basic Matrix Functions.
                                                             (line  210)
* gsvd <1>:                              Basic Matrix Functions.
                                                             (line  211)
* gsvd <2>:                              Basic Matrix Functions.
                                                             (line  212)
* gt:                                    Comparison Ops.     (line   68)
* gtext:                                 Interacting with Plots.
                                                             (line   42)
* gtext <1>:                             Interacting with Plots.
                                                             (line   43)
* gtext <2>:                             Interacting with Plots.
                                                             (line   44)
* gtext <3>:                             Interacting with Plots.
                                                             (line   45)
* gtext <4>:                             Interacting with Plots.
                                                             (line   46)
* guidata:                               GUI Utility Functions.
                                                             (line   10)
* guidata <1>:                           GUI Utility Functions.
                                                             (line   11)
* guihandles:                            GUI Utility Functions.
                                                             (line   25)
* guihandles <1>:                        GUI Utility Functions.
                                                             (line   26)
* gunzip:                                File Archiving Utilities.
                                                             (line   44)
* gunzip <1>:                            File Archiving Utilities.
                                                             (line   45)
* gunzip <2>:                            File Archiving Utilities.
                                                             (line   46)
* gzip:                                  File Archiving Utilities.
                                                             (line   19)
* gzip <1>:                              File Archiving Utilities.
                                                             (line   20)
* hadamard:                              Famous Matrices.    (line  286)
* hamming:                               Signal Processing.  (line  576)
* hamming <1>:                           Signal Processing.  (line  577)
* hamming <2>:                           Signal Processing.  (line  578)
* hankel:                                Famous Matrices.    (line  310)
* hankel <1>:                            Famous Matrices.    (line  311)
* hanning:                               Signal Processing.  (line  589)
* hanning <1>:                           Signal Processing.  (line  590)
* hanning <2>:                           Signal Processing.  (line  591)
* hash:                                  Hashing Functions.  (line   21)
* have_window_system:                    GUI Utility Functions.
                                                             (line   43)
* hdl2struct:                            Graphics Objects.   (line  617)
* help:                                  Getting Help.       (line   14)
* help <1>:                              Getting Help.       (line   15)
* help <2>:                              Getting Help.       (line   16)
* help <3>:                              Getting Help.       (line   17)
* helpdlg:                               I/O Dialogs.        (line  159)
* helpdlg <1>:                           I/O Dialogs.        (line  160)
* helpdlg <2>:                           I/O Dialogs.        (line  161)
* helpdlg <3>:                           I/O Dialogs.        (line  162)
* hess:                                  Matrix Factorizations.
                                                             (line  155)
* hess <1>:                              Matrix Factorizations.
                                                             (line  156)
* hex2dec:                               Numerical Data and Strings.
                                                             (line  286)
* hex2num:                               Numerical Data and Strings.
                                                             (line  381)
* hex2num <1>:                           Numerical Data and Strings.
                                                             (line  382)
* hggroup:                               Object Groups.      (line   12)
* hggroup <1>:                           Object Groups.      (line   13)
* hggroup <2>:                           Object Groups.      (line   14)
* hggroup <3>:                           Object Groups.      (line   15)
* hgload:                                Printing and Saving Plots.
                                                             (line  557)
* hgload <1>:                            Printing and Saving Plots.
                                                             (line  558)
* hgsave:                                Printing and Saving Plots.
                                                             (line  522)
* hgsave <1>:                            Printing and Saving Plots.
                                                             (line  523)
* hgsave <2>:                            Printing and Saving Plots.
                                                             (line  524)
* hgtransform:                           Transform Groups.   (line    6)
* hgtransform <1>:                       Transform Groups.   (line    7)
* hgtransform <2>:                       Transform Groups.   (line    8)
* hidden:                                Three-Dimensional Plots.
                                                             (line  173)
* hidden <1>:                            Three-Dimensional Plots.
                                                             (line  174)
* hidden <2>:                            Three-Dimensional Plots.
                                                             (line  175)
* hidden <3>:                            Three-Dimensional Plots.
                                                             (line  176)
* hilb:                                  Famous Matrices.    (line  328)
* hist:                                  Two-Dimensional Plots.
                                                             (line  447)
* hist <1>:                              Two-Dimensional Plots.
                                                             (line  448)
* hist <2>:                              Two-Dimensional Plots.
                                                             (line  449)
* hist <3>:                              Two-Dimensional Plots.
                                                             (line  450)
* hist <4>:                              Two-Dimensional Plots.
                                                             (line  451)
* hist <5>:                              Two-Dimensional Plots.
                                                             (line  452)
* hist <6>:                              Two-Dimensional Plots.
                                                             (line  453)
* histc:                                 Basic Statistical Functions.
                                                             (line   54)
* histc <1>:                             Basic Statistical Functions.
                                                             (line   55)
* histc <2>:                             Basic Statistical Functions.
                                                             (line   56)
* history:                               Commands for History.
                                                             (line   50)
* history <1>:                           Commands for History.
                                                             (line   51)
* history <2>:                           Commands for History.
                                                             (line   52)
* history <3>:                           Commands for History.
                                                             (line   53)
* history_control:                       Commands for History.
                                                             (line  179)
* history_control <1>:                   Commands for History.
                                                             (line  180)
* history_file:                          Commands for History.
                                                             (line  205)
* history_file <1>:                      Commands for History.
                                                             (line  206)
* history_save:                          Commands for History.
                                                             (line  163)
* history_save <1>:                      Commands for History.
                                                             (line  164)
* history_save <2>:                      Commands for History.
                                                             (line  165)
* history_size:                          Commands for History.
                                                             (line  245)
* history_size <1>:                      Commands for History.
                                                             (line  246)
* history_timestamp_format_string:       Commands for History.
                                                             (line  258)
* history_timestamp_format_string <1>:   Commands for History.
                                                             (line  259)
* history_timestamp_format_string <2>:   Commands for History.
                                                             (line  260)
* hold:                                  Manipulation of Plot Windows.
                                                             (line  110)
* hold <1>:                              Manipulation of Plot Windows.
                                                             (line  111)
* hold <2>:                              Manipulation of Plot Windows.
                                                             (line  112)
* hold <3>:                              Manipulation of Plot Windows.
                                                             (line  113)
* home:                                  Cursor Motion.      (line   60)
* horzcat:                               Rearranging Matrices.
                                                             (line  161)
* hot:                                   Representing Images.
                                                             (line  441)
* hot <1>:                               Representing Images.
                                                             (line  442)
* housh:                                 Matrix Factorizations.
                                                             (line  876)
* hsv:                                   Representing Images.
                                                             (line  451)
* hsv2rgb:                               Color Conversion.   (line   28)
* hsv2rgb <1>:                           Color Conversion.   (line   29)
* humps:                                 Minimizers.         (line  254)
* humps <1>:                             Minimizers.         (line  255)
* hurst:                                 Signal Processing.  (line  602)
* hypot:                                 Utility Functions.  (line  209)
* hypot <1>:                             Utility Functions.  (line  210)
* i:                                     Mathematical Constants.
                                                             (line   57)
* I:                                     Mathematical Constants.
                                                             (line   57)
* I <1>:                                 Mathematical Constants.
                                                             (line   58)
* I <2>:                                 Mathematical Constants.
                                                             (line   59)
* I <3>:                                 Mathematical Constants.
                                                             (line   60)
* I <4>:                                 Mathematical Constants.
                                                             (line   61)
* ichol:                                 Iterative Techniques.
                                                             (line  314)
* ichol <1>:                             Iterative Techniques.
                                                             (line  315)
* idivide:                               Integer Arithmetic. (line   25)
* ifelse:                                Short-circuit Boolean Operators.
                                                             (line   86)
* ifft:                                  Signal Processing.  (line   33)
* ifft <1>:                              Signal Processing.  (line   34)
* ifft <2>:                              Signal Processing.  (line   35)
* ifft2:                                 Signal Processing.  (line   72)
* ifft2 <1>:                             Signal Processing.  (line   73)
* ifftn:                                 Signal Processing.  (line  102)
* ifftn <1>:                             Signal Processing.  (line  103)
* ifftshift:                             Signal Processing.  (line  563)
* ifftshift <1>:                         Signal Processing.  (line  564)
* ignore_function_time_stamp:            Function Files.     (line  170)
* ignore_function_time_stamp <1>:        Function Files.     (line  171)
* ilu:                                   Iterative Techniques.
                                                             (line  434)
* ilu <1>:                               Iterative Techniques.
                                                             (line  435)
* ilu <2>:                               Iterative Techniques.
                                                             (line  436)
* ilu <3>:                               Iterative Techniques.
                                                             (line  437)
* im2double:                             Representing Images.
                                                             (line   30)
* im2double <1>:                         Representing Images.
                                                             (line   31)
* im2frame:                              Representing Images.
                                                             (line  213)
* im2frame <1>:                          Representing Images.
                                                             (line  214)
* imag:                                  Complex Arithmetic. (line   67)
* image:                                 Displaying Images.  (line   61)
* image <1>:                             Displaying Images.  (line   62)
* image <2>:                             Displaying Images.  (line   63)
* image <3>:                             Displaying Images.  (line   64)
* image <4>:                             Displaying Images.  (line   65)
* imagesc:                               Displaying Images.  (line  104)
* imagesc <1>:                           Displaying Images.  (line  105)
* imagesc <2>:                           Displaying Images.  (line  106)
* imagesc <3>:                           Displaying Images.  (line  107)
* imagesc <4>:                           Displaying Images.  (line  108)
* imagesc <5>:                           Displaying Images.  (line  109)
* imagesc <6>:                           Displaying Images.  (line  110)
* IMAGE_PATH:                            Loading and Saving Images.
                                                             (line  159)
* IMAGE_PATH <1>:                        Loading and Saving Images.
                                                             (line  160)
* IMAGE_PATH <2>:                        Loading and Saving Images.
                                                             (line  161)
* imfinfo:                               Loading and Saving Images.
                                                             (line  178)
* imfinfo <1>:                           Loading and Saving Images.
                                                             (line  179)
* imfinfo <2>:                           Loading and Saving Images.
                                                             (line  180)
* imformats:                             Loading and Saving Images.
                                                             (line  330)
* imformats <1>:                         Loading and Saving Images.
                                                             (line  331)
* imformats <2>:                         Loading and Saving Images.
                                                             (line  332)
* imformats <3>:                         Loading and Saving Images.
                                                             (line  333)
* imformats <4>:                         Loading and Saving Images.
                                                             (line  334)
* imformats <5>:                         Loading and Saving Images.
                                                             (line  335)
* imformats <6>:                         Loading and Saving Images.
                                                             (line  336)
* importdata:                            Simple File I/O.    (line  831)
* importdata <1>:                        Simple File I/O.    (line  832)
* importdata <2>:                        Simple File I/O.    (line  833)
* importdata <3>:                        Simple File I/O.    (line  834)
* importdata <4>:                        Simple File I/O.    (line  835)
* imread:                                Loading and Saving Images.
                                                             (line   17)
* imread <1>:                            Loading and Saving Images.
                                                             (line   18)
* imread <2>:                            Loading and Saving Images.
                                                             (line   19)
* imread <3>:                            Loading and Saving Images.
                                                             (line   20)
* imread <4>:                            Loading and Saving Images.
                                                             (line   21)
* imshow:                                Displaying Images.  (line   10)
* imshow <1>:                            Displaying Images.  (line   11)
* imshow <2>:                            Displaying Images.  (line   12)
* imshow <3>:                            Displaying Images.  (line   13)
* imshow <4>:                            Displaying Images.  (line   14)
* imshow <5>:                            Displaying Images.  (line   15)
* imshow <6>:                            Displaying Images.  (line   16)
* imwrite:                               Loading and Saving Images.
                                                             (line   77)
* imwrite <1>:                           Loading and Saving Images.
                                                             (line   78)
* imwrite <2>:                           Loading and Saving Images.
                                                             (line   79)
* imwrite <3>:                           Loading and Saving Images.
                                                             (line   80)
* ind2gray:                              Representing Images.
                                                             (line   74)
* ind2rgb:                               Representing Images.
                                                             (line  116)
* ind2rgb <1>:                           Representing Images.
                                                             (line  117)
* ind2sub:                               Advanced Indexing.  (line  201)
* index:                                 Searching in Strings.
                                                             (line  220)
* index <1>:                             Searching in Strings.
                                                             (line  221)
* inf:                                   Mathematical Constants.
                                                             (line   84)
* Inf:                                   Mathematical Constants.
                                                             (line   84)
* Inf <1>:                               Mathematical Constants.
                                                             (line   85)
* Inf <2>:                               Mathematical Constants.
                                                             (line   86)
* Inf <3>:                               Mathematical Constants.
                                                             (line   87)
* Inf <4>:                               Mathematical Constants.
                                                             (line   88)
* inferiorto:                            Precedence of Objects.
                                                             (line   22)
* info:                                  Getting Help.       (line  105)
* info_file:                             Getting Help.       (line  115)
* info_file <1>:                         Getting Help.       (line  116)
* info_file <2>:                         Getting Help.       (line  117)
* info_program:                          Getting Help.       (line  135)
* info_program <1>:                      Getting Help.       (line  136)
* info_program <2>:                      Getting Help.       (line  137)
* inpolygon:                             Voronoi Diagrams.   (line  145)
* inpolygon <1>:                         Voronoi Diagrams.   (line  146)
* input:                                 Terminal Input.     (line   11)
* input <1>:                             Terminal Input.     (line   12)
* inputdlg:                              I/O Dialogs.        (line  186)
* inputdlg <1>:                          I/O Dialogs.        (line  187)
* inputdlg <2>:                          I/O Dialogs.        (line  188)
* inputdlg <3>:                          I/O Dialogs.        (line  189)
* inputdlg <4>:                          I/O Dialogs.        (line  190)
* inputname:                             Defining Functions. (line  175)
* inputname <1>:                         Defining Functions. (line  176)
* inputParser:                           Parsing Arguments.  (line   10)
* inputParser.CaseSensitive:             Parsing Arguments.  (line   43)
* inputParser.FunctionName:              Parsing Arguments.  (line   47)
* inputParser.KeepUnmatched:             Parsing Arguments.  (line   51)
* inputParser.Parameters:                Parsing Arguments.  (line   28)
* inputParser.Results:                   Parsing Arguments.  (line   31)
* inputParser.StructExpand:              Parsing Arguments.  (line   60)
* inputParser.Unmatched:                 Parsing Arguments.  (line   35)
* inputParser.UsingDefaults:             Parsing Arguments.  (line   39)
* int16:                                 Integer Data Types. (line   52)
* int2str:                               Numerical Data and Strings.
                                                             (line  103)
* int32:                                 Integer Data Types. (line   66)
* int64:                                 Integer Data Types. (line   80)
* int8:                                  Integer Data Types. (line   38)
* integral:                              Functions of One Variable.
                                                             (line  438)
* integral <1>:                          Functions of One Variable.
                                                             (line  439)
* integral2:                             Functions of Multiple Variables.
                                                             (line  212)
* integral2 <1>:                         Functions of Multiple Variables.
                                                             (line  213)
* integral2 <2>:                         Functions of Multiple Variables.
                                                             (line  214)
* integral3:                             Functions of Multiple Variables.
                                                             (line  299)
* integral3 <1>:                         Functions of Multiple Variables.
                                                             (line  300)
* interp1:                               One-dimensional Interpolation.
                                                             (line   11)
* interp1 <1>:                           One-dimensional Interpolation.
                                                             (line   12)
* interp1 <2>:                           One-dimensional Interpolation.
                                                             (line   13)
* interp1 <3>:                           One-dimensional Interpolation.
                                                             (line   14)
* interp1 <4>:                           One-dimensional Interpolation.
                                                             (line   15)
* interp1 <5>:                           One-dimensional Interpolation.
                                                             (line   16)
* interp1 <6>:                           One-dimensional Interpolation.
                                                             (line   17)
* interp2:                               Multi-dimensional Interpolation.
                                                             (line   10)
* interp2 <1>:                           Multi-dimensional Interpolation.
                                                             (line   11)
* interp2 <2>:                           Multi-dimensional Interpolation.
                                                             (line   12)
* interp2 <3>:                           Multi-dimensional Interpolation.
                                                             (line   13)
* interp2 <4>:                           Multi-dimensional Interpolation.
                                                             (line   14)
* interp2 <5>:                           Multi-dimensional Interpolation.
                                                             (line   15)
* interp3:                               Multi-dimensional Interpolation.
                                                             (line   68)
* interp3 <1>:                           Multi-dimensional Interpolation.
                                                             (line   69)
* interp3 <2>:                           Multi-dimensional Interpolation.
                                                             (line   70)
* interp3 <3>:                           Multi-dimensional Interpolation.
                                                             (line   71)
* interp3 <4>:                           Multi-dimensional Interpolation.
                                                             (line   72)
* interp3 <5>:                           Multi-dimensional Interpolation.
                                                             (line   73)
* interpft:                              One-dimensional Interpolation.
                                                             (line  128)
* interpft <1>:                          One-dimensional Interpolation.
                                                             (line  129)
* interpn:                               Multi-dimensional Interpolation.
                                                             (line  124)
* interpn <1>:                           Multi-dimensional Interpolation.
                                                             (line  125)
* interpn <2>:                           Multi-dimensional Interpolation.
                                                             (line  126)
* interpn <3>:                           Multi-dimensional Interpolation.
                                                             (line  127)
* interpn <4>:                           Multi-dimensional Interpolation.
                                                             (line  128)
* interpn <5>:                           Multi-dimensional Interpolation.
                                                             (line  129)
* intersect:                             Set Operations.     (line   23)
* intersect <1>:                         Set Operations.     (line   24)
* intersect <2>:                         Set Operations.     (line   25)
* intersect <3>:                         Set Operations.     (line   26)
* intersect <4>:                         Set Operations.     (line   27)
* intersect <5>:                         Set Operations.     (line   28)
* intmax:                                Integer Data Types. (line   94)
* intmax <1>:                            Integer Data Types. (line   95)
* intmax <2>:                            Integer Data Types. (line   96)
* intmin:                                Integer Data Types. (line  139)
* intmin <1>:                            Integer Data Types. (line  140)
* intmin <2>:                            Integer Data Types. (line  141)
* inv:                                   Basic Matrix Functions.
                                                             (line  257)
* inv <1>:                               Basic Matrix Functions.
                                                             (line  258)
* inverse:                               Basic Matrix Functions.
                                                             (line  259)
* invhilb:                               Famous Matrices.    (line  348)
* ipermute:                              Rearranging Matrices.
                                                             (line  206)
* iqr:                                   Descriptive Statistics.
                                                             (line  152)
* iqr <1>:                               Descriptive Statistics.
                                                             (line  153)
* iqr <2>:                               Descriptive Statistics.
                                                             (line  154)
* isa:                                   Built-in Data Types.
                                                             (line   27)
* isalnum:                               Character Class Functions.
                                                             (line   15)
* isalpha:                               Character Class Functions.
                                                             (line   25)
* isappdata:                             Application-defined Data.
                                                             (line   54)
* isargout:                              Ignoring Arguments. (line   62)
* isascii:                               Character Class Functions.
                                                             (line  110)
* isaxes:                                Graphics Objects.   (line  314)
* isbanded:                              Predicates for Numeric Objects.
                                                             (line  201)
* isbool:                                Predicates for Numeric Objects.
                                                             (line   37)
* iscell:                                Basic Usage of Cell Arrays.
                                                             (line   85)
* iscellstr:                             Cell Arrays of Strings.
                                                             (line   59)
* ischar:                                Character Arrays.   (line   25)
* iscntrl:                               Character Class Functions.
                                                             (line   89)
* iscolormap:                            Representing Images.
                                                             (line  302)
* iscolumn:                              Predicates for Numeric Objects.
                                                             (line  101)
* iscomplex:                             Predicates for Numeric Objects.
                                                             (line   62)
* isdebugmode:                           Debug Mode.         (line   55)
* isdefinite:                            Predicates for Numeric Objects.
                                                             (line  181)
* isdefinite <1>:                        Predicates for Numeric Objects.
                                                             (line  182)
* isdeployed:                            System Information. (line   98)
* isdiag:                                Predicates for Numeric Objects.
                                                             (line  211)
* isdigit:                               Character Class Functions.
                                                             (line   60)
* isdir:                                 Filesystem Utilities.
                                                             (line  408)
* isempty:                               Object Sizes.       (line  130)
* isequal:                               Comparison Ops.     (line   74)
* isequaln:                              Comparison Ops.     (line   79)
* isfield:                               Manipulating Structures.
                                                             (line   35)
* isfield <1>:                           Manipulating Structures.
                                                             (line   36)
* isfigure:                              Graphics Objects.   (line  324)
* isfile:                                Filesystem Utilities.
                                                             (line  397)
* isfinite:                              Finding Elements and Checking Conditions.
                                                             (line  131)
* isfloat:                               Predicates for Numeric Objects.
                                                             (line   44)
* isfolder:                              Filesystem Utilities.
                                                             (line  426)
* isglobal:                              Global Variables.   (line   84)
* isgraph:                               Character Class Functions.
                                                             (line   96)
* isgraphics:                            Graphics Objects.   (line  286)
* isgraphics <1>:                        Graphics Objects.   (line  287)
* isguirunning:                          GUI Utility Functions.
                                                             (line   49)
* ishandle:                              Graphics Objects.   (line  298)
* ishermitian:                           Predicates for Numeric Objects.
                                                             (line  155)
* ishermitian <1>:                       Predicates for Numeric Objects.
                                                             (line  156)
* ishermitian <2>:                       Predicates for Numeric Objects.
                                                             (line  157)
* ishermitian <3>:                       Predicates for Numeric Objects.
                                                             (line  158)
* ishghandle:                            Graphics Objects.   (line  275)
* ishold:                                Manipulation of Plot Windows.
                                                             (line  142)
* ishold <1>:                            Manipulation of Plot Windows.
                                                             (line  143)
* ishold <2>:                            Manipulation of Plot Windows.
                                                             (line  144)
* isieee:                                System Information. (line   92)
* isindex:                               Advanced Indexing.  (line  259)
* isindex <1>:                           Advanced Indexing.  (line  260)
* isinf:                                 Finding Elements and Checking Conditions.
                                                             (line  107)
* isinteger:                             Integer Data Types. (line   28)
* isjava:                                Java Interface Functions.
                                                             (line   48)
* iskeyword:                             Keywords.           (line   27)
* iskeyword <1>:                         Keywords.           (line   28)
* isletter:                              Character Class Functions.
                                                             (line   36)
* islogical:                             Predicates for Numeric Objects.
                                                             (line   36)
* islower:                               Character Class Functions.
                                                             (line   46)
* ismac:                                 System Information. (line   86)
* ismatrix:                              Predicates for Numeric Objects.
                                                             (line   70)
* ismember:                              Set Operations.     (line  148)
* ismember <1>:                          Set Operations.     (line  149)
* ismember <2>:                          Set Operations.     (line  150)
* ismethod:                              Creating a Class.   (line  132)
* ismethod <1>:                          Creating a Class.   (line  133)
* isna:                                  Missing Data.       (line   40)
* isnan:                                 Finding Elements and Checking Conditions.
                                                             (line  119)
* isnull:                                Object Sizes.       (line  136)
* isnumeric:                             Predicates for Numeric Objects.
                                                             (line   24)
* isobject:                              Creating a Class.   (line   98)
* isocaps:                               Three-Dimensional Plots.
                                                             (line  547)
* isocaps <1>:                           Three-Dimensional Plots.
                                                             (line  548)
* isocaps <2>:                           Three-Dimensional Plots.
                                                             (line  549)
* isocaps <3>:                           Three-Dimensional Plots.
                                                             (line  550)
* isocaps <4>:                           Three-Dimensional Plots.
                                                             (line  551)
* isocaps <5>:                           Three-Dimensional Plots.
                                                             (line  552)
* isocaps <6>:                           Three-Dimensional Plots.
                                                             (line  553)
* isocaps <7>:                           Three-Dimensional Plots.
                                                             (line  554)
* isocaps <8>:                           Three-Dimensional Plots.
                                                             (line  555)
* isocolors:                             Three-Dimensional Plots.
                                                             (line  627)
* isocolors <1>:                         Three-Dimensional Plots.
                                                             (line  628)
* isocolors <2>:                         Three-Dimensional Plots.
                                                             (line  629)
* isocolors <3>:                         Three-Dimensional Plots.
                                                             (line  630)
* isocolors <4>:                         Three-Dimensional Plots.
                                                             (line  631)
* isocolors <5>:                         Three-Dimensional Plots.
                                                             (line  632)
* isonormals:                            Three-Dimensional Plots.
                                                             (line  509)
* isonormals <1>:                        Three-Dimensional Plots.
                                                             (line  510)
* isonormals <2>:                        Three-Dimensional Plots.
                                                             (line  511)
* isonormals <3>:                        Three-Dimensional Plots.
                                                             (line  512)
* isonormals <4>:                        Three-Dimensional Plots.
                                                             (line  513)
* isonormals <5>:                        Three-Dimensional Plots.
                                                             (line  514)
* isonormals <6>:                        Three-Dimensional Plots.
                                                             (line  515)
* isonormals <7>:                        Three-Dimensional Plots.
                                                             (line  516)
* isosurface:                            Three-Dimensional Plots.
                                                             (line  394)
* isosurface <1>:                        Three-Dimensional Plots.
                                                             (line  395)
* isosurface <2>:                        Three-Dimensional Plots.
                                                             (line  396)
* isosurface <3>:                        Three-Dimensional Plots.
                                                             (line  397)
* isosurface <4>:                        Three-Dimensional Plots.
                                                             (line  398)
* isosurface <5>:                        Three-Dimensional Plots.
                                                             (line  399)
* isosurface <6>:                        Three-Dimensional Plots.
                                                             (line  400)
* isosurface <7>:                        Three-Dimensional Plots.
                                                             (line  401)
* isosurface <8>:                        Three-Dimensional Plots.
                                                             (line  402)
* isosurface <9>:                        Three-Dimensional Plots.
                                                             (line  403)
* ispc:                                  System Information. (line   74)
* isplaying:                             Playback.           (line   39)
* ispref:                                User-Defined Preferences.
                                                             (line   90)
* ispref <1>:                            User-Defined Preferences.
                                                             (line   91)
* ispref <2>:                            User-Defined Preferences.
                                                             (line   92)
* isprime:                               Predicates for Numeric Objects.
                                                             (line  238)
* isprint:                               Character Class Functions.
                                                             (line  103)
* isprop:                                Introduction to Graphics Structures.
                                                             (line  100)
* ispunct:                               Character Class Functions.
                                                             (line   74)
* isreal:                                Predicates for Numeric Objects.
                                                             (line   53)
* isrecording:                           Recording.          (line   30)
* isrow:                                 Predicates for Numeric Objects.
                                                             (line   91)
* isscalar:                              Predicates for Numeric Objects.
                                                             (line  111)
* issorted:                              Rearranging Matrices.
                                                             (line  451)
* issorted <1>:                          Rearranging Matrices.
                                                             (line  452)
* issorted <2>:                          Rearranging Matrices.
                                                             (line  453)
* isspace:                               Character Class Functions.
                                                             (line   81)
* issparse:                              Information.        (line   21)
* issquare:                              Predicates for Numeric Objects.
                                                             (line  120)
* isstring:                              Character Arrays.   (line   33)
* isstrprop:                             Character Class Functions.
                                                             (line  115)
* isstruct:                              Creating Structures.
                                                             (line  161)
* isstudent:                             System Information. (line  105)
* issymmetric:                           Predicates for Numeric Objects.
                                                             (line  129)
* issymmetric <1>:                       Predicates for Numeric Objects.
                                                             (line  130)
* issymmetric <2>:                       Predicates for Numeric Objects.
                                                             (line  131)
* issymmetric <3>:                       Predicates for Numeric Objects.
                                                             (line  132)
* istril:                                Predicates for Numeric Objects.
                                                             (line  218)
* istriu:                                Predicates for Numeric Objects.
                                                             (line  228)
* isunix:                                System Information. (line   80)
* isupper:                               Character Class Functions.
                                                             (line   53)
* isvarname:                             Variables.          (line   54)
* isvector:                              Predicates for Numeric Objects.
                                                             (line   80)
* isxdigit:                              Character Class Functions.
                                                             (line   68)
* is_absolute_filename:                  Filesystem Utilities.
                                                             (line  619)
* is_dq_string:                          Escape Sequences in String Constants.
                                                             (line   76)
* is_function_handle:                    Function Handles.   (line   36)
* is_leap_year:                          Timing Utilities.   (line  412)
* is_leap_year <1>:                      Timing Utilities.   (line  413)
* is_rooted_relative_filename:           Filesystem Utilities.
                                                             (line  651)
* is_same_file:                          Filesystem Utilities.
                                                             (line  626)
* is_sq_string:                          Escape Sequences in String Constants.
                                                             (line   82)
* is_valid_file_id:                      Opening and Closing Files.
                                                             (line  140)
* j:                                     Mathematical Constants.
                                                             (line   57)
* J:                                     Mathematical Constants.
                                                             (line   57)
* javaaddpath:                           Java Interface Functions.
                                                             (line  201)
* javaaddpath <1>:                       Java Interface Functions.
                                                             (line  201)
* javaaddpath <2>:                       Java Interface Functions.
                                                             (line  202)
* javaaddpath <3>:                       Java Interface Functions.
                                                             (line  203)
* javaaddpath <4>:                       Java Interface Functions.
                                                             (line  204)
* javaArray:                             Java Interface Functions.
                                                             (line   24)
* javaArray <1>:                         Java Interface Functions.
                                                             (line   25)
* javachk:                               Java Interface Functions.
                                                             (line  236)
* javachk <1>:                           Java Interface Functions.
                                                             (line  237)
* javachk <2>:                           Java Interface Functions.
                                                             (line  238)
* javaclasspath:                         Java Interface Functions.
                                                             (line  167)
* javaclasspath <1>:                     Java Interface Functions.
                                                             (line  168)
* javaclasspath <2>:                     Java Interface Functions.
                                                             (line  169)
* javaclasspath <3>:                     Java Interface Functions.
                                                             (line  170)
* javamem:                               Java Interface Functions.
                                                             (line  302)
* javamem <1>:                           Java Interface Functions.
                                                             (line  303)
* javaMethod:                            Java Interface Functions.
                                                             (line  142)
* javaMethod <1>:                        Java Interface Functions.
                                                             (line  143)
* javaObject:                            Java Interface Functions.
                                                             (line   10)
* javaObject <1>:                        Java Interface Functions.
                                                             (line   11)
* javarmpath:                            Java Interface Functions.
                                                             (line  219)
* javarmpath <1>:                        Java Interface Functions.
                                                             (line  220)
* javarmpath <2>:                        Java Interface Functions.
                                                             (line  221)
* java_get:                              Java Interface Functions.
                                                             (line   88)
* java_matrix_autoconversion:            Java Interface Functions.
                                                             (line  341)
* java_matrix_autoconversion <1>:        Java Interface Functions.
                                                             (line  342)
* java_matrix_autoconversion <2>:        Java Interface Functions.
                                                             (line  343)
* java_set:                              Java Interface Functions.
                                                             (line  104)
* java_unsigned_autoconversion:          Java Interface Functions.
                                                             (line  357)
* java_unsigned_autoconversion <1>:      Java Interface Functions.
                                                             (line  358)
* java_unsigned_autoconversion <2>:      Java Interface Functions.
                                                             (line  359)
* jet:                                   Representing Images.
                                                             (line  466)
* jet <1>:                               Representing Images.
                                                             (line  467)
* jsondecode:                            JSON data encoding/decoding.
                                                             (line  122)
* jsondecode <1>:                        JSON data encoding/decoding.
                                                             (line  123)
* jsondecode <2>:                        JSON data encoding/decoding.
                                                             (line  124)
* jsondecode <3>:                        JSON data encoding/decoding.
                                                             (line  125)
* jsonencode:                            JSON data encoding/decoding.
                                                             (line   10)
* jsonencode <1>:                        JSON data encoding/decoding.
                                                             (line   11)
* jsonencode <2>:                        JSON data encoding/decoding.
                                                             (line   12)
* jupyter_notebook:                      Jupyter Notebooks.  (line   11)
* jupyter_notebook <1>:                  Jupyter Notebooks.  (line   12)
* kbhit:                                 Terminal Input.     (line   86)
* kbhit <1>:                             Terminal Input.     (line   87)
* kendall:                               Correlation and Regression Analysis.
                                                             (line  116)
* kendall <1>:                           Correlation and Regression Analysis.
                                                             (line  117)
* keyboard:                              Breakpoints.        (line  227)
* keyboard <1>:                          Breakpoints.        (line  228)
* kill:                                  Controlling Subprocesses.
                                                             (line  544)
* kill <1>:                              Controlling Subprocesses.
                                                             (line  545)
* kron:                                  Functions of a Matrix.
                                                             (line   57)
* kron <1>:                              Functions of a Matrix.
                                                             (line   58)
* krylov:                                Matrix Factorizations.
                                                             (line  902)
* kurtosis:                              Descriptive Statistics.
                                                             (line  380)
* kurtosis <1>:                          Descriptive Statistics.
                                                             (line  381)
* kurtosis <2>:                          Descriptive Statistics.
                                                             (line  382)
* lasterr:                               Catching Errors.    (line   93)
* lasterr <1>:                           Catching Errors.    (line   94)
* lasterr <2>:                           Catching Errors.    (line   95)
* lasterror:                             Catching Errors.    (line   50)
* lasterror <1>:                         Catching Errors.    (line   51)
* lasterror <2>:                         Catching Errors.    (line   52)
* lastwarn:                              Issuing Warnings.   (line  140)
* lastwarn <1>:                          Issuing Warnings.   (line  141)
* lastwarn <2>:                          Issuing Warnings.   (line  142)
* lcm:                                   Utility Functions.  (line  436)
* lcm <1>:                               Utility Functions.  (line  437)
* ldivide:                               Arithmetic Ops.     (line  119)
* le:                                    Comparison Ops.     (line   86)
* legend:                                Plot Annotations.   (line   44)
* legend <1>:                            Plot Annotations.   (line   45)
* legend <2>:                            Plot Annotations.   (line   46)
* legend <3>:                            Plot Annotations.   (line   47)
* legend <4>:                            Plot Annotations.   (line   48)
* legend <5>:                            Plot Annotations.   (line   49)
* legend <6>:                            Plot Annotations.   (line   50)
* legend <7>:                            Plot Annotations.   (line   51)
* legend <8>:                            Plot Annotations.   (line   52)
* legend <9>:                            Plot Annotations.   (line   53)
* legend <10>:                           Plot Annotations.   (line   54)
* legendre:                              Special Functions.  (line  692)
* legendre <1>:                          Special Functions.  (line  693)
* length:                                Object Sizes.       (line   72)
* lgamma:                                Special Functions.  (line  759)
* license:                               System Information. (line  289)
* license <1>:                           System Information. (line  290)
* license <2>:                           System Information. (line  291)
* license <3>:                           System Information. (line  292)
* license <4>:                           System Information. (line  293)
* license <5>:                           System Information. (line  294)
* license <6>:                           System Information. (line  295)
* license <7>:                           System Information. (line  296)
* light:                                 Graphics Objects.   (line  219)
* light <1>:                             Graphics Objects.   (line  220)
* light <2>:                             Graphics Objects.   (line  221)
* light <3>:                             Graphics Objects.   (line  222)
* lightangle:                            Three-Dimensional Plots.
                                                             (line 1015)
* lightangle <1>:                        Three-Dimensional Plots.
                                                             (line 1016)
* lightangle <2>:                        Three-Dimensional Plots.
                                                             (line 1017)
* lightangle <3>:                        Three-Dimensional Plots.
                                                             (line 1018)
* lightangle <4>:                        Three-Dimensional Plots.
                                                             (line 1019)
* lighting:                              Three-Dimensional Plots.
                                                             (line  871)
* lighting <1>:                          Three-Dimensional Plots.
                                                             (line  872)
* lin2mu:                                Audio Data Processing.
                                                             (line   27)
* line:                                  Graphics Objects.   (line   88)
* line <1>:                              Graphics Objects.   (line   89)
* line <2>:                              Graphics Objects.   (line   90)
* line <3>:                              Graphics Objects.   (line   91)
* line <4>:                              Graphics Objects.   (line   92)
* line <5>:                              Graphics Objects.   (line   93)
* line <6>:                              Graphics Objects.   (line   94)
* line <7>:                              Graphics Objects.   (line   95)
* lines:                                 Representing Images.
                                                             (line  481)
* lines <1>:                             Representing Images.
                                                             (line  482)
* link:                                  Filesystem Utilities.
                                                             (line   84)
* link <1>:                              Filesystem Utilities.
                                                             (line   85)
* linkaxes:                              Object Groups.      (line  234)
* linkaxes <1>:                          Object Groups.      (line  235)
* linkprop:                              Object Groups.      (line  201)
* linkprop <1>:                          Object Groups.      (line  202)
* linsolve:                              Basic Matrix Functions.
                                                             (line  281)
* linsolve <1>:                          Basic Matrix Functions.
                                                             (line  282)
* linsolve <2>:                          Basic Matrix Functions.
                                                             (line  283)
* linspace:                              Special Utility Matrices.
                                                             (line  257)
* linspace <1>:                          Special Utility Matrices.
                                                             (line  258)
* listdlg:                               I/O Dialogs.        (line  240)
* listfonts:                             GUI Utility Functions.
                                                             (line   71)
* listfonts <1>:                         GUI Utility Functions.
                                                             (line   72)
* list_in_columns:                       Terminal Output.    (line   39)
* list_primes:                           Utility Functions.  (line  524)
* list_primes <1>:                       Utility Functions.  (line  525)
* load:                                  Simple File I/O.    (line  233)
* load <1>:                              Simple File I/O.    (line  234)
* load <2>:                              Simple File I/O.    (line  235)
* load <3>:                              Simple File I/O.    (line  236)
* load <4>:                              Simple File I/O.    (line  237)
* load <5>:                              Simple File I/O.    (line  238)
* load <6>:                              Simple File I/O.    (line  239)
* loaded_graphics_toolkits:              Graphics Toolkits.  (line   32)
* loadobj:                               Class Methods.      (line  157)
* localfunctions:                        Subfunctions.       (line   26)
* localtime:                             Timing Utilities.   (line  122)
* log:                                   Exponents and Logarithms.
                                                             (line   18)
* log10:                                 Exponents and Logarithms.
                                                             (line   41)
* log1p:                                 Exponents and Logarithms.
                                                             (line   35)
* log2:                                  Exponents and Logarithms.
                                                             (line   47)
* log2 <1>:                              Exponents and Logarithms.
                                                             (line   48)
* logical:                               Logical Values.     (line   36)
* loglog:                                Two-Dimensional Plots.
                                                             (line  282)
* loglog <1>:                            Two-Dimensional Plots.
                                                             (line  283)
* loglog <2>:                            Two-Dimensional Plots.
                                                             (line  284)
* loglog <3>:                            Two-Dimensional Plots.
                                                             (line  285)
* loglog <4>:                            Two-Dimensional Plots.
                                                             (line  286)
* loglog <5>:                            Two-Dimensional Plots.
                                                             (line  287)
* loglogerr:                             Two-Dimensional Plots.
                                                             (line 1285)
* loglogerr <1>:                         Two-Dimensional Plots.
                                                             (line 1286)
* loglogerr <2>:                         Two-Dimensional Plots.
                                                             (line 1287)
* loglogerr <3>:                         Two-Dimensional Plots.
                                                             (line 1288)
* loglogerr <4>:                         Two-Dimensional Plots.
                                                             (line 1289)
* loglogerr <5>:                         Two-Dimensional Plots.
                                                             (line 1290)
* loglogerr <6>:                         Two-Dimensional Plots.
                                                             (line 1291)
* loglogerr <7>:                         Two-Dimensional Plots.
                                                             (line 1292)
* loglogerr <8>:                         Two-Dimensional Plots.
                                                             (line 1293)
* loglogerr <9>:                         Two-Dimensional Plots.
                                                             (line 1294)
* logm:                                  Functions of a Matrix.
                                                             (line   30)
* logm <1>:                              Functions of a Matrix.
                                                             (line   31)
* logm <2>:                              Functions of a Matrix.
                                                             (line   32)
* logspace:                              Special Utility Matrices.
                                                             (line  278)
* logspace <1>:                          Special Utility Matrices.
                                                             (line  279)
* logspace <2>:                          Special Utility Matrices.
                                                             (line  280)
* lookfor:                               Getting Help.       (line   58)
* lookfor <1>:                           Getting Help.       (line   59)
* lookfor <2>:                           Getting Help.       (line   60)
* lookfor <3>:                           Getting Help.       (line   61)
* lookup:                                Finding Elements and Checking Conditions.
                                                             (line  214)
* lookup <1>:                            Finding Elements and Checking Conditions.
                                                             (line  215)
* lower:                                 Common String Operations.
                                                             (line    9)
* ls:                                    Current Working Directory.
                                                             (line   34)
* ls <1>:                                Current Working Directory.
                                                             (line   35)
* ls <2>:                                Current Working Directory.
                                                             (line   36)
* ls <3>:                                Current Working Directory.
                                                             (line   37)
* ls <4>:                                Current Working Directory.
                                                             (line   38)
* lscov:                                 Linear Least Squares.
                                                             (line  130)
* lscov <1>:                             Linear Least Squares.
                                                             (line  131)
* lscov <2>:                             Linear Least Squares.
                                                             (line  132)
* lscov <3>:                             Linear Least Squares.
                                                             (line  133)
* lsode:                                 Ordinary Differential Equations.
                                                             (line   14)
* lsode <1>:                             Ordinary Differential Equations.
                                                             (line   15)
* lsode_options:                         Ordinary Differential Equations.
                                                             (line  100)
* lsode_options <1>:                     Ordinary Differential Equations.
                                                             (line  101)
* lsode_options <2>:                     Ordinary Differential Equations.
                                                             (line  102)
* lsqnonneg:                             Linear Least Squares.
                                                             (line   84)
* lsqnonneg <1>:                         Linear Least Squares.
                                                             (line   85)
* lsqnonneg <2>:                         Linear Least Squares.
                                                             (line   86)
* lsqnonneg <3>:                         Linear Least Squares.
                                                             (line   87)
* lsqnonneg <4>:                         Linear Least Squares.
                                                             (line   88)
* lsqnonneg <5>:                         Linear Least Squares.
                                                             (line   89)
* lsqnonneg <6>:                         Linear Least Squares.
                                                             (line   90)
* lsqnonneg <7>:                         Linear Least Squares.
                                                             (line   91)
* lstat:                                 Filesystem Utilities.
                                                             (line  200)
* lstat <1>:                             Filesystem Utilities.
                                                             (line  201)
* ls_command:                            Current Working Directory.
                                                             (line   66)
* ls_command <1>:                        Current Working Directory.
                                                             (line   67)
* lt:                                    Comparison Ops.     (line   92)
* lu:                                    Matrix Factorizations.
                                                             (line  173)
* lu <1>:                                Matrix Factorizations.
                                                             (line  174)
* lu <2>:                                Matrix Factorizations.
                                                             (line  175)
* lu <3>:                                Matrix Factorizations.
                                                             (line  176)
* lu <4>:                                Matrix Factorizations.
                                                             (line  177)
* lu <5>:                                Matrix Factorizations.
                                                             (line  178)
* lu <6>:                                Matrix Factorizations.
                                                             (line  179)
* luupdate:                              Matrix Factorizations.
                                                             (line  246)
* luupdate <1>:                          Matrix Factorizations.
                                                             (line  247)
* mad:                                   Descriptive Statistics.
                                                             (line  190)
* mad <1>:                               Descriptive Statistics.
                                                             (line  191)
* mad <2>:                               Descriptive Statistics.
                                                             (line  192)
* magic:                                 Famous Matrices.    (line  378)
* makeinfo_program:                      Getting Help.       (line  153)
* makeinfo_program <1>:                  Getting Help.       (line  154)
* makeinfo_program <2>:                  Getting Help.       (line  155)
* make_absolute_filename:                Filesystem Utilities.
                                                             (line  607)
* mat2cell:                              Creating Cell Arrays.
                                                             (line  121)
* mat2cell <1>:                          Creating Cell Arrays.
                                                             (line  122)
* mat2str:                               Numerical Data and Strings.
                                                             (line   15)
* mat2str <1>:                           Numerical Data and Strings.
                                                             (line   16)
* material:                              Three-Dimensional Plots.
                                                             (line  899)
* material <1>:                          Three-Dimensional Plots.
                                                             (line  900)
* material <2>:                          Three-Dimensional Plots.
                                                             (line  901)
* material <3>:                          Three-Dimensional Plots.
                                                             (line  902)
* material <4>:                          Three-Dimensional Plots.
                                                             (line  903)
* material <5>:                          Three-Dimensional Plots.
                                                             (line  904)
* material <6>:                          Three-Dimensional Plots.
                                                             (line  905)
* material <7>:                          Three-Dimensional Plots.
                                                             (line  906)
* material <8>:                          Three-Dimensional Plots.
                                                             (line  907)
* material <9>:                          Three-Dimensional Plots.
                                                             (line  908)
* matlab.lang.makeUniqueStrings:         Variables.          (line  104)
* matlab.lang.makeUniqueStrings <1>:     Variables.          (line  105)
* matlab.lang.makeUniqueStrings <2>:     Variables.          (line  106)
* matlab.lang.makeUniqueStrings <3>:     Variables.          (line  107)
* matlab.lang.makeValidName:             Variables.          (line   63)
* matlab.lang.makeValidName <1>:         Variables.          (line   64)
* matlab.lang.makeValidName <2>:         Variables.          (line   65)
* matlab.lang.makeValidName <3>:         Variables.          (line   66)
* matlab.net.base64decode:               Base64 and Binary Data Transmission.
                                                             (line   41)
* matlab.net.base64encode:               Base64 and Binary Data Transmission.
                                                             (line   29)
* matlabroot:                            System Information. (line  128)
* matrix_type:                           Basic Matrix Functions.
                                                             (line  333)
* matrix_type <1>:                       Basic Matrix Functions.
                                                             (line  334)
* matrix_type <2>:                       Basic Matrix Functions.
                                                             (line  335)
* matrix_type <3>:                       Basic Matrix Functions.
                                                             (line  336)
* matrix_type <4>:                       Basic Matrix Functions.
                                                             (line  337)
* matrix_type <5>:                       Basic Matrix Functions.
                                                             (line  338)
* max:                                   Utility Functions.  (line   65)
* max <1>:                               Utility Functions.  (line   66)
* max <2>:                               Utility Functions.  (line   67)
* max <3>:                               Utility Functions.  (line   68)
* max_recursion_depth:                   Recursion.          (line   33)
* max_recursion_depth <1>:               Recursion.          (line   34)
* max_recursion_depth <2>:               Recursion.          (line   35)
* max_stack_depth:                       Recursion.          (line   49)
* max_stack_depth <1>:                   Recursion.          (line   50)
* max_stack_depth <2>:                   Recursion.          (line   51)
* mean:                                  Descriptive Statistics.
                                                             (line   11)
* mean <1>:                              Descriptive Statistics.
                                                             (line   12)
* mean <2>:                              Descriptive Statistics.
                                                             (line   13)
* mean <3>:                              Descriptive Statistics.
                                                             (line   14)
* mean <4>:                              Descriptive Statistics.
                                                             (line   15)
* meansq:                                Descriptive Statistics.
                                                             (line  222)
* meansq <1>:                            Descriptive Statistics.
                                                             (line  223)
* median:                                Descriptive Statistics.
                                                             (line   61)
* median <1>:                            Descriptive Statistics.
                                                             (line   62)
* memory:                                System Information. (line  329)
* memory <1>:                            System Information. (line  330)
* menu:                                  Terminal Input.     (line   44)
* menu <1>:                              Terminal Input.     (line   45)
* merge:                                 Short-circuit Boolean Operators.
                                                             (line   85)
* mesh:                                  Three-Dimensional Plots.
                                                             (line   54)
* mesh <1>:                              Three-Dimensional Plots.
                                                             (line   55)
* mesh <2>:                              Three-Dimensional Plots.
                                                             (line   56)
* mesh <3>:                              Three-Dimensional Plots.
                                                             (line   57)
* mesh <4>:                              Three-Dimensional Plots.
                                                             (line   58)
* mesh <5>:                              Three-Dimensional Plots.
                                                             (line   59)
* meshc:                                 Three-Dimensional Plots.
                                                             (line   94)
* meshc <1>:                             Three-Dimensional Plots.
                                                             (line   95)
* meshc <2>:                             Three-Dimensional Plots.
                                                             (line   96)
* meshc <3>:                             Three-Dimensional Plots.
                                                             (line   97)
* meshc <4>:                             Three-Dimensional Plots.
                                                             (line   98)
* meshc <5>:                             Three-Dimensional Plots.
                                                             (line   99)
* meshgrid:                              Three-Dimensional Plots.
                                                             (line 1046)
* meshgrid <1>:                          Three-Dimensional Plots.
                                                             (line 1047)
* meshgrid <2>:                          Three-Dimensional Plots.
                                                             (line 1048)
* meshgrid <3>:                          Three-Dimensional Plots.
                                                             (line 1049)
* meshz:                                 Three-Dimensional Plots.
                                                             (line  134)
* meshz <1>:                             Three-Dimensional Plots.
                                                             (line  135)
* meshz <2>:                             Three-Dimensional Plots.
                                                             (line  136)
* meshz <3>:                             Three-Dimensional Plots.
                                                             (line  137)
* meshz <4>:                             Three-Dimensional Plots.
                                                             (line  138)
* meshz <5>:                             Three-Dimensional Plots.
                                                             (line  139)
* methods:                               Creating a Class.   (line  108)
* methods <1>:                           Creating a Class.   (line  109)
* methods <2>:                           Creating a Class.   (line  110)
* methods <3>:                           Creating a Class.   (line  111)
* mex:                                   Getting Started with Mex-Files.
                                                             (line   12)
* mex <1>:                               Getting Started with Mex-Files.
                                                             (line   13)
* mexext:                                Getting Started with Mex-Files.
                                                             (line   27)
* mfilename:                             Function Files.     (line  152)
* mfilename <1>:                         Function Files.     (line  153)
* mfilename <2>:                         Function Files.     (line  154)
* mget:                                  FTP Objects.        (line   40)
* mget <1>:                              FTP Objects.        (line   41)
* mget <2>:                              FTP Objects.        (line   42)
* mgorth:                                Basic Matrix Functions.
                                                             (line  492)
* min:                                   Utility Functions.  (line  115)
* min <1>:                               Utility Functions.  (line  116)
* min <2>:                               Utility Functions.  (line  117)
* min <3>:                               Utility Functions.  (line  118)
* minus:                                 Arithmetic Ops.     (line  127)
* mislocked:                             Function Locking.   (line   69)
* mislocked <1>:                         Function Locking.   (line   70)
* missing_component_hook:                Missing Components. (line   12)
* missing_component_hook <1>:            Missing Components. (line   13)
* missing_component_hook <2>:            Missing Components. (line   14)
* missing_function_hook:                 Parser.             (line   46)
* missing_function_hook <1>:             Parser.             (line   47)
* missing_function_hook <2>:             Parser.             (line   48)
* mkdir:                                 Filesystem Utilities.
                                                             (line  115)
* mkdir <1>:                             Filesystem Utilities.
                                                             (line  116)
* mkdir <2>:                             Filesystem Utilities.
                                                             (line  117)
* mkdir <3>:                             Filesystem Utilities.
                                                             (line  118)
* mkdir <4>:                             Filesystem Utilities.
                                                             (line  119)
* mkdir <5>:                             FTP Objects.        (line  111)
* mkfifo:                                Filesystem Utilities.
                                                             (line  168)
* mkfifo <1>:                            Filesystem Utilities.
                                                             (line  169)
* mkoctfile:                             Getting Started with Oct-Files.
                                                             (line   16)
* mkoctfile <1>:                         Getting Started with Oct-Files.
                                                             (line   17)
* mkpp:                                  Polynomial Interpolation.
                                                             (line  344)
* mkpp <1>:                              Polynomial Interpolation.
                                                             (line  345)
* mkstemp:                               Temporary Files.    (line   11)
* mkstemp <1>:                           Temporary Files.    (line   12)
* mktime:                                Timing Utilities.   (line  149)
* mldivide:                              Arithmetic Ops.     (line  132)
* mlock:                                 Function Locking.   (line   51)
* mod:                                   Utility Functions.  (line  476)
* mode:                                  Descriptive Statistics.
                                                             (line   83)
* mode <1>:                              Descriptive Statistics.
                                                             (line   84)
* mode <2>:                              Descriptive Statistics.
                                                             (line   85)
* moment:                                Descriptive Statistics.
                                                             (line  415)
* moment <1>:                            Descriptive Statistics.
                                                             (line  416)
* moment <2>:                            Descriptive Statistics.
                                                             (line  417)
* moment <3>:                            Descriptive Statistics.
                                                             (line  418)
* moment <4>:                            Descriptive Statistics.
                                                             (line  419)
* more:                                  Paging Screen Output.
                                                             (line   27)
* more <1>:                              Paging Screen Output.
                                                             (line   28)
* more <2>:                              Paging Screen Output.
                                                             (line   29)
* movefile:                              Filesystem Utilities.
                                                             (line   11)
* movefile <1>:                          Filesystem Utilities.
                                                             (line   12)
* movefile <2>:                          Filesystem Utilities.
                                                             (line   13)
* movefile <3>:                          Filesystem Utilities.
                                                             (line   14)
* movefile <4>:                          Filesystem Utilities.
                                                             (line   15)
* movefile <5>:                          Filesystem Utilities.
                                                             (line   16)
* movefile <6>:                          Filesystem Utilities.
                                                             (line   17)
* movegui:                               GUI Utility Functions.
                                                             (line   86)
* movegui <1>:                           GUI Utility Functions.
                                                             (line   87)
* movegui <2>:                           GUI Utility Functions.
                                                             (line   88)
* movegui <3>:                           GUI Utility Functions.
                                                             (line   89)
* movegui <4>:                           GUI Utility Functions.
                                                             (line   90)
* movegui <5>:                           GUI Utility Functions.
                                                             (line   91)
* movfun:                                Statistics on Sliding Windows of Data.
                                                             (line   13)
* movfun <1>:                            Statistics on Sliding Windows of Data.
                                                             (line   14)
* movfun <2>:                            Statistics on Sliding Windows of Data.
                                                             (line   15)
* movie:                                 Representing Images.
                                                             (line  167)
* movie <1>:                             Representing Images.
                                                             (line  168)
* movie <2>:                             Representing Images.
                                                             (line  169)
* movie <3>:                             Representing Images.
                                                             (line  170)
* movmad:                                Statistics on Sliding Windows of Data.
                                                             (line  182)
* movmad <1>:                            Statistics on Sliding Windows of Data.
                                                             (line  183)
* movmad <2>:                            Statistics on Sliding Windows of Data.
                                                             (line  184)
* movmad <3>:                            Statistics on Sliding Windows of Data.
                                                             (line  185)
* movmad <4>:                            Statistics on Sliding Windows of Data.
                                                             (line  186)
* movmax:                                Statistics on Sliding Windows of Data.
                                                             (line  283)
* movmax <1>:                            Statistics on Sliding Windows of Data.
                                                             (line  284)
* movmax <2>:                            Statistics on Sliding Windows of Data.
                                                             (line  285)
* movmax <3>:                            Statistics on Sliding Windows of Data.
                                                             (line  286)
* movmax <4>:                            Statistics on Sliding Windows of Data.
                                                             (line  287)
* movmean:                               Statistics on Sliding Windows of Data.
                                                             (line  384)
* movmean <1>:                           Statistics on Sliding Windows of Data.
                                                             (line  385)
* movmean <2>:                           Statistics on Sliding Windows of Data.
                                                             (line  386)
* movmean <3>:                           Statistics on Sliding Windows of Data.
                                                             (line  387)
* movmean <4>:                           Statistics on Sliding Windows of Data.
                                                             (line  388)
* movmedian:                             Statistics on Sliding Windows of Data.
                                                             (line  485)
* movmedian <1>:                         Statistics on Sliding Windows of Data.
                                                             (line  486)
* movmedian <2>:                         Statistics on Sliding Windows of Data.
                                                             (line  487)
* movmedian <3>:                         Statistics on Sliding Windows of Data.
                                                             (line  488)
* movmedian <4>:                         Statistics on Sliding Windows of Data.
                                                             (line  489)
* movmin:                                Statistics on Sliding Windows of Data.
                                                             (line  589)
* movmin <1>:                            Statistics on Sliding Windows of Data.
                                                             (line  590)
* movmin <2>:                            Statistics on Sliding Windows of Data.
                                                             (line  591)
* movmin <3>:                            Statistics on Sliding Windows of Data.
                                                             (line  592)
* movmin <4>:                            Statistics on Sliding Windows of Data.
                                                             (line  593)
* movprod:                               Statistics on Sliding Windows of Data.
                                                             (line  690)
* movprod <1>:                           Statistics on Sliding Windows of Data.
                                                             (line  691)
* movprod <2>:                           Statistics on Sliding Windows of Data.
                                                             (line  692)
* movprod <3>:                           Statistics on Sliding Windows of Data.
                                                             (line  693)
* movprod <4>:                           Statistics on Sliding Windows of Data.
                                                             (line  694)
* movslice:                              Statistics on Sliding Windows of Data.
                                                             (line  146)
* movslice <1>:                          Statistics on Sliding Windows of Data.
                                                             (line  147)
* movstd:                                Statistics on Sliding Windows of Data.
                                                             (line  791)
* movstd <1>:                            Statistics on Sliding Windows of Data.
                                                             (line  792)
* movstd <2>:                            Statistics on Sliding Windows of Data.
                                                             (line  793)
* movstd <3>:                            Statistics on Sliding Windows of Data.
                                                             (line  794)
* movstd <4>:                            Statistics on Sliding Windows of Data.
                                                             (line  795)
* movstd <5>:                            Statistics on Sliding Windows of Data.
                                                             (line  796)
* movsum:                                Statistics on Sliding Windows of Data.
                                                             (line  905)
* movsum <1>:                            Statistics on Sliding Windows of Data.
                                                             (line  906)
* movsum <2>:                            Statistics on Sliding Windows of Data.
                                                             (line  907)
* movsum <3>:                            Statistics on Sliding Windows of Data.
                                                             (line  908)
* movsum <4>:                            Statistics on Sliding Windows of Data.
                                                             (line  909)
* movvar:                                Statistics on Sliding Windows of Data.
                                                             (line 1006)
* movvar <1>:                            Statistics on Sliding Windows of Data.
                                                             (line 1007)
* movvar <2>:                            Statistics on Sliding Windows of Data.
                                                             (line 1008)
* movvar <3>:                            Statistics on Sliding Windows of Data.
                                                             (line 1009)
* movvar <4>:                            Statistics on Sliding Windows of Data.
                                                             (line 1010)
* movvar <5>:                            Statistics on Sliding Windows of Data.
                                                             (line 1011)
* mpoles:                                Finding Roots.      (line   76)
* mpoles <1>:                            Finding Roots.      (line   77)
* mpoles <2>:                            Finding Roots.      (line   78)
* mpower:                                Arithmetic Ops.     (line  143)
* mput:                                  FTP Objects.        (line   55)
* mrdivide:                              Arithmetic Ops.     (line  151)
* msgbox:                                I/O Dialogs.        (line  305)
* msgbox <1>:                            I/O Dialogs.        (line  306)
* msgbox <2>:                            I/O Dialogs.        (line  307)
* msgbox <3>:                            I/O Dialogs.        (line  308)
* msgbox <4>:                            I/O Dialogs.        (line  309)
* msgbox <5>:                            I/O Dialogs.        (line  310)
* mtimes:                                Arithmetic Ops.     (line  162)
* mtimes <1>:                            Arithmetic Ops.     (line  163)
* mu2lin:                                Audio Data Processing.
                                                             (line   39)
* munlock:                               Function Locking.   (line   59)
* munlock <1>:                           Function Locking.   (line   60)
* mustBeFinite:                          Validating the type of Arguments.
                                                             (line  197)
* mustBeGreaterThan:                     Validating the type of Arguments.
                                                             (line  207)
* mustBeGreaterThanOrEqual:              Validating the type of Arguments.
                                                             (line  218)
* mustBeInteger:                         Validating the type of Arguments.
                                                             (line  228)
* mustBeLessThan:                        Validating the type of Arguments.
                                                             (line  238)
* mustBeLessThanOrEqual:                 Validating the type of Arguments.
                                                             (line  248)
* mustBeMember:                          Validating the type of Arguments.
                                                             (line  259)
* mustBeNegative:                        Validating the type of Arguments.
                                                             (line  275)
* mustBeNonempty:                        Validating the type of Arguments.
                                                             (line  284)
* mustBeNonNan:                          Validating the type of Arguments.
                                                             (line  294)
* mustBeNonnegative:                     Validating the type of Arguments.
                                                             (line  304)
* mustBeNonpositive:                     Validating the type of Arguments.
                                                             (line  314)
* mustBeNonsparse:                       Validating the type of Arguments.
                                                             (line  324)
* mustBeNonzero:                         Validating the type of Arguments.
                                                             (line  333)
* mustBeNumeric:                         Validating the type of Arguments.
                                                             (line  343)
* mustBeNumericOrLogical:                Validating the type of Arguments.
                                                             (line  353)
* mustBePositive:                        Validating the type of Arguments.
                                                             (line  363)
* mustBeReal:                            Validating the type of Arguments.
                                                             (line  373)
* NA:                                    Missing Data.       (line   11)
* NA <1>:                                Missing Data.       (line   12)
* NA <2>:                                Missing Data.       (line   13)
* NA <3>:                                Missing Data.       (line   14)
* NA <4>:                                Missing Data.       (line   15)
* NA <5>:                                Missing Data.       (line   16)
* namedargs2cell:                        Processing Data in Structures.
                                                             (line   44)
* namelengthmax:                         Variables.          (line  134)
* nan:                                   Mathematical Constants.
                                                             (line  114)
* NaN:                                   Mathematical Constants.
                                                             (line  114)
* NaN <1>:                               Mathematical Constants.
                                                             (line  115)
* NaN <2>:                               Mathematical Constants.
                                                             (line  116)
* NaN <3>:                               Mathematical Constants.
                                                             (line  117)
* NaN <4>:                               Mathematical Constants.
                                                             (line  118)
* NaN <5>:                               Mathematical Constants.
                                                             (line  119)
* nargin:                                Defining Functions. (line  145)
* nargin <1>:                            Defining Functions. (line  146)
* narginchk:                             Validating the number of Arguments.
                                                             (line   18)
* nargout:                               Multiple Return Values.
                                                             (line  115)
* nargout <1>:                           Multiple Return Values.
                                                             (line  116)
* nargoutchk:                            Validating the number of Arguments.
                                                             (line   34)
* nargoutchk <1>:                        Validating the number of Arguments.
                                                             (line   35)
* nargoutchk <2>:                        Validating the number of Arguments.
                                                             (line   36)
* nargoutchk <3>:                        Validating the number of Arguments.
                                                             (line   37)
* native2unicode:                        String encoding.    (line   24)
* native2unicode <1>:                    String encoding.    (line   25)
* native_float_format:                   Simple File I/O.    (line  347)
* nchoosek:                              Basic Statistical Functions.
                                                             (line   81)
* nchoosek <1>:                          Basic Statistical Functions.
                                                             (line   82)
* ndgrid:                                Three-Dimensional Plots.
                                                             (line 1083)
* ndgrid <1>:                            Three-Dimensional Plots.
                                                             (line 1084)
* ndims:                                 Object Sizes.       (line   12)
* ndims <1>:                             Matrices and Arrays in Oct-Files.
                                                             (line   99)
* ne:                                    Comparison Ops.     (line   98)
* newline:                               Concatenating Strings.
                                                             (line   22)
* newplot:                               Manipulation of Plot Windows.
                                                             (line   56)
* newplot <1>:                           Manipulation of Plot Windows.
                                                             (line   57)
* newplot <2>:                           Manipulation of Plot Windows.
                                                             (line   58)
* newplot <3>:                           Manipulation of Plot Windows.
                                                             (line   59)
* news:                                  Getting Help.       (line   94)
* news <1>:                              Getting Help.       (line   95)
* nextpow2:                              Exponents and Logarithms.
                                                             (line   70)
* nnz:                                   Information.        (line   26)
* nonzeros:                              Information.        (line   32)
* norm:                                  Basic Matrix Functions.
                                                             (line  414)
* norm <1>:                              Basic Matrix Functions.
                                                             (line  415)
* norm <2>:                              Basic Matrix Functions.
                                                             (line  416)
* normest:                               Sparse Linear Algebra.
                                                             (line   89)
* normest <1>:                           Sparse Linear Algebra.
                                                             (line   90)
* normest <2>:                           Sparse Linear Algebra.
                                                             (line   91)
* normest1:                              Sparse Linear Algebra.
                                                             (line  107)
* normest1 <1>:                          Sparse Linear Algebra.
                                                             (line  108)
* normest1 <2>:                          Sparse Linear Algebra.
                                                             (line  109)
* normest1 <3>:                          Sparse Linear Algebra.
                                                             (line  110)
* normest1 <4>:                          Sparse Linear Algebra.
                                                             (line  111)
* normest1 <5>:                          Sparse Linear Algebra.
                                                             (line  112)
* normest1 <6>:                          Sparse Linear Algebra.
                                                             (line  113)
* not:                                   Element-by-element Boolean Operators.
                                                             (line   77)
* now:                                   Timing Utilities.   (line   65)
* nproc:                                 System Information. (line   57)
* nproc <1>:                             System Information. (line   58)
* nthargout:                             Multiple Return Values.
                                                             (line   45)
* nthargout <1>:                         Multiple Return Values.
                                                             (line   46)
* nthroot:                               Exponents and Logarithms.
                                                             (line  115)
* nth_element:                           Rearranging Matrices.
                                                             (line  468)
* nth_element <1>:                       Rearranging Matrices.
                                                             (line  469)
* null:                                  Basic Matrix Functions.
                                                             (line  468)
* null <1>:                              Basic Matrix Functions.
                                                             (line  469)
* num2cell:                              Creating Cell Arrays.
                                                             (line   62)
* num2cell <1>:                          Creating Cell Arrays.
                                                             (line   63)
* num2hex:                               Numerical Data and Strings.
                                                             (line  354)
* num2hex <1>:                           Numerical Data and Strings.
                                                             (line  355)
* num2str:                               Numerical Data and Strings.
                                                             (line   50)
* num2str <1>:                           Numerical Data and Strings.
                                                             (line   51)
* num2str <2>:                           Numerical Data and Strings.
                                                             (line   52)
* numel:                                 Object Sizes.       (line   41)
* numel <1>:                             Object Sizes.       (line   42)
* numel <2>:                             Matrices and Arrays in Oct-Files.
                                                             (line   89)
* numfields:                             Manipulating Structures.
                                                             (line    9)
* nzmax:                                 Information.        (line   37)
* ocean:                                 Representing Images.
                                                             (line  492)
* ocean <1>:                             Representing Images.
                                                             (line  493)
* octave_core_file_limit:                Saving Data on Unexpected Exits.
                                                             (line   84)
* octave_core_file_limit <1>:            Saving Data on Unexpected Exits.
                                                             (line   85)
* octave_core_file_limit <2>:            Saving Data on Unexpected Exits.
                                                             (line   86)
* octave_core_file_name:                 Saving Data on Unexpected Exits.
                                                             (line  110)
* octave_core_file_name <1>:             Saving Data on Unexpected Exits.
                                                             (line  111)
* octave_core_file_name <2>:             Saving Data on Unexpected Exits.
                                                             (line  112)
* octave_core_file_options:              Saving Data on Unexpected Exits.
                                                             (line   64)
* octave_core_file_options <1>:          Saving Data on Unexpected Exits.
                                                             (line   65)
* octave_core_file_options <2>:          Saving Data on Unexpected Exits.
                                                             (line   66)
* OCTAVE_EXEC_HOME:                      System Information. (line  119)
* OCTAVE_HOME:                           System Information. (line  112)
* OCTAVE_VERSION:                        System Information. (line  146)
* ode15i:                                Matlab-compatible solvers.
                                                             (line  314)
* ode15i <1>:                            Matlab-compatible solvers.
                                                             (line  315)
* ode15i <2>:                            Matlab-compatible solvers.
                                                             (line  316)
* ode15i <3>:                            Matlab-compatible solvers.
                                                             (line  317)
* ode15i <4>:                            Matlab-compatible solvers.
                                                             (line  318)
* ode15s:                                Matlab-compatible solvers.
                                                             (line  249)
* ode15s <1>:                            Matlab-compatible solvers.
                                                             (line  250)
* ode15s <2>:                            Matlab-compatible solvers.
                                                             (line  251)
* ode15s <3>:                            Matlab-compatible solvers.
                                                             (line  252)
* ode15s <4>:                            Matlab-compatible solvers.
                                                             (line  253)
* ode23:                                 Matlab-compatible solvers.
                                                             (line  116)
* ode23 <1>:                             Matlab-compatible solvers.
                                                             (line  117)
* ode23 <2>:                             Matlab-compatible solvers.
                                                             (line  118)
* ode23 <3>:                             Matlab-compatible solvers.
                                                             (line  119)
* ode23 <4>:                             Matlab-compatible solvers.
                                                             (line  120)
* ode23s:                                Matlab-compatible solvers.
                                                             (line  182)
* ode23s <1>:                            Matlab-compatible solvers.
                                                             (line  183)
* ode23s <2>:                            Matlab-compatible solvers.
                                                             (line  184)
* ode23s <3>:                            Matlab-compatible solvers.
                                                             (line  185)
* ode23s <4>:                            Matlab-compatible solvers.
                                                             (line  186)
* ode45:                                 Matlab-compatible solvers.
                                                             (line   53)
* ode45 <1>:                             Matlab-compatible solvers.
                                                             (line   54)
* ode45 <2>:                             Matlab-compatible solvers.
                                                             (line   55)
* ode45 <3>:                             Matlab-compatible solvers.
                                                             (line   56)
* ode45 <4>:                             Matlab-compatible solvers.
                                                             (line   57)
* odeget:                                Matlab-compatible solvers.
                                                             (line  567)
* odeget <1>:                            Matlab-compatible solvers.
                                                             (line  568)
* odeplot:                               Matlab-compatible solvers.
                                                             (line  584)
* odeset:                                Matlab-compatible solvers.
                                                             (line  444)
* odeset <1>:                            Matlab-compatible solvers.
                                                             (line  445)
* odeset <2>:                            Matlab-compatible solvers.
                                                             (line  446)
* odeset <3>:                            Matlab-compatible solvers.
                                                             (line  448)
* odeset <4>:                            Matlab-compatible solvers.
                                                             (line  449)
* ols:                                   Linear Least Squares.
                                                             (line   13)
* onCleanup:                             Recovering From Errors.
                                                             (line   28)
* ones:                                  Special Utility Matrices.
                                                             (line   45)
* ones <1>:                              Special Utility Matrices.
                                                             (line   46)
* ones <2>:                              Special Utility Matrices.
                                                             (line   47)
* ones <3>:                              Special Utility Matrices.
                                                             (line   48)
* ones <4>:                              Special Utility Matrices.
                                                             (line   49)
* ones <5>:                              Special Utility Matrices.
                                                             (line   50)
* open:                                  Controlling Subprocesses.
                                                             (line   95)
* open <1>:                              Controlling Subprocesses.
                                                             (line   96)
* openfig:                               Printing and Saving Plots.
                                                             (line  575)
* openfig <1>:                           Printing and Saving Plots.
                                                             (line  576)
* openfig <2>:                           Printing and Saving Plots.
                                                             (line  577)
* openfig <3>:                           Printing and Saving Plots.
                                                             (line  578)
* openfig <4>:                           Printing and Saving Plots.
                                                             (line  579)
* openvar:                               GUI Utility Functions.
                                                             (line  147)
* operator:                              Matrices and Arrays in Oct-Files.
                                                             (line   76)
* optimget:                              Linear Least Squares.
                                                             (line  257)
* optimget <1>:                          Linear Least Squares.
                                                             (line  258)
* optimize_diagonal_matrix:              Basic Usage.        (line   24)
* optimize_diagonal_matrix <1>:          Basic Usage.        (line   25)
* optimize_diagonal_matrix <2>:          Basic Usage.        (line   26)
* optimize_permutation_matrix:           Basic Usage.        (line   40)
* optimize_permutation_matrix <1>:       Basic Usage.        (line   41)
* optimize_permutation_matrix <2>:       Basic Usage.        (line   42)
* optimize_range:                        Ranges.             (line   44)
* optimize_range <1>:                    Ranges.             (line   45)
* optimize_range <2>:                    Ranges.             (line   46)
* optimize_subsasgn_calls:               Defining Indexing And Indexed Assignment.
                                                             (line  125)
* optimize_subsasgn_calls <1>:           Defining Indexing And Indexed Assignment.
                                                             (line  126)
* optimize_subsasgn_calls <2>:           Defining Indexing And Indexed Assignment.
                                                             (line  127)
* optimset:                              Linear Least Squares.
                                                             (line  164)
* optimset <1>:                          Linear Least Squares.
                                                             (line  165)
* optimset <2>:                          Linear Least Squares.
                                                             (line  166)
* optimset <3>:                          Linear Least Squares.
                                                             (line  167)
* optimset <4>:                          Linear Least Squares.
                                                             (line  168)
* or:                                    Element-by-element Boolean Operators.
                                                             (line   84)
* or <1>:                                Element-by-element Boolean Operators.
                                                             (line   85)
* ordeig:                                Matrix Factorizations.
                                                             (line  747)
* ordeig <1>:                            Matrix Factorizations.
                                                             (line  748)
* orderfields:                           Manipulating Structures.
                                                             (line  148)
* orderfields <1>:                       Manipulating Structures.
                                                             (line  149)
* orderfields <2>:                       Manipulating Structures.
                                                             (line  150)
* orderfields <3>:                       Manipulating Structures.
                                                             (line  151)
* orderfields <4>:                       Manipulating Structures.
                                                             (line  152)
* ordqz:                                 Matrix Factorizations.
                                                             (line  693)
* ordqz <1>:                             Matrix Factorizations.
                                                             (line  694)
* ordschur:                              Matrix Factorizations.
                                                             (line  659)
* orient:                                Printing and Saving Plots.
                                                             (line  486)
* orient <1>:                            Printing and Saving Plots.
                                                             (line  487)
* orient <2>:                            Printing and Saving Plots.
                                                             (line  488)
* orient <3>:                            Printing and Saving Plots.
                                                             (line  489)
* orth:                                  Basic Matrix Functions.
                                                             (line  480)
* orth <1>:                              Basic Matrix Functions.
                                                             (line  481)
* oruntests:                             Demonstration Functions.
                                                             (line   89)
* oruntests <1>:                         Demonstration Functions.
                                                             (line   90)
* ostreamtube:                           Two-Dimensional Plots.
                                                             (line 1625)
* ostreamtube <1>:                       Two-Dimensional Plots.
                                                             (line 1626)
* ostreamtube <2>:                       Two-Dimensional Plots.
                                                             (line 1627)
* ostreamtube <3>:                       Two-Dimensional Plots.
                                                             (line 1628)
* ostreamtube <4>:                       Two-Dimensional Plots.
                                                             (line 1629)
* ostreamtube <5>:                       Two-Dimensional Plots.
                                                             (line 1630)
* ostrsplit:                             Splitting and Joining Strings.
                                                             (line  165)
* ostrsplit <1>:                         Splitting and Joining Strings.
                                                             (line  166)
* output_precision:                      Matrices.           (line  131)
* output_precision <1>:                  Matrices.           (line  132)
* output_precision <2>:                  Matrices.           (line  133)
* pack:                                  Status of Variables.
                                                             (line  408)
* padecoef:                              Polynomial Interpolation.
                                                             (line  286)
* padecoef <1>:                          Polynomial Interpolation.
                                                             (line  287)
* PAGER:                                 Paging Screen Output.
                                                             (line   40)
* PAGER <1>:                             Paging Screen Output.
                                                             (line   41)
* PAGER <2>:                             Paging Screen Output.
                                                             (line   42)
* PAGER_FLAGS:                           Paging Screen Output.
                                                             (line   58)
* PAGER_FLAGS <1>:                       Paging Screen Output.
                                                             (line   59)
* PAGER_FLAGS <2>:                       Paging Screen Output.
                                                             (line   60)
* page_output_immediately:               Paging Screen Output.
                                                             (line   93)
* page_output_immediately <1>:           Paging Screen Output.
                                                             (line   94)
* page_output_immediately <2>:           Paging Screen Output.
                                                             (line   95)
* page_screen_output:                    Paging Screen Output.
                                                             (line   73)
* page_screen_output <1>:                Paging Screen Output.
                                                             (line   74)
* page_screen_output <2>:                Paging Screen Output.
                                                             (line   75)
* pan:                                   Manipulation of Plot Objects.
                                                             (line    6)
* pan <1>:                               Manipulation of Plot Objects.
                                                             (line    7)
* pan <2>:                               Manipulation of Plot Objects.
                                                             (line    8)
* pan <3>:                               Manipulation of Plot Objects.
                                                             (line    9)
* pan <4>:                               Manipulation of Plot Objects.
                                                             (line   10)
* pan <5>:                               Manipulation of Plot Objects.
                                                             (line   11)
* pareto:                                Two-Dimensional Plots.
                                                             (line  831)
* pareto <1>:                            Two-Dimensional Plots.
                                                             (line  832)
* pareto <2>:                            Two-Dimensional Plots.
                                                             (line  833)
* pareto <3>:                            Two-Dimensional Plots.
                                                             (line  834)
* parseparams:                           Variable-length Argument Lists.
                                                             (line   63)
* parseparams <1>:                       Variable-length Argument Lists.
                                                             (line   64)
* pascal:                                Famous Matrices.    (line  390)
* pascal <1>:                            Famous Matrices.    (line  391)
* patch:                                 Graphics Objects.   (line  134)
* patch <1>:                             Graphics Objects.   (line  135)
* patch <2>:                             Graphics Objects.   (line  136)
* patch <3>:                             Graphics Objects.   (line  137)
* patch <4>:                             Graphics Objects.   (line  138)
* patch <5>:                             Graphics Objects.   (line  139)
* patch <6>:                             Graphics Objects.   (line  140)
* patch <7>:                             Graphics Objects.   (line  141)
* path:                                  Manipulating the Load Path.
                                                             (line  105)
* path <1>:                              Manipulating the Load Path.
                                                             (line  106)
* path <2>:                              Manipulating the Load Path.
                                                             (line  107)
* pathdef:                               Manipulating the Load Path.
                                                             (line  126)
* pathsep:                               Manipulating the Load Path.
                                                             (line  144)
* pause:                                 Playback.           (line   29)
* pause <1>:                             Recording.          (line   20)
* pause <2>:                             Timing Utilities.   (line  483)
* pause <3>:                             Timing Utilities.   (line  484)
* pause <4>:                             Timing Utilities.   (line  485)
* pause <5>:                             Timing Utilities.   (line  486)
* pause <6>:                             Timing Utilities.   (line  487)
* pbaspect:                              Aspect Ratio.       (line   36)
* pbaspect <1>:                          Aspect Ratio.       (line   37)
* pbaspect <2>:                          Aspect Ratio.       (line   38)
* pbaspect <3>:                          Aspect Ratio.       (line   39)
* pbaspect <4>:                          Aspect Ratio.       (line   40)
* pcg:                                   Iterative Techniques.
                                                             (line   11)
* pcg <1>:                               Iterative Techniques.
                                                             (line   12)
* pcg <2>:                               Iterative Techniques.
                                                             (line   13)
* pchip:                                 Signal Processing.  (line  608)
* pchip <1>:                             Signal Processing.  (line  609)
* pclose:                                Controlling Subprocesses.
                                                             (line  191)
* pcolor:                                Two-Dimensional Plots.
                                                             (line 1828)
* pcolor <1>:                            Two-Dimensional Plots.
                                                             (line 1829)
* pcolor <2>:                            Two-Dimensional Plots.
                                                             (line 1830)
* pcolor <3>:                            Two-Dimensional Plots.
                                                             (line 1831)
* pcr:                                   Iterative Techniques.
                                                             (line  193)
* pcr <1>:                               Iterative Techniques.
                                                             (line  194)
* peaks:                                 Test Plotting Functions.
                                                             (line   33)
* peaks <1>:                             Test Plotting Functions.
                                                             (line   34)
* peaks <2>:                             Test Plotting Functions.
                                                             (line   35)
* peaks <3>:                             Test Plotting Functions.
                                                             (line   36)
* peaks <4>:                             Test Plotting Functions.
                                                             (line   37)
* periodogram:                           Signal Processing.  (line  635)
* periodogram <1>:                       Signal Processing.  (line  636)
* periodogram <2>:                       Signal Processing.  (line  637)
* periodogram <3>:                       Signal Processing.  (line  638)
* periodogram <4>:                       Signal Processing.  (line  639)
* periodogram <5>:                       Signal Processing.  (line  640)
* perl:                                  Controlling Subprocesses.
                                                             (line  137)
* perl <1>:                              Controlling Subprocesses.
                                                             (line  138)
* perl <2>:                              Controlling Subprocesses.
                                                             (line  139)
* perms:                                 Basic Statistical Functions.
                                                             (line  126)
* permute:                               Rearranging Matrices.
                                                             (line  183)
* pi:                                    Mathematical Constants.
                                                             (line   31)
* pi <1>:                                Mathematical Constants.
                                                             (line   32)
* pi <2>:                                Mathematical Constants.
                                                             (line   33)
* pi <3>:                                Mathematical Constants.
                                                             (line   34)
* pi <4>:                                Mathematical Constants.
                                                             (line   35)
* pie:                                   Two-Dimensional Plots.
                                                             (line 1365)
* pie <1>:                               Two-Dimensional Plots.
                                                             (line 1366)
* pie <2>:                               Two-Dimensional Plots.
                                                             (line 1367)
* pie <3>:                               Two-Dimensional Plots.
                                                             (line 1368)
* pie <4>:                               Two-Dimensional Plots.
                                                             (line 1369)
* pie3:                                  Two-Dimensional Plots.
                                                             (line 1398)
* pie3 <1>:                              Two-Dimensional Plots.
                                                             (line 1399)
* pie3 <2>:                              Two-Dimensional Plots.
                                                             (line 1400)
* pie3 <3>:                              Two-Dimensional Plots.
                                                             (line 1401)
* pie3 <4>:                              Two-Dimensional Plots.
                                                             (line 1402)
* pink:                                  Representing Images.
                                                             (line  502)
* pink <1>:                              Representing Images.
                                                             (line  503)
* pinv:                                  Basic Matrix Functions.
                                                             (line  503)
* pinv <1>:                              Basic Matrix Functions.
                                                             (line  504)
* pipe:                                  Controlling Subprocesses.
                                                             (line  299)
* pkg:                                   Packages.           (line   22)
* pkg <1>:                               Installing and Removing Packages.
                                                             (line   57)
* pkg <2>:                               Installing and Removing Packages.
                                                             (line   58)
* pkg <3>:                               Installing and Removing Packages.
                                                             (line   59)
* planerot:                              Basic Matrix Functions.
                                                             (line  238)
* play:                                  Playback.           (line    8)
* play <1>:                              Playback.           (line    9)
* play <2>:                              Playback.           (line   10)
* play <3>:                              Data Retrieval.     (line   22)
* play <4>:                              Data Retrieval.     (line   23)
* play <5>:                              Data Retrieval.     (line   24)
* playblocking:                          Playback.           (line   19)
* playblocking <1>:                      Playback.           (line   20)
* playblocking <2>:                      Playback.           (line   21)
* plot:                                  Two-Dimensional Plots.
                                                             (line   30)
* plot <1>:                              Two-Dimensional Plots.
                                                             (line   31)
* plot <2>:                              Two-Dimensional Plots.
                                                             (line   32)
* plot <3>:                              Two-Dimensional Plots.
                                                             (line   33)
* plot <4>:                              Two-Dimensional Plots.
                                                             (line   34)
* plot <5>:                              Two-Dimensional Plots.
                                                             (line   35)
* plot <6>:                              Two-Dimensional Plots.
                                                             (line   36)
* plot3:                                 Three-Dimensional Plots.
                                                             (line 1103)
* plot3 <1>:                             Three-Dimensional Plots.
                                                             (line 1104)
* plot3 <2>:                             Three-Dimensional Plots.
                                                             (line 1105)
* plot3 <3>:                             Three-Dimensional Plots.
                                                             (line 1106)
* plot3 <4>:                             Three-Dimensional Plots.
                                                             (line 1107)
* plot3 <5>:                             Three-Dimensional Plots.
                                                             (line 1108)
* plot3 <6>:                             Three-Dimensional Plots.
                                                             (line 1109)
* plotmatrix:                            Two-Dimensional Plots.
                                                             (line  789)
* plotmatrix <1>:                        Two-Dimensional Plots.
                                                             (line  790)
* plotmatrix <2>:                        Two-Dimensional Plots.
                                                             (line  791)
* plotmatrix <3>:                        Two-Dimensional Plots.
                                                             (line  792)
* plotmatrix <4>:                        Two-Dimensional Plots.
                                                             (line  793)
* plotyy:                                Two-Dimensional Plots.
                                                             (line  195)
* plotyy <1>:                            Two-Dimensional Plots.
                                                             (line  196)
* plotyy <2>:                            Two-Dimensional Plots.
                                                             (line  197)
* plotyy <3>:                            Two-Dimensional Plots.
                                                             (line  198)
* plotyy <4>:                            Two-Dimensional Plots.
                                                             (line  199)
* plus:                                  Arithmetic Ops.     (line  177)
* plus <1>:                              Arithmetic Ops.     (line  178)
* pol2cart:                              Coordinate Transformations.
                                                             (line   41)
* pol2cart <1>:                          Coordinate Transformations.
                                                             (line   42)
* pol2cart <2>:                          Coordinate Transformations.
                                                             (line   43)
* pol2cart <3>:                          Coordinate Transformations.
                                                             (line   44)
* polar:                                 Two-Dimensional Plots.
                                                             (line 1327)
* polar <1>:                             Two-Dimensional Plots.
                                                             (line 1328)
* polar <2>:                             Two-Dimensional Plots.
                                                             (line 1329)
* polar <3>:                             Two-Dimensional Plots.
                                                             (line 1330)
* polar <4>:                             Two-Dimensional Plots.
                                                             (line 1331)
* polar <5>:                             Two-Dimensional Plots.
                                                             (line 1332)
* poly:                                  Miscellaneous Functions.
                                                             (line    6)
* poly <1>:                              Miscellaneous Functions.
                                                             (line    7)
* polyaffine:                            Derivatives / Integrals / Transforms.
                                                             (line   42)
* polyarea:                              Voronoi Diagrams.   (line   96)
* polyarea <1>:                          Voronoi Diagrams.   (line   97)
* polyder:                               Derivatives / Integrals / Transforms.
                                                             (line   16)
* polyder <1>:                           Derivatives / Integrals / Transforms.
                                                             (line   17)
* polyder <2>:                           Derivatives / Integrals / Transforms.
                                                             (line   18)
* polyeig:                               Finding Roots.      (line   35)
* polyeig <1>:                           Finding Roots.      (line   36)
* polyfit:                               Polynomial Interpolation.
                                                             (line   15)
* polyfit <1>:                           Polynomial Interpolation.
                                                             (line   16)
* polyfit <2>:                           Polynomial Interpolation.
                                                             (line   17)
* polygcd:                               Products of Polynomials.
                                                             (line   92)
* polygcd <1>:                           Products of Polynomials.
                                                             (line   93)
* polyint:                               Derivatives / Integrals / Transforms.
                                                             (line   32)
* polyint <1>:                           Derivatives / Integrals / Transforms.
                                                             (line   33)
* polyout:                               Miscellaneous Functions.
                                                             (line   32)
* polyout <1>:                           Miscellaneous Functions.
                                                             (line   33)
* polyout <2>:                           Miscellaneous Functions.
                                                             (line   34)
* polyreduce:                            Miscellaneous Functions.
                                                             (line   49)
* polyval:                               Evaluating Polynomials.
                                                             (line   23)
* polyval <1>:                           Evaluating Polynomials.
                                                             (line   24)
* polyval <2>:                           Evaluating Polynomials.
                                                             (line   25)
* polyval <3>:                           Evaluating Polynomials.
                                                             (line   26)
* polyvalm:                              Evaluating Polynomials.
                                                             (line   46)
* popen:                                 Controlling Subprocesses.
                                                             (line  161)
* popen2:                                Controlling Subprocesses.
                                                             (line  198)
* postpad:                               Rearranging Matrices.
                                                             (line  611)
* postpad <1>:                           Rearranging Matrices.
                                                             (line  612)
* postpad <2>:                           Rearranging Matrices.
                                                             (line  613)
* pow2:                                  Exponents and Logarithms.
                                                             (line   61)
* pow2 <1>:                              Exponents and Logarithms.
                                                             (line   62)
* power:                                 Arithmetic Ops.     (line  188)
* powerset:                              Set Operations.     (line  186)
* powerset <1>:                          Set Operations.     (line  187)
* ppder:                                 Polynomial Interpolation.
                                                             (line  430)
* ppder <1>:                             Polynomial Interpolation.
                                                             (line  431)
* ppint:                                 Polynomial Interpolation.
                                                             (line  440)
* ppint <1>:                             Polynomial Interpolation.
                                                             (line  441)
* ppjumps:                               Polynomial Interpolation.
                                                             (line  449)
* ppval:                                 Polynomial Interpolation.
                                                             (line  419)
* pqpnonneg:                             Quadratic Programming.
                                                             (line   87)
* pqpnonneg <1>:                         Quadratic Programming.
                                                             (line   88)
* pqpnonneg <2>:                         Quadratic Programming.
                                                             (line   89)
* pqpnonneg <3>:                         Quadratic Programming.
                                                             (line   90)
* pqpnonneg <4>:                         Quadratic Programming.
                                                             (line   91)
* pqpnonneg <5>:                         Quadratic Programming.
                                                             (line   92)
* pqpnonneg <6>:                         Quadratic Programming.
                                                             (line   93)
* prctile:                               Descriptive Statistics.
                                                             (line  539)
* prctile <1>:                           Descriptive Statistics.
                                                             (line  540)
* prctile <2>:                           Descriptive Statistics.
                                                             (line  541)
* prefdir:                               User-Defined Preferences.
                                                             (line  106)
* prefdir <1>:                           User-Defined Preferences.
                                                             (line  107)
* prefdir <2>:                           User-Defined Preferences.
                                                             (line  108)
* preferences:                           User-Defined Preferences.
                                                             (line  128)
* prepad:                                Rearranging Matrices.
                                                             (line  591)
* prepad <1>:                            Rearranging Matrices.
                                                             (line  592)
* prepad <2>:                            Rearranging Matrices.
                                                             (line  593)
* primes:                                Utility Functions.  (line  508)
* print:                                 Printing and Saving Plots.
                                                             (line   57)
* print <1>:                             Printing and Saving Plots.
                                                             (line   58)
* print <2>:                             Printing and Saving Plots.
                                                             (line   59)
* print <3>:                             Printing and Saving Plots.
                                                             (line   60)
* print <4>:                             Printing and Saving Plots.
                                                             (line   61)
* printd:                                Two-Dimensional Plots.
                                                             (line  557)
* printd <1>:                            Two-Dimensional Plots.
                                                             (line  558)
* printf:                                Formatted Output.   (line   17)
* print_empty_dimensions:                Empty Matrices.     (line   29)
* print_empty_dimensions <1>:            Empty Matrices.     (line   30)
* print_empty_dimensions <2>:            Empty Matrices.     (line   31)
* print_struct_array_contents:           Basic Usage and Examples.
                                                             (line  121)
* print_struct_array_contents <1>:       Basic Usage and Examples.
                                                             (line  122)
* print_struct_array_contents <2>:       Basic Usage and Examples.
                                                             (line  123)
* print_usage:                           Raising Errors.     (line  136)
* print_usage <1>:                       Raising Errors.     (line  137)
* prism:                                 Representing Images.
                                                             (line  514)
* prism <1>:                             Representing Images.
                                                             (line  515)
* prod:                                  Sums and Products.  (line   42)
* prod <1>:                              Sums and Products.  (line   43)
* prod <2>:                              Sums and Products.  (line   44)
* prod <3>:                              Sums and Products.  (line   45)
* profexplore:                           Profiling.          (line  117)
* profexplore <1>:                       Profiling.          (line  118)
* profexport:                            Profiling.          (line   98)
* profexport <1>:                        Profiling.          (line   99)
* profexport <2>:                        Profiling.          (line  100)
* profexport <3>:                        Profiling.          (line  101)
* profile:                               Profiling.          (line   20)
* profile <1>:                           Profiling.          (line   21)
* profile <2>:                           Profiling.          (line   22)
* profile <3>:                           Profiling.          (line   23)
* profile <4>:                           Profiling.          (line   24)
* profile <5>:                           Profiling.          (line   25)
* profshow:                              Profiling.          (line   78)
* profshow <1>:                          Profiling.          (line   79)
* profshow <2>:                          Profiling.          (line   80)
* profshow <3>:                          Profiling.          (line   81)
* program_invocation_name:               Command Line Options.
                                                             (line  204)
* program_name:                          Command Line Options.
                                                             (line  197)
* properties:                            Properties.         (line   53)
* properties <1>:                        Properties.         (line   54)
* properties <2>:                        Properties.         (line   55)
* PS1:                                   Customizing the Prompt.
                                                             (line   56)
* PS1 <1>:                               Customizing the Prompt.
                                                             (line   57)
* PS1 <2>:                               Customizing the Prompt.
                                                             (line   58)
* PS2:                                   Customizing the Prompt.
                                                             (line   88)
* PS2 <1>:                               Customizing the Prompt.
                                                             (line   89)
* PS2 <2>:                               Customizing the Prompt.
                                                             (line   90)
* PS4:                                   Customizing the Prompt.
                                                             (line  106)
* PS4 <1>:                               Customizing the Prompt.
                                                             (line  107)
* PS4 <2>:                               Customizing the Prompt.
                                                             (line  108)
* psi:                                   Special Functions.  (line  764)
* psi <1>:                               Special Functions.  (line  765)
* publish:                               Publish Octave Script Files.
                                                             (line   13)
* publish <1>:                           Publish Octave Script Files.
                                                             (line   14)
* publish <2>:                           Publish Octave Script Files.
                                                             (line   15)
* publish <3>:                           Publish Octave Script Files.
                                                             (line   16)
* publish <4>:                           Publish Octave Script Files.
                                                             (line   17)
* putenv:                                Environment Variables.
                                                             (line   19)
* puts:                                  Simple Output.      (line   33)
* puts <1>:                              Simple Output.      (line   34)
* pwd:                                   Current Working Directory.
                                                             (line  126)
* pwd <1>:                               Current Working Directory.
                                                             (line  127)
* python:                                Controlling Subprocesses.
                                                             (line  149)
* python <1>:                            Controlling Subprocesses.
                                                             (line  150)
* python <2>:                            Controlling Subprocesses.
                                                             (line  151)
* P_tmpdir:                              Temporary Files.    (line   78)
* qmr:                                   Specialized Solvers.
                                                             (line  608)
* qmr <1>:                               Specialized Solvers.
                                                             (line  609)
* qmr <2>:                               Specialized Solvers.
                                                             (line  610)
* qp:                                    Quadratic Programming.
                                                             (line   16)
* qp <1>:                                Quadratic Programming.
                                                             (line   17)
* qp <2>:                                Quadratic Programming.
                                                             (line   18)
* qp <3>:                                Quadratic Programming.
                                                             (line   19)
* qp <4>:                                Quadratic Programming.
                                                             (line   20)
* qp <5>:                                Quadratic Programming.
                                                             (line   22)
* qr:                                    Matrix Factorizations.
                                                             (line  280)
* qr <1>:                                Matrix Factorizations.
                                                             (line  281)
* qr <2>:                                Matrix Factorizations.
                                                             (line  282)
* qr <3>:                                Matrix Factorizations.
                                                             (line  283)
* qr <4>:                                Matrix Factorizations.
                                                             (line  284)
* qr <5>:                                Matrix Factorizations.
                                                             (line  285)
* qr <6>:                                Matrix Factorizations.
                                                             (line  286)
* qr <7>:                                Matrix Factorizations.
                                                             (line  287)
* qr <8>:                                Matrix Factorizations.
                                                             (line  288)
* qrdelete:                              Matrix Factorizations.
                                                             (line  466)
* qrinsert:                              Matrix Factorizations.
                                                             (line  440)
* qrshift:                               Matrix Factorizations.
                                                             (line  491)
* qrupdate:                              Matrix Factorizations.
                                                             (line  423)
* quad:                                  Functions of One Variable.
                                                             (line   96)
* quad <1>:                              Functions of One Variable.
                                                             (line   97)
* quad <2>:                              Functions of One Variable.
                                                             (line   98)
* quad <3>:                              Functions of One Variable.
                                                             (line   99)
* quad2d:                                Functions of Multiple Variables.
                                                             (line  113)
* quad2d <1>:                            Functions of Multiple Variables.
                                                             (line  114)
* quad2d <2>:                            Functions of Multiple Variables.
                                                             (line  115)
* quadcc:                                Functions of One Variable.
                                                             (line  366)
* quadcc <1>:                            Functions of One Variable.
                                                             (line  367)
* quadcc <2>:                            Functions of One Variable.
                                                             (line  368)
* quadcc <3>:                            Functions of One Variable.
                                                             (line  369)
* quadgk:                                Functions of One Variable.
                                                             (line  267)
* quadgk <1>:                            Functions of One Variable.
                                                             (line  268)
* quadgk <2>:                            Functions of One Variable.
                                                             (line  269)
* quadgk <3>:                            Functions of One Variable.
                                                             (line  270)
* quadgk <4>:                            Functions of One Variable.
                                                             (line  271)
* quadl:                                 Functions of One Variable.
                                                             (line  221)
* quadl <1>:                             Functions of One Variable.
                                                             (line  222)
* quadl <2>:                             Functions of One Variable.
                                                             (line  223)
* quadl <3>:                             Functions of One Variable.
                                                             (line  224)
* quadl <4>:                             Functions of One Variable.
                                                             (line  225)
* quadv:                                 Functions of One Variable.
                                                             (line  174)
* quadv <1>:                             Functions of One Variable.
                                                             (line  175)
* quadv <2>:                             Functions of One Variable.
                                                             (line  176)
* quadv <3>:                             Functions of One Variable.
                                                             (line  177)
* quadv <4>:                             Functions of One Variable.
                                                             (line  178)
* quad_options:                          Functions of One Variable.
                                                             (line  142)
* quad_options <1>:                      Functions of One Variable.
                                                             (line  143)
* quad_options <2>:                      Functions of One Variable.
                                                             (line  144)
* quantile:                              Descriptive Statistics.
                                                             (line  463)
* quantile <1>:                          Descriptive Statistics.
                                                             (line  464)
* quantile <2>:                          Descriptive Statistics.
                                                             (line  465)
* quantile <3>:                          Descriptive Statistics.
                                                             (line  466)
* questdlg:                              I/O Dialogs.        (line  372)
* questdlg <1>:                          I/O Dialogs.        (line  373)
* questdlg <2>:                          I/O Dialogs.        (line  374)
* questdlg <3>:                          I/O Dialogs.        (line  375)
* questdlg <4>:                          I/O Dialogs.        (line  376)
* quit:                                  Quitting Octave.    (line   14)
* quit <1>:                              Quitting Octave.    (line   15)
* quit <2>:                              Quitting Octave.    (line   16)
* quit <3>:                              Quitting Octave.    (line   17)
* quit <4>:                              Quitting Octave.    (line   18)
* quit <5>:                              Quitting Octave.    (line   19)
* quit <6>:                              Quitting Octave.    (line   20)
* quiver:                                Two-Dimensional Plots.
                                                             (line 1431)
* quiver <1>:                            Two-Dimensional Plots.
                                                             (line 1432)
* quiver <2>:                            Two-Dimensional Plots.
                                                             (line 1433)
* quiver <3>:                            Two-Dimensional Plots.
                                                             (line 1434)
* quiver <4>:                            Two-Dimensional Plots.
                                                             (line 1435)
* quiver <5>:                            Two-Dimensional Plots.
                                                             (line 1436)
* quiver <6>:                            Two-Dimensional Plots.
                                                             (line 1437)
* quiver3:                               Two-Dimensional Plots.
                                                             (line 1477)
* quiver3 <1>:                           Two-Dimensional Plots.
                                                             (line 1478)
* quiver3 <2>:                           Two-Dimensional Plots.
                                                             (line 1479)
* quiver3 <3>:                           Two-Dimensional Plots.
                                                             (line 1480)
* quiver3 <4>:                           Two-Dimensional Plots.
                                                             (line 1481)
* quiver3 <5>:                           Two-Dimensional Plots.
                                                             (line 1482)
* quiver3 <6>:                           Two-Dimensional Plots.
                                                             (line 1483)
* qz:                                    Matrix Factorizations.
                                                             (line  505)
* qz <1>:                                Matrix Factorizations.
                                                             (line  506)
* qz <2>:                                Matrix Factorizations.
                                                             (line  507)
* qz <3>:                                Matrix Factorizations.
                                                             (line  508)
* qzhess:                                Matrix Factorizations.
                                                             (line  574)
* rad2deg:                               Trigonometry.       (line   48)
* rainbow:                               Representing Images.
                                                             (line  524)
* rainbow <1>:                           Representing Images.
                                                             (line  525)
* rand:                                  Special Utility Matrices.
                                                             (line  295)
* rand <1>:                              Special Utility Matrices.
                                                             (line  296)
* rand <2>:                              Special Utility Matrices.
                                                             (line  297)
* rand <3>:                              Special Utility Matrices.
                                                             (line  298)
* rand <4>:                              Special Utility Matrices.
                                                             (line  299)
* rand <5>:                              Special Utility Matrices.
                                                             (line  300)
* rand <6>:                              Special Utility Matrices.
                                                             (line  301)
* rand <7>:                              Special Utility Matrices.
                                                             (line  302)
* rand <8>:                              Special Utility Matrices.
                                                             (line  303)
* rand <9>:                              Special Utility Matrices.
                                                             (line  304)
* rand <10>:                             Special Utility Matrices.
                                                             (line  305)
* rande:                                 Special Utility Matrices.
                                                             (line  435)
* rande <1>:                             Special Utility Matrices.
                                                             (line  436)
* rande <2>:                             Special Utility Matrices.
                                                             (line  437)
* rande <3>:                             Special Utility Matrices.
                                                             (line  438)
* rande <4>:                             Special Utility Matrices.
                                                             (line  439)
* rande <5>:                             Special Utility Matrices.
                                                             (line  440)
* rande <6>:                             Special Utility Matrices.
                                                             (line  441)
* rande <7>:                             Special Utility Matrices.
                                                             (line  442)
* rande <8>:                             Special Utility Matrices.
                                                             (line  443)
* rande <9>:                             Special Utility Matrices.
                                                             (line  444)
* rande <10>:                            Special Utility Matrices.
                                                             (line  445)
* randg:                                 Special Utility Matrices.
                                                             (line  511)
* randg <1>:                             Special Utility Matrices.
                                                             (line  512)
* randg <2>:                             Special Utility Matrices.
                                                             (line  513)
* randg <3>:                             Special Utility Matrices.
                                                             (line  514)
* randg <4>:                             Special Utility Matrices.
                                                             (line  515)
* randg <5>:                             Special Utility Matrices.
                                                             (line  516)
* randg <6>:                             Special Utility Matrices.
                                                             (line  517)
* randg <7>:                             Special Utility Matrices.
                                                             (line  518)
* randg <8>:                             Special Utility Matrices.
                                                             (line  519)
* randg <9>:                             Special Utility Matrices.
                                                             (line  520)
* randg <10>:                            Special Utility Matrices.
                                                             (line  521)
* randi:                                 Special Utility Matrices.
                                                             (line  374)
* randi <1>:                             Special Utility Matrices.
                                                             (line  375)
* randi <2>:                             Special Utility Matrices.
                                                             (line  376)
* randi <3>:                             Special Utility Matrices.
                                                             (line  377)
* randi <4>:                             Special Utility Matrices.
                                                             (line  378)
* randn:                                 Special Utility Matrices.
                                                             (line  406)
* randn <1>:                             Special Utility Matrices.
                                                             (line  407)
* randn <2>:                             Special Utility Matrices.
                                                             (line  408)
* randn <3>:                             Special Utility Matrices.
                                                             (line  409)
* randn <4>:                             Special Utility Matrices.
                                                             (line  410)
* randn <5>:                             Special Utility Matrices.
                                                             (line  411)
* randn <6>:                             Special Utility Matrices.
                                                             (line  412)
* randn <7>:                             Special Utility Matrices.
                                                             (line  413)
* randn <8>:                             Special Utility Matrices.
                                                             (line  414)
* randn <9>:                             Special Utility Matrices.
                                                             (line  415)
* randn <10>:                            Special Utility Matrices.
                                                             (line  416)
* randp:                                 Special Utility Matrices.
                                                             (line  464)
* randp <1>:                             Special Utility Matrices.
                                                             (line  465)
* randp <2>:                             Special Utility Matrices.
                                                             (line  466)
* randp <3>:                             Special Utility Matrices.
                                                             (line  467)
* randp <4>:                             Special Utility Matrices.
                                                             (line  468)
* randp <5>:                             Special Utility Matrices.
                                                             (line  469)
* randp <6>:                             Special Utility Matrices.
                                                             (line  470)
* randp <7>:                             Special Utility Matrices.
                                                             (line  471)
* randp <8>:                             Special Utility Matrices.
                                                             (line  472)
* randp <9>:                             Special Utility Matrices.
                                                             (line  473)
* randp <10>:                            Special Utility Matrices.
                                                             (line  474)
* randperm:                              Special Utility Matrices.
                                                             (line  672)
* randperm <1>:                          Special Utility Matrices.
                                                             (line  673)
* range:                                 Descriptive Statistics.
                                                             (line  134)
* range <1>:                             Descriptive Statistics.
                                                             (line  135)
* rank:                                  Basic Matrix Functions.
                                                             (line  515)
* rank <1>:                              Basic Matrix Functions.
                                                             (line  516)
* ranks:                                 Basic Statistical Functions.
                                                             (line  151)
* ranks <1>:                             Basic Statistical Functions.
                                                             (line  152)
* ranks <2>:                             Basic Statistical Functions.
                                                             (line  153)
* rat:                                   Rational Approximations.
                                                             (line    6)
* rat <1>:                               Rational Approximations.
                                                             (line    7)
* rat <2>:                               Rational Approximations.
                                                             (line    8)
* rats:                                  Rational Approximations.
                                                             (line   40)
* rats <1>:                              Rational Approximations.
                                                             (line   41)
* rcond:                                 Basic Matrix Functions.
                                                             (line  560)
* rdivide:                               Arithmetic Ops.     (line  201)
* readdir:                               Filesystem Utilities.
                                                             (line  437)
* readdir <1>:                           Filesystem Utilities.
                                                             (line  438)
* readline_read_init_file:               Customizing readline.
                                                             (line   15)
* readline_re_read_init_file:            Customizing readline.
                                                             (line   26)
* readlink:                              Filesystem Utilities.
                                                             (line  104)
* readlink <1>:                          Filesystem Utilities.
                                                             (line  105)
* real:                                  Complex Arithmetic. (line   72)
* reallog:                               Exponents and Logarithms.
                                                             (line   26)
* realmax:                               Mathematical Constants.
                                                             (line  178)
* realmax <1>:                           Mathematical Constants.
                                                             (line  179)
* realmax <2>:                           Mathematical Constants.
                                                             (line  180)
* realmax <3>:                           Mathematical Constants.
                                                             (line  181)
* realmax <4>:                           Mathematical Constants.
                                                             (line  182)
* realmin:                               Mathematical Constants.
                                                             (line  208)
* realmin <1>:                           Mathematical Constants.
                                                             (line  209)
* realmin <2>:                           Mathematical Constants.
                                                             (line  210)
* realmin <3>:                           Mathematical Constants.
                                                             (line  211)
* realmin <4>:                           Mathematical Constants.
                                                             (line  212)
* realpow:                               Exponents and Logarithms.
                                                             (line   79)
* realsqrt:                              Exponents and Logarithms.
                                                             (line   97)
* record:                                Recording.          (line    8)
* record <1>:                            Recording.          (line    9)
* record <2>:                            Audio Data Processing.
                                                             (line   50)
* record <3>:                            Audio Data Processing.
                                                             (line   51)
* recordblocking:                        Recording.          (line   15)
* rectangle:                             Two-dimensional Geometric Shapes.
                                                             (line    6)
* rectangle <1>:                         Two-dimensional Geometric Shapes.
                                                             (line    7)
* rectangle <2>:                         Two-dimensional Geometric Shapes.
                                                             (line    8)
* rectangle <3>:                         Two-dimensional Geometric Shapes.
                                                             (line    9)
* rectangle <4>:                         Two-dimensional Geometric Shapes.
                                                             (line   10)
* rectangle <5>:                         Two-dimensional Geometric Shapes.
                                                             (line   11)
* rectangle <6>:                         Two-dimensional Geometric Shapes.
                                                             (line   12)
* rectint:                               Voronoi Diagrams.   (line  124)
* recycle:                               Filesystem Utilities.
                                                             (line  658)
* recycle <1>:                           Filesystem Utilities.
                                                             (line  659)
* reducepatch:                           Three-Dimensional Plots.
                                                             (line  739)
* reducepatch <1>:                       Three-Dimensional Plots.
                                                             (line  740)
* reducepatch <2>:                       Three-Dimensional Plots.
                                                             (line  741)
* reducepatch <3>:                       Three-Dimensional Plots.
                                                             (line  742)
* reducepatch <4>:                       Three-Dimensional Plots.
                                                             (line  743)
* reducepatch <5>:                       Three-Dimensional Plots.
                                                             (line  744)
* reducepatch <6>:                       Three-Dimensional Plots.
                                                             (line  745)
* reducepatch <7>:                       Three-Dimensional Plots.
                                                             (line  746)
* reducevolume:                          Three-Dimensional Plots.
                                                             (line  698)
* reducevolume <1>:                      Three-Dimensional Plots.
                                                             (line  699)
* reducevolume <2>:                      Three-Dimensional Plots.
                                                             (line  700)
* refresh:                               Manipulation of Plot Windows.
                                                             (line   30)
* refresh <1>:                           Manipulation of Plot Windows.
                                                             (line   31)
* refreshdata:                           Data Sources in Object Groups.
                                                             (line   11)
* refreshdata <1>:                       Data Sources in Object Groups.
                                                             (line   12)
* refreshdata <2>:                       Data Sources in Object Groups.
                                                             (line   13)
* regexp:                                Searching and Replacing in Strings.
                                                             (line   63)
* regexp <1>:                            Searching and Replacing in Strings.
                                                             (line   64)
* regexpi:                               Searching and Replacing in Strings.
                                                             (line  271)
* regexpi <1>:                           Searching and Replacing in Strings.
                                                             (line  272)
* regexprep:                             Searching and Replacing in Strings.
                                                             (line  283)
* regexprep <1>:                         Searching and Replacing in Strings.
                                                             (line  284)
* regexptranslate:                       Searching and Replacing in Strings.
                                                             (line  316)
* register_graphics_toolkit:             Graphics Toolkits.  (line   38)
* rehash:                                Manipulating the Load Path.
                                                             (line  149)
* rem:                                   Utility Functions.  (line  446)
* remove_input_event_hook:               Parser.             (line   33)
* remove_input_event_hook <1>:           Parser.             (line   34)
* rename:                                Filesystem Utilities.
                                                             (line   41)
* rename <1>:                            Filesystem Utilities.
                                                             (line   42)
* rename <2>:                            FTP Objects.        (line  105)
* repelem:                               Special Utility Matrices.
                                                             (line  136)
* repelem <1>:                           Special Utility Matrices.
                                                             (line  137)
* repelems:                              Special Utility Matrices.
                                                             (line  116)
* repmat:                                Special Utility Matrices.
                                                             (line   98)
* repmat <1>:                            Special Utility Matrices.
                                                             (line   99)
* repmat <2>:                            Special Utility Matrices.
                                                             (line  100)
* repmat <3>:                            Special Utility Matrices.
                                                             (line  101)
* repmat <4>:                            Special Utility Matrices.
                                                             (line  102)
* rescale:                               Simple File I/O.    (line  870)
* rescale <1>:                           Simple File I/O.    (line  871)
* rescale <2>:                           Simple File I/O.    (line  872)
* rescale <3>:                           Simple File I/O.    (line  873)
* reset:                                 Managing Default Properties.
                                                             (line   74)
* reshape:                               Rearranging Matrices.
                                                             (line  217)
* reshape <1>:                           Rearranging Matrices.
                                                             (line  218)
* reshape <2>:                           Rearranging Matrices.
                                                             (line  219)
* reshape <3>:                           Rearranging Matrices.
                                                             (line  220)
* residue:                               Products of Polynomials.
                                                             (line  116)
* residue <1>:                           Products of Polynomials.
                                                             (line  117)
* residue <2>:                           Products of Polynomials.
                                                             (line  118)
* resize:                                Rearranging Matrices.
                                                             (line  246)
* resize <1>:                            Rearranging Matrices.
                                                             (line  247)
* resize <2>:                            Rearranging Matrices.
                                                             (line  248)
* resize <3>:                            Matrices and Arrays in Oct-Files.
                                                             (line  103)
* resize <4>:                            Matrices and Arrays in Oct-Files.
                                                             (line  104)
* restoredefaultpath:                    Manipulating the Load Path.
                                                             (line  175)
* resume:                                Playback.           (line   32)
* resume <1>:                            Recording.          (line   23)
* rethrow:                               Catching Errors.    (line  172)
* return:                                Returning from a Function.
                                                             (line   37)
* rgb2gray:                              Color Conversion.   (line   56)
* rgb2gray <1>:                          Color Conversion.   (line   57)
* rgb2hsv:                               Color Conversion.   (line   10)
* rgb2hsv <1>:                           Color Conversion.   (line   11)
* rgb2ind:                               Representing Images.
                                                             (line   93)
* rgb2ind <1>:                           Representing Images.
                                                             (line   94)
* rgbplot:                               Representing Images.
                                                             (line  318)
* rgbplot <1>:                           Representing Images.
                                                             (line  319)
* rgbplot <2>:                           Representing Images.
                                                             (line  320)
* ribbon:                                Three-Dimensional Plots.
                                                             (line 1563)
* ribbon <1>:                            Three-Dimensional Plots.
                                                             (line 1564)
* ribbon <2>:                            Three-Dimensional Plots.
                                                             (line 1565)
* ribbon <3>:                            Three-Dimensional Plots.
                                                             (line 1566)
* ribbon <4>:                            Three-Dimensional Plots.
                                                             (line 1567)
* rindex:                                Searching in Strings.
                                                             (line  237)
* rmappdata:                             Application-defined Data.
                                                             (line   43)
* rmappdata <1>:                         Application-defined Data.
                                                             (line   44)
* rmdir:                                 Filesystem Utilities.
                                                             (line  138)
* rmdir <1>:                             Filesystem Utilities.
                                                             (line  139)
* rmdir <2>:                             Filesystem Utilities.
                                                             (line  140)
* rmdir <3>:                             FTP Objects.        (line  116)
* rmfield:                               Manipulating Structures.
                                                             (line  137)
* rmfield <1>:                           Manipulating Structures.
                                                             (line  138)
* rmpath:                                Manipulating the Load Path.
                                                             (line   63)
* rmpref:                                User-Defined Preferences.
                                                             (line   74)
* rmpref <1>:                            User-Defined Preferences.
                                                             (line   75)
* rmpref <2>:                            User-Defined Preferences.
                                                             (line   76)
* rng:                                   Special Utility Matrices.
                                                             (line  581)
* rng <1>:                               Special Utility Matrices.
                                                             (line  582)
* rng <2>:                               Special Utility Matrices.
                                                             (line  583)
* rng <3>:                               Special Utility Matrices.
                                                             (line  584)
* rng <4>:                               Special Utility Matrices.
                                                             (line  585)
* rng <5>:                               Special Utility Matrices.
                                                             (line  586)
* rng <6>:                               Special Utility Matrices.
                                                             (line  587)
* rng <7>:                               Special Utility Matrices.
                                                             (line  588)
* roots:                                 Finding Roots.      (line   10)
* rose:                                  Two-Dimensional Plots.
                                                             (line  873)
* rose <1>:                              Two-Dimensional Plots.
                                                             (line  874)
* rose <2>:                              Two-Dimensional Plots.
                                                             (line  875)
* rose <3>:                              Two-Dimensional Plots.
                                                             (line  876)
* rose <4>:                              Two-Dimensional Plots.
                                                             (line  877)
* rose <5>:                              Two-Dimensional Plots.
                                                             (line  878)
* rosser:                                Famous Matrices.    (line  409)
* rot90:                                 Rearranging Matrices.
                                                             (line   68)
* rot90 <1>:                             Rearranging Matrices.
                                                             (line   69)
* rotate:                                Manipulation of Plot Objects.
                                                             (line   27)
* rotate <1>:                            Manipulation of Plot Objects.
                                                             (line   28)
* rotate3d:                              Manipulation of Plot Objects.
                                                             (line   41)
* rotate3d <1>:                          Manipulation of Plot Objects.
                                                             (line   42)
* rotate3d <2>:                          Manipulation of Plot Objects.
                                                             (line   43)
* rotate3d <3>:                          Manipulation of Plot Objects.
                                                             (line   44)
* rotdim:                                Rearranging Matrices.
                                                             (line   98)
* rotdim <1>:                            Rearranging Matrices.
                                                             (line   99)
* rotdim <2>:                            Rearranging Matrices.
                                                             (line  100)
* rotx:                                  Vector Rotation Matrices.
                                                             (line   15)
* roty:                                  Vector Rotation Matrices.
                                                             (line   55)
* rotz:                                  Vector Rotation Matrices.
                                                             (line   95)
* round:                                 Utility Functions.  (line   43)
* roundb:                                Utility Functions.  (line   56)
* rows:                                  Object Sizes.       (line   32)
* rref:                                  Basic Matrix Functions.
                                                             (line  580)
* rref <1>:                              Basic Matrix Functions.
                                                             (line  581)
* rref <2>:                              Basic Matrix Functions.
                                                             (line  582)
* rsf2csf:                               Matrix Factorizations.
                                                             (line  647)
* rticks:                                Axis Configuration. (line  206)
* run:                                   Calling a Function by its Name.
                                                             (line   81)
* run <1>:                               Calling a Function by its Name.
                                                             (line   82)
* rundemos:                              Demonstration Functions.
                                                             (line  102)
* rundemos <1>:                          Demonstration Functions.
                                                             (line  103)
* runlength:                             Basic Statistical Functions.
                                                             (line  186)
* runlength <1>:                         Basic Statistical Functions.
                                                             (line  187)
* run_count:                             Basic Statistical Functions.
                                                             (line  176)
* run_count <1>:                         Basic Statistical Functions.
                                                             (line  177)
* run_history:                           Commands for History.
                                                             (line  121)
* run_history <1>:                       Commands for History.
                                                             (line  122)
* run_history <2>:                       Commands for History.
                                                             (line  123)
* save:                                  Simple File I/O.    (line   28)
* save <1>:                              Simple File I/O.    (line   29)
* save <2>:                              Simple File I/O.    (line   30)
* save <3>:                              Simple File I/O.    (line   31)
* save <4>:                              Simple File I/O.    (line   32)
* save <5>:                              Simple File I/O.    (line   33)
* save <6>:                              Simple File I/O.    (line   34)
* saveas:                                Printing and Saving Plots.
                                                             (line  437)
* saveas <1>:                            Printing and Saving Plots.
                                                             (line  438)
* savefig:                               Printing and Saving Plots.
                                                             (line  605)
* savefig <1>:                           Printing and Saving Plots.
                                                             (line  606)
* savefig <2>:                           Printing and Saving Plots.
                                                             (line  607)
* savefig <3>:                           Printing and Saving Plots.
                                                             (line  608)
* savefig <4>:                           Printing and Saving Plots.
                                                             (line  609)
* saveobj:                               Class Methods.      (line  133)
* savepath:                              Manipulating the Load Path.
                                                             (line   80)
* savepath <1>:                          Manipulating the Load Path.
                                                             (line   81)
* savepath <2>:                          Manipulating the Load Path.
                                                             (line   82)
* save_default_options:                  Simple File I/O.    (line  174)
* save_default_options <1>:              Simple File I/O.    (line  175)
* save_default_options <2>:              Simple File I/O.    (line  176)
* save_header_format_string:             Simple File I/O.    (line  211)
* save_header_format_string <1>:         Simple File I/O.    (line  212)
* save_header_format_string <2>:         Simple File I/O.    (line  213)
* save_precision:                        Simple File I/O.    (line  192)
* save_precision <1>:                    Simple File I/O.    (line  193)
* save_precision <2>:                    Simple File I/O.    (line  194)
* scanf:                                 Formatted Input.    (line   58)
* scanf <1>:                             Formatted Input.    (line   59)
* scatter:                               Two-Dimensional Plots.
                                                             (line  742)
* scatter <1>:                           Two-Dimensional Plots.
                                                             (line  743)
* scatter <2>:                           Two-Dimensional Plots.
                                                             (line  744)
* scatter <3>:                           Two-Dimensional Plots.
                                                             (line  745)
* scatter <4>:                           Two-Dimensional Plots.
                                                             (line  746)
* scatter <5>:                           Two-Dimensional Plots.
                                                             (line  747)
* scatter <6>:                           Two-Dimensional Plots.
                                                             (line  748)
* scatter <7>:                           Two-Dimensional Plots.
                                                             (line  749)
* scatter3:                              Three-Dimensional Plots.
                                                             (line 1611)
* scatter3 <1>:                          Three-Dimensional Plots.
                                                             (line 1612)
* scatter3 <2>:                          Three-Dimensional Plots.
                                                             (line 1613)
* scatter3 <3>:                          Three-Dimensional Plots.
                                                             (line 1614)
* scatter3 <4>:                          Three-Dimensional Plots.
                                                             (line 1615)
* scatter3 <5>:                          Three-Dimensional Plots.
                                                             (line 1616)
* scatter3 <6>:                          Three-Dimensional Plots.
                                                             (line 1617)
* scatter3 <7>:                          Three-Dimensional Plots.
                                                             (line 1618)
* schur:                                 Matrix Factorizations.
                                                             (line  606)
* schur <1>:                             Matrix Factorizations.
                                                             (line  607)
* schur <2>:                             Matrix Factorizations.
                                                             (line  608)
* schur <3>:                             Matrix Factorizations.
                                                             (line  609)
* schur <4>:                             Matrix Factorizations.
                                                             (line  610)
* sec:                                   Trigonometry.       (line   85)
* secd:                                  Trigonometry.       (line  245)
* sech:                                  Trigonometry.       (line  151)
* SEEK_CUR:                              File Positioning.   (line   42)
* SEEK_END:                              File Positioning.   (line   49)
* SEEK_SET:                              File Positioning.   (line   35)
* semilogx:                              Two-Dimensional Plots.
                                                             (line  242)
* semilogx <1>:                          Two-Dimensional Plots.
                                                             (line  243)
* semilogx <2>:                          Two-Dimensional Plots.
                                                             (line  244)
* semilogx <3>:                          Two-Dimensional Plots.
                                                             (line  245)
* semilogx <4>:                          Two-Dimensional Plots.
                                                             (line  246)
* semilogx <5>:                          Two-Dimensional Plots.
                                                             (line  247)
* semilogxerr:                           Two-Dimensional Plots.
                                                             (line 1227)
* semilogxerr <1>:                       Two-Dimensional Plots.
                                                             (line 1228)
* semilogxerr <2>:                       Two-Dimensional Plots.
                                                             (line 1229)
* semilogxerr <3>:                       Two-Dimensional Plots.
                                                             (line 1230)
* semilogxerr <4>:                       Two-Dimensional Plots.
                                                             (line 1231)
* semilogxerr <5>:                       Two-Dimensional Plots.
                                                             (line 1232)
* semilogxerr <6>:                       Two-Dimensional Plots.
                                                             (line 1233)
* semilogxerr <7>:                       Two-Dimensional Plots.
                                                             (line 1234)
* semilogxerr <8>:                       Two-Dimensional Plots.
                                                             (line 1235)
* semilogxerr <9>:                       Two-Dimensional Plots.
                                                             (line 1236)
* semilogy:                              Two-Dimensional Plots.
                                                             (line  262)
* semilogy <1>:                          Two-Dimensional Plots.
                                                             (line  263)
* semilogy <2>:                          Two-Dimensional Plots.
                                                             (line  264)
* semilogy <3>:                          Two-Dimensional Plots.
                                                             (line  265)
* semilogy <4>:                          Two-Dimensional Plots.
                                                             (line  266)
* semilogy <5>:                          Two-Dimensional Plots.
                                                             (line  267)
* semilogyerr:                           Two-Dimensional Plots.
                                                             (line 1256)
* semilogyerr <1>:                       Two-Dimensional Plots.
                                                             (line 1257)
* semilogyerr <2>:                       Two-Dimensional Plots.
                                                             (line 1258)
* semilogyerr <3>:                       Two-Dimensional Plots.
                                                             (line 1259)
* semilogyerr <4>:                       Two-Dimensional Plots.
                                                             (line 1260)
* semilogyerr <5>:                       Two-Dimensional Plots.
                                                             (line 1261)
* semilogyerr <6>:                       Two-Dimensional Plots.
                                                             (line 1262)
* semilogyerr <7>:                       Two-Dimensional Plots.
                                                             (line 1263)
* semilogyerr <8>:                       Two-Dimensional Plots.
                                                             (line 1264)
* semilogyerr <9>:                       Two-Dimensional Plots.
                                                             (line 1265)
* set:                                   Graphics Objects.   (line  509)
* set <1>:                               Graphics Objects.   (line  510)
* set <2>:                               Graphics Objects.   (line  511)
* set <3>:                               Graphics Objects.   (line  512)
* set <4>:                               Graphics Objects.   (line  513)
* set <5>:                               Player Properties.  (line   19)
* set <6>:                               Player Properties.  (line   20)
* set <7>:                               Player Properties.  (line   21)
* set <8>:                               Recorder Properties.
                                                             (line   19)
* set <9>:                               Recorder Properties.
                                                             (line   20)
* set <10>:                              Recorder Properties.
                                                             (line   21)
* setappdata:                            Application-defined Data.
                                                             (line   10)
* setappdata <1>:                        Application-defined Data.
                                                             (line   11)
* setappdata <2>:                        Application-defined Data.
                                                             (line   12)
* setdiff:                               Set Operations.     (line   87)
* setdiff <1>:                           Set Operations.     (line   88)
* setdiff <2>:                           Set Operations.     (line   89)
* setdiff <3>:                           Set Operations.     (line   90)
* setdiff <4>:                           Set Operations.     (line   91)
* setdiff <5>:                           Set Operations.     (line   92)
* setenv:                                Environment Variables.
                                                             (line   17)
* setenv <1>:                            Environment Variables.
                                                             (line   18)
* setfield:                              Manipulating Structures.
                                                             (line   45)
* setfield <1>:                          Manipulating Structures.
                                                             (line   46)
* setgrent:                              Group Database Functions.
                                                             (line   50)
* setpref:                               User-Defined Preferences.
                                                             (line   37)
* setpref <1>:                           User-Defined Preferences.
                                                             (line   38)
* setpwent:                              Password Database Functions.
                                                             (line   60)
* setxor:                                Set Operations.     (line  116)
* setxor <1>:                            Set Operations.     (line  117)
* setxor <2>:                            Set Operations.     (line  118)
* setxor <3>:                            Set Operations.     (line  119)
* setxor <4>:                            Set Operations.     (line  120)
* setxor <5>:                            Set Operations.     (line  121)
* shading:                               Three-Dimensional Plots.
                                                             (line 1587)
* shading <1>:                           Three-Dimensional Plots.
                                                             (line 1588)
* shg:                                   Manipulation of Plot Windows.
                                                             (line  208)
* shift:                                 Rearranging Matrices.
                                                             (line  331)
* shift <1>:                             Rearranging Matrices.
                                                             (line  332)
* shiftdim:                              Rearranging Matrices.
                                                             (line  341)
* shiftdim <1>:                          Rearranging Matrices.
                                                             (line  342)
* shrinkfaces:                           Three-Dimensional Plots.
                                                             (line  802)
* shrinkfaces <1>:                       Three-Dimensional Plots.
                                                             (line  803)
* shrinkfaces <2>:                       Three-Dimensional Plots.
                                                             (line  804)
* shrinkfaces <3>:                       Three-Dimensional Plots.
                                                             (line  805)
* shrinkfaces <4>:                       Three-Dimensional Plots.
                                                             (line  806)
* SIG:                                   Controlling Subprocesses.
                                                             (line  565)
* sighup_dumps_octave_core:              Saving Data on Unexpected Exits.
                                                             (line   28)
* sighup_dumps_octave_core <1>:          Saving Data on Unexpected Exits.
                                                             (line   29)
* sighup_dumps_octave_core <2>:          Saving Data on Unexpected Exits.
                                                             (line   30)
* sign:                                  Utility Functions.  (line  532)
* signbit:                               Utility Functions.  (line  549)
* sigquit_dumps_octave_core:             Saving Data on Unexpected Exits.
                                                             (line   40)
* sigquit_dumps_octave_core <1>:         Saving Data on Unexpected Exits.
                                                             (line   41)
* sigquit_dumps_octave_core <2>:         Saving Data on Unexpected Exits.
                                                             (line   42)
* sigterm_dumps_octave_core:             Saving Data on Unexpected Exits.
                                                             (line   52)
* sigterm_dumps_octave_core <1>:         Saving Data on Unexpected Exits.
                                                             (line   53)
* sigterm_dumps_octave_core <2>:         Saving Data on Unexpected Exits.
                                                             (line   54)
* silent_functions:                      Defining Functions. (line  196)
* silent_functions <1>:                  Defining Functions. (line  197)
* silent_functions <2>:                  Defining Functions. (line  198)
* sin:                                   Trigonometry.       (line   67)
* sinc:                                  Signal Processing.  (line  368)
* sind:                                  Trigonometry.       (line  218)
* sinetone:                              Signal Processing.  (line  688)
* sinewave:                              Signal Processing.  (line  698)
* single:                                Single Precision Data Types.
                                                             (line   11)
* sinh:                                  Trigonometry.       (line  133)
* sinint:                                Special Functions.  (line  784)
* sinpi:                                 Trigonometry.       (line  299)
* size:                                  Object Sizes.       (line   82)
* size <1>:                              Object Sizes.       (line   83)
* size <2>:                              Object Sizes.       (line   84)
* size <3>:                              Object Sizes.       (line   85)
* sizemax:                               Matrices.           (line  114)
* sizeof:                                Object Sizes.       (line  172)
* size_equal:                            Object Sizes.       (line  177)
* skewness:                              Descriptive Statistics.
                                                             (line  347)
* skewness <1>:                          Descriptive Statistics.
                                                             (line  348)
* skewness <2>:                          Descriptive Statistics.
                                                             (line  349)
* slice:                                 Three-Dimensional Plots.
                                                             (line 1505)
* slice <1>:                             Three-Dimensional Plots.
                                                             (line 1506)
* slice <2>:                             Three-Dimensional Plots.
                                                             (line 1507)
* slice <3>:                             Three-Dimensional Plots.
                                                             (line 1508)
* slice <4>:                             Three-Dimensional Plots.
                                                             (line 1509)
* slice <5>:                             Three-Dimensional Plots.
                                                             (line 1510)
* slice <6>:                             Three-Dimensional Plots.
                                                             (line 1511)
* smooth3:                               Three-Dimensional Plots.
                                                             (line  661)
* smooth3 <1>:                           Three-Dimensional Plots.
                                                             (line  662)
* smooth3 <2>:                           Three-Dimensional Plots.
                                                             (line  663)
* smooth3 <3>:                           Three-Dimensional Plots.
                                                             (line  664)
* sombrero:                              Test Plotting Functions.
                                                             (line   10)
* sombrero <1>:                          Test Plotting Functions.
                                                             (line   11)
* sombrero <2>:                          Test Plotting Functions.
                                                             (line   12)
* sombrero <3>:                          Test Plotting Functions.
                                                             (line   13)
* sort:                                  Rearranging Matrices.
                                                             (line  371)
* sort <1>:                              Rearranging Matrices.
                                                             (line  372)
* sort <2>:                              Rearranging Matrices.
                                                             (line  373)
* sort <3>:                              Rearranging Matrices.
                                                             (line  374)
* sortrows:                              Rearranging Matrices.
                                                             (line  427)
* sortrows <1>:                          Rearranging Matrices.
                                                             (line  428)
* sound:                                 Audio Data Processing.
                                                             (line   63)
* sound <1>:                             Audio Data Processing.
                                                             (line   64)
* sound <2>:                             Audio Data Processing.
                                                             (line   65)
* soundsc:                               Audio Data Processing.
                                                             (line   81)
* soundsc <1>:                           Audio Data Processing.
                                                             (line   82)
* soundsc <2>:                           Audio Data Processing.
                                                             (line   83)
* soundsc <3>:                           Audio Data Processing.
                                                             (line   84)
* source:                                Script Files.       (line   90)
* source <1>:                            Script Files.       (line   91)
* spalloc:                               Creating Sparse Matrices.
                                                             (line  218)
* sparse:                                Creating Sparse Matrices.
                                                             (line  254)
* sparse <1>:                            Creating Sparse Matrices.
                                                             (line  255)
* sparse <2>:                            Creating Sparse Matrices.
                                                             (line  256)
* sparse <3>:                            Creating Sparse Matrices.
                                                             (line  257)
* sparse <4>:                            Creating Sparse Matrices.
                                                             (line  258)
* sparse <5>:                            Creating Sparse Matrices.
                                                             (line  259)
* sparse_auto_mutate:                    Return Types of Operators and Functions.
                                                             (line   52)
* sparse_auto_mutate <1>:                Return Types of Operators and Functions.
                                                             (line   53)
* sparse_auto_mutate <2>:                Return Types of Operators and Functions.
                                                             (line   54)
* spaugment:                             Sparse Linear Algebra.
                                                             (line  382)
* spconvert:                             Creating Sparse Matrices.
                                                             (line  318)
* spdiags:                               Creating Sparse Matrices.
                                                             (line   47)
* spdiags <1>:                           Creating Sparse Matrices.
                                                             (line   48)
* spdiags <2>:                           Creating Sparse Matrices.
                                                             (line   49)
* spdiags <3>:                           Creating Sparse Matrices.
                                                             (line   50)
* spdiags <4>:                           Creating Sparse Matrices.
                                                             (line   51)
* spearman:                              Correlation and Regression Analysis.
                                                             (line  101)
* spearman <1>:                          Correlation and Regression Analysis.
                                                             (line  102)
* spectral_adf:                          Signal Processing.  (line  706)
* spectral_adf <1>:                      Signal Processing.  (line  707)
* spectral_adf <2>:                      Signal Processing.  (line  708)
* spectral_xdf:                          Signal Processing.  (line  721)
* spectral_xdf <1>:                      Signal Processing.  (line  722)
* spectral_xdf <2>:                      Signal Processing.  (line  723)
* specular:                              Three-Dimensional Plots.
                                                             (line  856)
* specular <1>:                          Three-Dimensional Plots.
                                                             (line  857)
* speed:                                 Demonstration Functions.
                                                             (line  115)
* speed <1>:                             Demonstration Functions.
                                                             (line  116)
* spencer:                               Signal Processing.  (line  736)
* speye:                                 Creating Sparse Matrices.
                                                             (line   81)
* speye <1>:                             Creating Sparse Matrices.
                                                             (line   82)
* speye <2>:                             Creating Sparse Matrices.
                                                             (line   83)
* spfun:                                 Function Application.
                                                             (line  105)
* sph2cart:                              Coordinate Transformations.
                                                             (line  107)
* sph2cart <1>:                          Coordinate Transformations.
                                                             (line  108)
* sphere:                                Three-dimensional Geometric Shapes.
                                                             (line   36)
* sphere <1>:                            Three-dimensional Geometric Shapes.
                                                             (line   37)
* sphere <2>:                            Three-dimensional Geometric Shapes.
                                                             (line   38)
* sphere <3>:                            Three-dimensional Geometric Shapes.
                                                             (line   39)
* spinmap:                               Representing Images.
                                                             (line  627)
* spinmap <1>:                           Representing Images.
                                                             (line  628)
* spinmap <2>:                           Representing Images.
                                                             (line  629)
* spinmap <3>:                           Representing Images.
                                                             (line  630)
* spline:                                One-dimensional Interpolation.
                                                             (line  165)
* spline <1>:                            One-dimensional Interpolation.
                                                             (line  166)
* splinefit:                             Polynomial Interpolation.
                                                             (line   88)
* splinefit <1>:                         Polynomial Interpolation.
                                                             (line   89)
* splinefit <2>:                         Polynomial Interpolation.
                                                             (line   90)
* splinefit <3>:                         Polynomial Interpolation.
                                                             (line   91)
* splinefit <4>:                         Polynomial Interpolation.
                                                             (line   92)
* splinefit <5>:                         Polynomial Interpolation.
                                                             (line   93)
* splinefit <6>:                         Polynomial Interpolation.
                                                             (line   94)
* split_long_rows:                       Matrices.           (line  153)
* split_long_rows <1>:                   Matrices.           (line  154)
* split_long_rows <2>:                   Matrices.           (line  155)
* spones:                                Creating Sparse Matrices.
                                                             (line   96)
* spparms:                               Sparse Linear Algebra.
                                                             (line  239)
* spparms <1>:                           Sparse Linear Algebra.
                                                             (line  240)
* spparms <2>:                           Sparse Linear Algebra.
                                                             (line  241)
* spparms <3>:                           Sparse Linear Algebra.
                                                             (line  242)
* spparms <4>:                           Sparse Linear Algebra.
                                                             (line  243)
* spparms <5>:                           Sparse Linear Algebra.
                                                             (line  244)
* spparms <6>:                           Sparse Linear Algebra.
                                                             (line  245)
* spparms <7>:                           Sparse Linear Algebra.
                                                             (line  246)
* sprand:                                Creating Sparse Matrices.
                                                             (line  105)
* sprand <1>:                            Creating Sparse Matrices.
                                                             (line  106)
* sprand <2>:                            Creating Sparse Matrices.
                                                             (line  107)
* sprandn:                               Creating Sparse Matrices.
                                                             (line  125)
* sprandn <1>:                           Creating Sparse Matrices.
                                                             (line  126)
* sprandn <2>:                           Creating Sparse Matrices.
                                                             (line  127)
* sprandsym:                             Creating Sparse Matrices.
                                                             (line  145)
* sprandsym <1>:                         Creating Sparse Matrices.
                                                             (line  146)
* sprank:                                Sparse Linear Algebra.
                                                             (line  311)
* spring:                                Representing Images.
                                                             (line  534)
* spring <1>:                            Representing Images.
                                                             (line  535)
* sprintf:                               Formatted Output.   (line   54)
* spstats:                               Information.        (line   52)
* spstats <1>:                           Information.        (line   53)
* spy:                                   Information.        (line  128)
* spy <1>:                               Information.        (line  129)
* spy <2>:                               Information.        (line  130)
* sqp:                                   Nonlinear Programming.
                                                             (line    9)
* sqp <1>:                               Nonlinear Programming.
                                                             (line   10)
* sqp <2>:                               Nonlinear Programming.
                                                             (line   11)
* sqp <3>:                               Nonlinear Programming.
                                                             (line   12)
* sqp <4>:                               Nonlinear Programming.
                                                             (line   13)
* sqp <5>:                               Nonlinear Programming.
                                                             (line   14)
* sqrt:                                  Exponents and Logarithms.
                                                             (line   88)
* sqrtm:                                 Functions of a Matrix.
                                                             (line   47)
* sqrtm <1>:                             Functions of a Matrix.
                                                             (line   48)
* squeeze:                               Object Sizes.       (line  186)
* sscanf:                                Formatted Input.    (line   67)
* sscanf <1>:                            Formatted Input.    (line   68)
* stairs:                                Two-Dimensional Plots.
                                                             (line  571)
* stairs <1>:                            Two-Dimensional Plots.
                                                             (line  572)
* stairs <2>:                            Two-Dimensional Plots.
                                                             (line  573)
* stairs <3>:                            Two-Dimensional Plots.
                                                             (line  574)
* stairs <4>:                            Two-Dimensional Plots.
                                                             (line  575)
* stairs <5>:                            Two-Dimensional Plots.
                                                             (line  576)
* stairs <6>:                            Two-Dimensional Plots.
                                                             (line  577)
* startsWith:                            Searching in Strings.
                                                             (line  102)
* startsWith <1>:                        Searching in Strings.
                                                             (line  103)
* stat:                                  Filesystem Utilities.
                                                             (line  198)
* stat <1>:                              Filesystem Utilities.
                                                             (line  199)
* statistics:                            Descriptive Statistics.
                                                             (line  562)
* statistics <1>:                        Descriptive Statistics.
                                                             (line  563)
* std:                                   Descriptive Statistics.
                                                             (line  241)
* std <1>:                               Descriptive Statistics.
                                                             (line  242)
* std <2>:                               Descriptive Statistics.
                                                             (line  243)
* std <3>:                               Descriptive Statistics.
                                                             (line  244)
* stderr:                                C-Style I/O Functions.
                                                             (line   38)
* stdin:                                 C-Style I/O Functions.
                                                             (line   19)
* stdout:                                C-Style I/O Functions.
                                                             (line   28)
* stem:                                  Two-Dimensional Plots.
                                                             (line  611)
* stem <1>:                              Two-Dimensional Plots.
                                                             (line  612)
* stem <2>:                              Two-Dimensional Plots.
                                                             (line  613)
* stem <3>:                              Two-Dimensional Plots.
                                                             (line  614)
* stem <4>:                              Two-Dimensional Plots.
                                                             (line  615)
* stem <5>:                              Two-Dimensional Plots.
                                                             (line  616)
* stem <6>:                              Two-Dimensional Plots.
                                                             (line  617)
* stem3:                                 Two-Dimensional Plots.
                                                             (line  701)
* stem3 <1>:                             Two-Dimensional Plots.
                                                             (line  702)
* stem3 <2>:                             Two-Dimensional Plots.
                                                             (line  703)
* stem3 <3>:                             Two-Dimensional Plots.
                                                             (line  704)
* stem3 <4>:                             Two-Dimensional Plots.
                                                             (line  705)
* stem3 <5>:                             Two-Dimensional Plots.
                                                             (line  706)
* stemleaf:                              Two-Dimensional Plots.
                                                             (line  503)
* stemleaf <1>:                          Two-Dimensional Plots.
                                                             (line  504)
* stemleaf <2>:                          Two-Dimensional Plots.
                                                             (line  505)
* stft:                                  Signal Processing.  (line  739)
* stft <1>:                              Signal Processing.  (line  740)
* stft <2>:                              Signal Processing.  (line  741)
* stft <3>:                              Signal Processing.  (line  742)
* stft <4>:                              Signal Processing.  (line  743)
* stft <5>:                              Signal Processing.  (line  744)
* stop:                                  Playback.           (line   35)
* stop <1>:                              Recording.          (line   26)
* str2double:                            Numerical Data and Strings.
                                                             (line  133)
* str2func:                              Function Handles.   (line   94)
* str2num:                               Numerical Data and Strings.
                                                             (line  176)
* str2num <1>:                           Numerical Data and Strings.
                                                             (line  177)
* strcat:                                Concatenating Strings.
                                                             (line  177)
* strchr:                                Searching in Strings.
                                                             (line  206)
* strchr <1>:                            Searching in Strings.
                                                             (line  207)
* strchr <2>:                            Searching in Strings.
                                                             (line  208)
* strchr <3>:                            Searching in Strings.
                                                             (line  209)
* strcmp:                                Searching in Strings.
                                                             (line   20)
* strcmpi:                               Searching in Strings.
                                                             (line   60)
* stream2:                               Two-Dimensional Plots.
                                                             (line 1709)
* stream2 <1>:                           Two-Dimensional Plots.
                                                             (line 1710)
* stream2 <2>:                           Two-Dimensional Plots.
                                                             (line 1711)
* stream3:                               Two-Dimensional Plots.
                                                             (line 1740)
* stream3 <1>:                           Two-Dimensional Plots.
                                                             (line 1741)
* stream3 <2>:                           Two-Dimensional Plots.
                                                             (line 1742)
* streamline:                            Two-Dimensional Plots.
                                                             (line 1673)
* streamline <1>:                        Two-Dimensional Plots.
                                                             (line 1674)
* streamline <2>:                        Two-Dimensional Plots.
                                                             (line 1675)
* streamline <3>:                        Two-Dimensional Plots.
                                                             (line 1676)
* streamline <4>:                        Two-Dimensional Plots.
                                                             (line 1677)
* streamribbon:                          Two-Dimensional Plots.
                                                             (line 1525)
* streamribbon <1>:                      Two-Dimensional Plots.
                                                             (line 1526)
* streamribbon <2>:                      Two-Dimensional Plots.
                                                             (line 1527)
* streamribbon <3>:                      Two-Dimensional Plots.
                                                             (line 1528)
* streamribbon <4>:                      Two-Dimensional Plots.
                                                             (line 1529)
* streamribbon <5>:                      Two-Dimensional Plots.
                                                             (line 1530)
* streamribbon <6>:                      Two-Dimensional Plots.
                                                             (line 1531)
* streamribbon <7>:                      Two-Dimensional Plots.
                                                             (line 1532)
* streamtube:                            Two-Dimensional Plots.
                                                             (line 1580)
* streamtube <1>:                        Two-Dimensional Plots.
                                                             (line 1581)
* streamtube <2>:                        Two-Dimensional Plots.
                                                             (line 1582)
* streamtube <3>:                        Two-Dimensional Plots.
                                                             (line 1583)
* streamtube <4>:                        Two-Dimensional Plots.
                                                             (line 1584)
* streamtube <5>:                        Two-Dimensional Plots.
                                                             (line 1585)
* streamtube <6>:                        Two-Dimensional Plots.
                                                             (line 1586)
* streamtube <7>:                        Two-Dimensional Plots.
                                                             (line 1587)
* strfind:                               Searching in Strings.
                                                             (line  260)
* strfind <1>:                           Searching in Strings.
                                                             (line  261)
* strfind <2>:                           Searching in Strings.
                                                             (line  262)
* strfind <3>:                           Searching in Strings.
                                                             (line  263)
* strftime:                              Timing Utilities.   (line  179)
* string_fill_char:                      Character Arrays.   (line   71)
* string_fill_char <1>:                  Character Arrays.   (line   72)
* string_fill_char <2>:                  Character Arrays.   (line   73)
* strjoin:                               Splitting and Joining Strings.
                                                             (line  197)
* strjoin <1>:                           Splitting and Joining Strings.
                                                             (line  198)
* strjust:                               Character Arrays.   (line   94)
* strjust <1>:                           Character Arrays.   (line   95)
* strmatch:                              Searching in Strings.
                                                             (line  310)
* strmatch <1>:                          Searching in Strings.
                                                             (line  311)
* strncmp:                               Searching in Strings.
                                                             (line   37)
* strncmpi:                              Searching in Strings.
                                                             (line   79)
* strptime:                              Timing Utilities.   (line  326)
* strread:                               Numerical Data and Strings.
                                                             (line  422)
* strread <1>:                           Numerical Data and Strings.
                                                             (line  423)
* strread <2>:                           Numerical Data and Strings.
                                                             (line  424)
* strread <3>:                           Numerical Data and Strings.
                                                             (line  425)
* strread <4>:                           Numerical Data and Strings.
                                                             (line  426)
* strrep:                                Searching and Replacing in Strings.
                                                             (line    6)
* strrep <1>:                            Searching and Replacing in Strings.
                                                             (line    7)
* strrep <2>:                            Searching and Replacing in Strings.
                                                             (line    8)
* strsplit:                              Splitting and Joining Strings.
                                                             (line   58)
* strsplit <1>:                          Splitting and Joining Strings.
                                                             (line   59)
* strsplit <2>:                          Splitting and Joining Strings.
                                                             (line   60)
* strsplit <3>:                          Splitting and Joining Strings.
                                                             (line   61)
* strtok:                                Splitting and Joining Strings.
                                                             (line   29)
* strtok <1>:                            Splitting and Joining Strings.
                                                             (line   30)
* strtrim:                               Common String Operations.
                                                             (line   51)
* strtrunc:                              Common String Operations.
                                                             (line   68)
* struct:                                Creating Structures.
                                                             (line  104)
* struct <1>:                            Creating Structures.
                                                             (line  105)
* struct <2>:                            Creating Structures.
                                                             (line  106)
* struct2cell:                           Processing Data in Structures.
                                                             (line   14)
* struct2hdl:                            Graphics Objects.   (line  627)
* struct2hdl <1>:                        Graphics Objects.   (line  628)
* struct2hdl <2>:                        Graphics Objects.   (line  629)
* structfun:                             Function Application.
                                                             (line  265)
* structfun <1>:                         Function Application.
                                                             (line  266)
* structfun <2>:                         Function Application.
                                                             (line  267)
* structfun <3>:                         Function Application.
                                                             (line  268)
* struct_levels_to_print:                Basic Usage and Examples.
                                                             (line  107)
* struct_levels_to_print <1>:            Basic Usage and Examples.
                                                             (line  108)
* struct_levels_to_print <2>:            Basic Usage and Examples.
                                                             (line  109)
* strvcat:                               Concatenating Strings.
                                                             (line  146)
* strvcat <1>:                           Concatenating Strings.
                                                             (line  147)
* strvcat <2>:                           Concatenating Strings.
                                                             (line  148)
* strvcat <3>:                           Concatenating Strings.
                                                             (line  149)
* sub2ind:                               Advanced Indexing.  (line  161)
* sub2ind <1>:                           Advanced Indexing.  (line  162)
* subplot:                               Multiple Plots on One Page.
                                                             (line   24)
* subplot <1>:                           Multiple Plots on One Page.
                                                             (line   25)
* subplot <2>:                           Multiple Plots on One Page.
                                                             (line   26)
* subplot <3>:                           Multiple Plots on One Page.
                                                             (line   27)
* subplot <4>:                           Multiple Plots on One Page.
                                                             (line   28)
* subplot <5>:                           Multiple Plots on One Page.
                                                             (line   29)
* subplot <6>:                           Multiple Plots on One Page.
                                                             (line   30)
* subplot <7>:                           Multiple Plots on One Page.
                                                             (line   31)
* subplot <8>:                           Multiple Plots on One Page.
                                                             (line   32)
* subsasgn:                              Defining Indexing And Indexed Assignment.
                                                             (line   97)
* subsindex:                             Defining Indexing And Indexed Assignment.
                                                             (line  171)
* subspace:                              Matrix Factorizations.
                                                             (line  761)
* subsref:                               Defining Indexing And Indexed Assignment.
                                                             (line   14)
* substr:                                Splitting and Joining Strings.
                                                             (line    6)
* substr <1>:                            Splitting and Joining Strings.
                                                             (line    7)
* substruct:                             Manipulating Structures.
                                                             (line  212)
* sum:                                   Sums and Products.  (line    6)
* sum <1>:                               Sums and Products.  (line    7)
* sum <2>:                               Sums and Products.  (line    8)
* sum <3>:                               Sums and Products.  (line    9)
* sum <4>:                               Sums and Products.  (line   10)
* summer:                                Representing Images.
                                                             (line  544)
* summer <1>:                            Representing Images.
                                                             (line  545)
* sumsq:                                 Sums and Products.  (line  101)
* sumsq <1>:                             Sums and Products.  (line  102)
* superiorto:                            Precedence of Objects.
                                                             (line   13)
* suppress_verbose_help_message:         Getting Help.       (line  236)
* suppress_verbose_help_message <1>:     Getting Help.       (line  237)
* suppress_verbose_help_message <2>:     Getting Help.       (line  238)
* surf:                                  Three-Dimensional Plots.
                                                             (line  199)
* surf <1>:                              Three-Dimensional Plots.
                                                             (line  200)
* surf <2>:                              Three-Dimensional Plots.
                                                             (line  201)
* surf <3>:                              Three-Dimensional Plots.
                                                             (line  202)
* surf <4>:                              Three-Dimensional Plots.
                                                             (line  203)
* surf <5>:                              Three-Dimensional Plots.
                                                             (line  204)
* surface:                               Graphics Objects.   (line  188)
* surface <1>:                           Graphics Objects.   (line  189)
* surface <2>:                           Graphics Objects.   (line  190)
* surface <3>:                           Graphics Objects.   (line  191)
* surface <4>:                           Graphics Objects.   (line  192)
* surface <5>:                           Graphics Objects.   (line  193)
* surface <6>:                           Graphics Objects.   (line  194)
* surfc:                                 Three-Dimensional Plots.
                                                             (line  243)
* surfc <1>:                             Three-Dimensional Plots.
                                                             (line  244)
* surfc <2>:                             Three-Dimensional Plots.
                                                             (line  245)
* surfc <3>:                             Three-Dimensional Plots.
                                                             (line  246)
* surfc <4>:                             Three-Dimensional Plots.
                                                             (line  247)
* surfc <5>:                             Three-Dimensional Plots.
                                                             (line  248)
* surfl:                                 Three-Dimensional Plots.
                                                             (line  287)
* surfl <1>:                             Three-Dimensional Plots.
                                                             (line  288)
* surfl <2>:                             Three-Dimensional Plots.
                                                             (line  289)
* surfl <3>:                             Three-Dimensional Plots.
                                                             (line  290)
* surfl <4>:                             Three-Dimensional Plots.
                                                             (line  291)
* surfl <5>:                             Three-Dimensional Plots.
                                                             (line  292)
* surfl <6>:                             Three-Dimensional Plots.
                                                             (line  293)
* surfl <7>:                             Three-Dimensional Plots.
                                                             (line  294)
* surfnorm:                              Three-Dimensional Plots.
                                                             (line  344)
* surfnorm <1>:                          Three-Dimensional Plots.
                                                             (line  345)
* surfnorm <2>:                          Three-Dimensional Plots.
                                                             (line  346)
* surfnorm <3>:                          Three-Dimensional Plots.
                                                             (line  347)
* surfnorm <4>:                          Three-Dimensional Plots.
                                                             (line  348)
* svd:                                   Matrix Factorizations.
                                                             (line  765)
* svd <1>:                               Matrix Factorizations.
                                                             (line  766)
* svd <2>:                               Matrix Factorizations.
                                                             (line  767)
* svd <3>:                               Matrix Factorizations.
                                                             (line  768)
* svds:                                  Sparse Linear Algebra.
                                                             (line  597)
* svds <1>:                              Sparse Linear Algebra.
                                                             (line  598)
* svds <2>:                              Sparse Linear Algebra.
                                                             (line  599)
* svds <3>:                              Sparse Linear Algebra.
                                                             (line  600)
* svds <4>:                              Sparse Linear Algebra.
                                                             (line  601)
* svds <5>:                              Sparse Linear Algebra.
                                                             (line  602)
* svd_driver:                            Matrix Factorizations.
                                                             (line  835)
* svd_driver <1>:                        Matrix Factorizations.
                                                             (line  836)
* svd_driver <2>:                        Matrix Factorizations.
                                                             (line  837)
* swapbytes:                             Built-in Data Types.
                                                             (line  149)
* sylvester:                             Functions of a Matrix.
                                                             (line   91)
* symamd:                                Mathematical Considerations.
                                                             (line  421)
* symamd <1>:                            Mathematical Considerations.
                                                             (line  422)
* symamd <2>:                            Mathematical Considerations.
                                                             (line  423)
* symamd <3>:                            Mathematical Considerations.
                                                             (line  424)
* symbfact:                              Sparse Linear Algebra.
                                                             (line  323)
* symbfact <1>:                          Sparse Linear Algebra.
                                                             (line  324)
* symbfact <2>:                          Sparse Linear Algebra.
                                                             (line  325)
* symlink:                               Filesystem Utilities.
                                                             (line   94)
* symlink <1>:                           Filesystem Utilities.
                                                             (line   95)
* symrcm:                                Mathematical Considerations.
                                                             (line  484)
* symvar:                                Function Handles.   (line  104)
* synthesis:                             Signal Processing.  (line  776)
* system:                                Controlling Subprocesses.
                                                             (line   16)
* system <1>:                            Controlling Subprocesses.
                                                             (line   17)
* system <2>:                            Controlling Subprocesses.
                                                             (line   18)
* system <3>:                            Controlling Subprocesses.
                                                             (line   19)
* S_ISBLK:                               Filesystem Utilities.
                                                             (line  288)
* S_ISCHR:                               Filesystem Utilities.
                                                             (line  295)
* S_ISDIR:                               Filesystem Utilities.
                                                             (line  302)
* S_ISFIFO:                              Filesystem Utilities.
                                                             (line  309)
* S_ISLNK:                               Filesystem Utilities.
                                                             (line  316)
* S_ISREG:                               Filesystem Utilities.
                                                             (line  323)
* S_ISSOCK:                              Filesystem Utilities.
                                                             (line  330)
* tan:                                   Trigonometry.       (line   79)
* tand:                                  Trigonometry.       (line  237)
* tanh:                                  Trigonometry.       (line  145)
* tar:                                   File Archiving Utilities.
                                                             (line   61)
* tar <1>:                               File Archiving Utilities.
                                                             (line   62)
* tempdir:                               Temporary Files.    (line   67)
* tempname:                              Temporary Files.    (line   48)
* tempname <1>:                          Temporary Files.    (line   49)
* tempname <2>:                          Temporary Files.    (line   50)
* terminal_size:                         Terminal Output.    (line   68)
* test:                                  Test Functions.     (line    6)
* test <1>:                              Test Functions.     (line    7)
* test <2>:                              Test Functions.     (line    8)
* test <3>:                              Test Functions.     (line    9)
* test <4>:                              Test Functions.     (line   10)
* test <5>:                              Test Functions.     (line   11)
* test <6>:                              Test Functions.     (line   12)
* test <7>:                              Test Functions.     (line   13)
* test <8>:                              Test Functions.     (line   14)
* tetramesh:                             Plotting the Triangulation.
                                                             (line  107)
* tetramesh <1>:                         Plotting the Triangulation.
                                                             (line  108)
* tetramesh <2>:                         Plotting the Triangulation.
                                                             (line  109)
* tetramesh <3>:                         Plotting the Triangulation.
                                                             (line  110)
* texi_macros_file:                      Getting Help.       (line  171)
* texi_macros_file <1>:                  Getting Help.       (line  172)
* texi_macros_file <2>:                  Getting Help.       (line  173)
* text:                                  Plot Annotations.   (line  192)
* text <1>:                              Plot Annotations.   (line  193)
* text <2>:                              Plot Annotations.   (line  194)
* text <3>:                              Plot Annotations.   (line  195)
* text <4>:                              Plot Annotations.   (line  196)
* textread:                              Simple File I/O.    (line  503)
* textread <1>:                          Simple File I/O.    (line  504)
* textread <2>:                          Simple File I/O.    (line  505)
* textread <3>:                          Simple File I/O.    (line  506)
* textread <4>:                          Simple File I/O.    (line  507)
* textscan:                              Simple File I/O.    (line  580)
* textscan <1>:                          Simple File I/O.    (line  581)
* textscan <2>:                          Simple File I/O.    (line  582)
* textscan <3>:                          Simple File I/O.    (line  583)
* textscan <4>:                          Simple File I/O.    (line  584)
* textscan <5>:                          Simple File I/O.    (line  585)
* tfqmr:                                 Specialized Solvers.
                                                             (line  666)
* tfqmr <1>:                             Specialized Solvers.
                                                             (line  667)
* tfqmr <2>:                             Specialized Solvers.
                                                             (line  668)
* thetaticks:                            Axis Configuration. (line  206)
* tic:                                   Timing Utilities.   (line  426)
* tic <1>:                               Timing Utilities.   (line  427)
* tilde_expand:                          Filesystem Utilities.
                                                             (line  573)
* tilde_expand <1>:                      Filesystem Utilities.
                                                             (line  574)
* time:                                  Timing Utilities.   (line   51)
* times:                                 Arithmetic Ops.     (line  209)
* times <1>:                             Arithmetic Ops.     (line  210)
* title:                                 Plot Annotations.   (line   25)
* title <1>:                             Plot Annotations.   (line   26)
* title <2>:                             Plot Annotations.   (line   27)
* title <3>:                             Plot Annotations.   (line   28)
* tmpfile:                               Temporary Files.    (line   34)
* toc:                                   Timing Utilities.   (line  468)
* toc <1>:                               Timing Utilities.   (line  469)
* toc <2>:                               Timing Utilities.   (line  470)
* toeplitz:                              Famous Matrices.    (line  417)
* toeplitz <1>:                          Famous Matrices.    (line  418)
* tolower:                               Common String Operations.
                                                             (line    8)
* toupper:                               Common String Operations.
                                                             (line   21)
* trace:                                 Basic Matrix Functions.
                                                             (line  572)
* transpose:                             Arithmetic Ops.     (line  221)
* trapz:                                 Functions of One Variable.
                                                             (line  549)
* trapz <1>:                             Functions of One Variable.
                                                             (line  550)
* trapz <2>:                             Functions of One Variable.
                                                             (line  551)
* treelayout:                            Information.        (line  196)
* treelayout <1>:                        Information.        (line  197)
* treeplot:                              Information.        (line  182)
* treeplot <1>:                          Information.        (line  183)
* tril:                                  Rearranging Matrices.
                                                             (line  492)
* tril <1>:                              Rearranging Matrices.
                                                             (line  493)
* tril <2>:                              Rearranging Matrices.
                                                             (line  494)
* trimesh:                               Plotting the Triangulation.
                                                             (line   29)
* trimesh <1>:                           Plotting the Triangulation.
                                                             (line   30)
* trimesh <2>:                           Plotting the Triangulation.
                                                             (line   31)
* trimesh <3>:                           Plotting the Triangulation.
                                                             (line   32)
* trimesh <4>:                           Plotting the Triangulation.
                                                             (line   33)
* triplequad:                            Functions of Multiple Variables.
                                                             (line   73)
* triplequad <1>:                        Functions of Multiple Variables.
                                                             (line   74)
* triplequad <2>:                        Functions of Multiple Variables.
                                                             (line   75)
* triplequad <3>:                        Functions of Multiple Variables.
                                                             (line   76)
* triplot:                               Plotting the Triangulation.
                                                             (line   10)
* triplot <1>:                           Plotting the Triangulation.
                                                             (line   11)
* triplot <2>:                           Plotting the Triangulation.
                                                             (line   12)
* trisurf:                               Plotting the Triangulation.
                                                             (line   68)
* trisurf <1>:                           Plotting the Triangulation.
                                                             (line   69)
* trisurf <2>:                           Plotting the Triangulation.
                                                             (line   70)
* trisurf <3>:                           Plotting the Triangulation.
                                                             (line   71)
* triu:                                  Rearranging Matrices.
                                                             (line  529)
* triu <1>:                              Rearranging Matrices.
                                                             (line  530)
* triu <2>:                              Rearranging Matrices.
                                                             (line  531)
* true:                                  Logical Values.     (line   49)
* true <1>:                              Logical Values.     (line   50)
* true <2>:                              Logical Values.     (line   51)
* true <3>:                              Logical Values.     (line   52)
* tsearch:                               Identifying Points in Triangulation.
                                                             (line   55)
* tsearchn:                              Identifying Points in Triangulation.
                                                             (line   64)
* tsearchn <1>:                          Identifying Points in Triangulation.
                                                             (line   65)
* turbo:                                 Representing Images.
                                                             (line  553)
* turbo <1>:                             Representing Images.
                                                             (line  554)
* type:                                  Status of Variables.
                                                             (line  420)
* type <1>:                              Status of Variables.
                                                             (line  421)
* type <2>:                              Status of Variables.
                                                             (line  422)
* typecast:                              Built-in Data Types.
                                                             (line  103)
* typeinfo:                              Data Types.         (line   18)
* typeinfo <1>:                          Data Types.         (line   19)
* uibuttongroup:                         UI Elements.        (line   47)
* uibuttongroup <1>:                     UI Elements.        (line   48)
* uibuttongroup <2>:                     UI Elements.        (line   49)
* uicontextmenu:                         UI Elements.        (line  410)
* uicontextmenu <1>:                     UI Elements.        (line  411)
* uicontrol:                             UI Elements.        (line   91)
* uicontrol <1>:                         UI Elements.        (line   92)
* uicontrol <2>:                         UI Elements.        (line   93)
* uigetdir:                              I/O Dialogs.        (line   10)
* uigetdir <1>:                          I/O Dialogs.        (line   11)
* uigetdir <2>:                          I/O Dialogs.        (line   12)
* uigetfile:                             I/O Dialogs.        (line   26)
* uigetfile <1>:                         I/O Dialogs.        (line   27)
* uigetfile <2>:                         I/O Dialogs.        (line   28)
* uigetfile <3>:                         I/O Dialogs.        (line   29)
* uigetfile <4>:                         I/O Dialogs.        (line   30)
* uimenu:                                UI Elements.        (line  351)
* uimenu <1>:                            UI Elements.        (line  352)
* uint16:                                Integer Data Types. (line   59)
* uint32:                                Integer Data Types. (line   73)
* uint64:                                Integer Data Types. (line   87)
* uint8:                                 Integer Data Types. (line   45)
* uipanel:                               UI Elements.        (line   10)
* uipanel <1>:                           UI Elements.        (line   11)
* uipanel <2>:                           UI Elements.        (line   12)
* uipushtool:                            UI Elements.        (line  474)
* uipushtool <1>:                        UI Elements.        (line  475)
* uipushtool <2>:                        UI Elements.        (line  476)
* uiputfile:                             I/O Dialogs.        (line   85)
* uiputfile <1>:                         I/O Dialogs.        (line   86)
* uiputfile <2>:                         I/O Dialogs.        (line   87)
* uiputfile <3>:                         I/O Dialogs.        (line   88)
* uiresume:                              GUI Utility Functions.
                                                             (line  169)
* uisetfont:                             I/O Dialogs.        (line  444)
* uisetfont <1>:                         I/O Dialogs.        (line  445)
* uisetfont <2>:                         I/O Dialogs.        (line  446)
* uisetfont <3>:                         I/O Dialogs.        (line  447)
* uisetfont <4>:                         I/O Dialogs.        (line  448)
* uitable:                               UI Elements.        (line  173)
* uitable <1>:                           UI Elements.        (line  174)
* uitoggletool:                          UI Elements.        (line  515)
* uitoggletool <1>:                      UI Elements.        (line  516)
* uitoggletool <2>:                      UI Elements.        (line  517)
* uitoolbar:                             UI Elements.        (line  443)
* uitoolbar <1>:                         UI Elements.        (line  444)
* uitoolbar <2>:                         UI Elements.        (line  445)
* uiwait:                                GUI Utility Functions.
                                                             (line  150)
* uiwait <1>:                            GUI Utility Functions.
                                                             (line  151)
* uiwait <2>:                            GUI Utility Functions.
                                                             (line  152)
* umask:                                 Filesystem Utilities.
                                                             (line  180)
* uminus:                                Arithmetic Ops.     (line  228)
* uname:                                 System Information. (line   40)
* undo_string_escapes:                   Common String Operations.
                                                             (line  112)
* unicode2native:                        String encoding.    (line    6)
* unicode2native <1>:                    String encoding.    (line    7)
* unicode_idx:                           Searching in Strings.
                                                             (line  253)
* union:                                 Set Operations.     (line   55)
* union <1>:                             Set Operations.     (line   56)
* union <2>:                             Set Operations.     (line   57)
* union <3>:                             Set Operations.     (line   58)
* union <4>:                             Set Operations.     (line   59)
* union <5>:                             Set Operations.     (line   60)
* unique:                                Sets.               (line   14)
* unique <1>:                            Sets.               (line   15)
* unique <2>:                            Sets.               (line   16)
* unique <3>:                            Sets.               (line   17)
* unique <4>:                            Sets.               (line   18)
* unique <5>:                            Sets.               (line   19)
* unique <6>:                            Sets.               (line   20)
* unique <7>:                            Sets.               (line   21)
* uniquetol:                             Sets.               (line   72)
* uniquetol <1>:                         Sets.               (line   73)
* uniquetol <2>:                         Sets.               (line   74)
* uniquetol <3>:                         Sets.               (line   75)
* unix:                                  Controlling Subprocesses.
                                                             (line   63)
* unix <1>:                              Controlling Subprocesses.
                                                             (line   64)
* unix <2>:                              Controlling Subprocesses.
                                                             (line   65)
* unix <3>:                              Controlling Subprocesses.
                                                             (line   66)
* unlink:                                Filesystem Utilities.
                                                             (line   75)
* unlink <1>:                            Filesystem Utilities.
                                                             (line   76)
* unmkpp:                                Polynomial Interpolation.
                                                             (line  378)
* unpack:                                File Archiving Utilities.
                                                             (line  127)
* unpack <1>:                            File Archiving Utilities.
                                                             (line  128)
* unpack <2>:                            File Archiving Utilities.
                                                             (line  129)
* unsetenv:                              Environment Variables.
                                                             (line   27)
* untabify:                              Common String Operations.
                                                             (line   76)
* untabify <1>:                          Common String Operations.
                                                             (line   77)
* untabify <2>:                          Common String Operations.
                                                             (line   78)
* untar:                                 File Archiving Utilities.
                                                             (line   80)
* untar <1>:                             File Archiving Utilities.
                                                             (line   81)
* untar <2>:                             File Archiving Utilities.
                                                             (line   82)
* unwrap:                                Signal Processing.  (line  373)
* unwrap <1>:                            Signal Processing.  (line  374)
* unwrap <2>:                            Signal Processing.  (line  375)
* unzip:                                 File Archiving Utilities.
                                                             (line  113)
* unzip <1>:                             File Archiving Utilities.
                                                             (line  114)
* unzip <2>:                             File Archiving Utilities.
                                                             (line  115)
* uplus:                                 Arithmetic Ops.     (line  233)
* upper:                                 Common String Operations.
                                                             (line   22)
* urlread:                               WWW Access.         (line   50)
* urlread <1>:                           WWW Access.         (line   51)
* urlread <2>:                           WWW Access.         (line   52)
* urlread <3>:                           WWW Access.         (line   53)
* urlwrite:                              WWW Access.         (line   82)
* urlwrite <1>:                          WWW Access.         (line   83)
* urlwrite <2>:                          WWW Access.         (line   84)
* urlwrite <3>:                          WWW Access.         (line   85)
* usejava:                               Java Interface Functions.
                                                             (line  276)
* user_config_dir:                       System Information. (line  136)
* user_data_dir:                         System Information. (line  141)
* validateattributes:                    Validating the type of Arguments.
                                                             (line   44)
* validateattributes <1>:                Validating the type of Arguments.
                                                             (line   45)
* validateattributes <2>:                Validating the type of Arguments.
                                                             (line   46)
* validateattributes <3>:                Validating the type of Arguments.
                                                             (line   47)
* validateattributes <4>:                Validating the type of Arguments.
                                                             (line   48)
* validatestring:                        Validating the type of Arguments.
                                                             (line   10)
* validatestring <1>:                    Validating the type of Arguments.
                                                             (line   11)
* validatestring <2>:                    Validating the type of Arguments.
                                                             (line   12)
* validatestring <3>:                    Validating the type of Arguments.
                                                             (line   13)
* vander:                                Famous Matrices.    (line  440)
* vander <1>:                            Famous Matrices.    (line  441)
* var:                                   Descriptive Statistics.
                                                             (line  297)
* var <1>:                               Descriptive Statistics.
                                                             (line  298)
* var <2>:                               Descriptive Statistics.
                                                             (line  299)
* var <3>:                               Descriptive Statistics.
                                                             (line  300)
* vec:                                   Rearranging Matrices.
                                                             (line  566)
* vec <1>:                               Rearranging Matrices.
                                                             (line  567)
* vech:                                  Rearranging Matrices.
                                                             (line  580)
* vecnorm:                               Basic Matrix Functions.
                                                             (line  591)
* vecnorm <1>:                           Basic Matrix Functions.
                                                             (line  592)
* vecnorm <2>:                           Basic Matrix Functions.
                                                             (line  593)
* ver:                                   System Information. (line  196)
* ver <1>:                               System Information. (line  197)
* ver <2>:                               System Information. (line  198)
* ver <3>:                               System Information. (line  199)
* verLessThan:                           System Information. (line  261)
* version:                               System Information. (line  151)
* version <1>:                           System Information. (line  152)
* version <2>:                           System Information. (line  153)
* vertcat:                               Rearranging Matrices.
                                                             (line  172)
* view:                                  Three-Dimensional Plots.
                                                             (line 1169)
* view <1>:                              Three-Dimensional Plots.
                                                             (line 1170)
* view <2>:                              Three-Dimensional Plots.
                                                             (line 1171)
* view <3>:                              Three-Dimensional Plots.
                                                             (line 1172)
* view <4>:                              Three-Dimensional Plots.
                                                             (line 1173)
* view <5>:                              Three-Dimensional Plots.
                                                             (line 1174)
* view <6>:                              Three-Dimensional Plots.
                                                             (line 1175)
* viridis:                               Representing Images.
                                                             (line  564)
* viridis <1>:                           Representing Images.
                                                             (line  565)
* voronoi:                               Voronoi Diagrams.   (line   14)
* voronoi <1>:                           Voronoi Diagrams.   (line   15)
* voronoi <2>:                           Voronoi Diagrams.   (line   16)
* voronoi <3>:                           Voronoi Diagrams.   (line   17)
* voronoi <4>:                           Voronoi Diagrams.   (line   18)
* voronoi <5>:                           Voronoi Diagrams.   (line   19)
* voronoin:                              Voronoi Diagrams.   (line   51)
* voronoin <1>:                          Voronoi Diagrams.   (line   52)
* waitbar:                               Progress Bar.       (line    6)
* waitbar <1>:                           Progress Bar.       (line    7)
* waitbar <2>:                           Progress Bar.       (line    8)
* waitbar <3>:                           Progress Bar.       (line    9)
* waitbar <4>:                           Progress Bar.       (line   10)
* waitbar <5>:                           Progress Bar.       (line   11)
* waitbar <6>:                           Progress Bar.       (line   12)
* waitfor:                               GUI Utility Functions.
                                                             (line  178)
* waitfor <1>:                           GUI Utility Functions.
                                                             (line  179)
* waitfor <2>:                           GUI Utility Functions.
                                                             (line  180)
* waitfor <3>:                           GUI Utility Functions.
                                                             (line  181)
* waitforbuttonpress:                    Interacting with Plots.
                                                             (line   32)
* waitforbuttonpress <1>:                Interacting with Plots.
                                                             (line   33)
* waitpid:                               Controlling Subprocesses.
                                                             (line  318)
* warndlg:                               I/O Dialogs.        (line  412)
* warndlg <1>:                           I/O Dialogs.        (line  413)
* warndlg <2>:                           I/O Dialogs.        (line  414)
* warndlg <3>:                           I/O Dialogs.        (line  415)
* warndlg <4>:                           I/O Dialogs.        (line  416)
* warning:                               Issuing Warnings.   (line   33)
* warning <1>:                           Issuing Warnings.   (line   34)
* warning <2>:                           Issuing Warnings.   (line   35)
* warning <3>:                           Issuing Warnings.   (line   36)
* warning <4>:                           Issuing Warnings.   (line   37)
* warning <5>:                           Issuing Warnings.   (line   38)
* warning <6>:                           Issuing Warnings.   (line   39)
* warning <7>:                           Issuing Warnings.   (line   40)
* warning <8>:                           Issuing Warnings.   (line   41)
* warning <9>:                           Issuing Warnings.   (line   42)
* warranty:                              Getting Help.       (line  108)
* waterfall:                             Three-Dimensional Plots.
                                                             (line 1654)
* waterfall <1>:                         Three-Dimensional Plots.
                                                             (line 1655)
* waterfall <2>:                         Three-Dimensional Plots.
                                                             (line 1656)
* waterfall <3>:                         Three-Dimensional Plots.
                                                             (line 1657)
* waterfall <4>:                         Three-Dimensional Plots.
                                                             (line 1658)
* waterfall <5>:                         Three-Dimensional Plots.
                                                             (line 1659)
* WCONTINUE:                             Controlling Subprocesses.
                                                             (line  364)
* WCOREDUMP:                             Controlling Subprocesses.
                                                             (line  374)
* web:                                   WWW Access.         (line   13)
* web <1>:                               WWW Access.         (line   14)
* web <2>:                               WWW Access.         (line   15)
* web <3>:                               WWW Access.         (line   16)
* web <4>:                               WWW Access.         (line   17)
* weboptions:                            WWW Access.         (line  161)
* weboptions <1>:                        WWW Access.         (line  162)
* webread:                               WWW Access.         (line  118)
* webread <1>:                           WWW Access.         (line  119)
* webread <2>:                           WWW Access.         (line  120)
* webwrite:                              WWW Access.         (line  140)
* webwrite <1>:                          WWW Access.         (line  141)
* webwrite <2>:                          WWW Access.         (line  142)
* weekday:                               Timing Utilities.   (line  737)
* weekday <1>:                           Timing Utilities.   (line  738)
* WEXITSTATUS:                           Controlling Subprocesses.
                                                             (line  389)
* what:                                  Status of Variables.
                                                             (line  442)
* what <1>:                              Status of Variables.
                                                             (line  443)
* what <2>:                              Status of Variables.
                                                             (line  444)
* which:                                 Status of Variables.
                                                             (line  434)
* white:                                 Representing Images.
                                                             (line  574)
* white <1>:                             Representing Images.
                                                             (line  575)
* whitebg:                               Representing Images.
                                                             (line  644)
* whitebg <1>:                           Representing Images.
                                                             (line  645)
* whitebg <2>:                           Representing Images.
                                                             (line  646)
* whitebg <3>:                           Representing Images.
                                                             (line  647)
* whitebg <4>:                           Representing Images.
                                                             (line  648)
* whitebg <5>:                           Representing Images.
                                                             (line  649)
* who:                                   Status of Variables.
                                                             (line   17)
* who <1>:                               Status of Variables.
                                                             (line   18)
* who <2>:                               Status of Variables.
                                                             (line   19)
* who <3>:                               Status of Variables.
                                                             (line   20)
* whos:                                  Status of Variables.
                                                             (line   52)
* whos <1>:                              Status of Variables.
                                                             (line   53)
* whos <2>:                              Status of Variables.
                                                             (line   54)
* whos <3>:                              Status of Variables.
                                                             (line   55)
* whos_line_format:                      Status of Variables.
                                                             (line  107)
* whos_line_format <1>:                  Status of Variables.
                                                             (line  108)
* whos_line_format <2>:                  Status of Variables.
                                                             (line  109)
* WIFCONTINUED:                          Controlling Subprocesses.
                                                             (line  401)
* WIFEXITED:                             Controlling Subprocesses.
                                                             (line  434)
* WIFSIGNALED:                           Controlling Subprocesses.
                                                             (line  411)
* WIFSTOPPED:                            Controlling Subprocesses.
                                                             (line  421)
* wilkinson:                             Famous Matrices.    (line  458)
* winqueryreg:                           System Information. (line  506)
* winqueryreg <1>:                       System Information. (line  507)
* winqueryreg <2>:                       System Information. (line  508)
* winter:                                Representing Images.
                                                             (line  583)
* winter <1>:                            Representing Images.
                                                             (line  584)
* WNOHANG:                               Controlling Subprocesses.
                                                             (line  444)
* workspace:                             Octave Workspace Windows.
                                                             (line   29)
* WSTOPSIG:                              Controlling Subprocesses.
                                                             (line  454)
* WTERMSIG:                              Controlling Subprocesses.
                                                             (line  467)
* WUNTRACED:                             Controlling Subprocesses.
                                                             (line  480)
* xlabel:                                Plot Annotations.   (line  243)
* xlabel <1>:                            Plot Annotations.   (line  244)
* xlabel <2>:                            Plot Annotations.   (line  245)
* xlabel <3>:                            Plot Annotations.   (line  246)
* xlim:                                  Axis Configuration. (line  167)
* xlim <1>:                              Axis Configuration. (line  168)
* xlim <2>:                              Axis Configuration. (line  169)
* xlim <3>:                              Axis Configuration. (line  170)
* xlim <4>:                              Axis Configuration. (line  171)
* xlim <5>:                              Axis Configuration. (line  172)
* xor:                                   Finding Elements and Checking Conditions.
                                                             (line   61)
* xor <1>:                               Finding Elements and Checking Conditions.
                                                             (line   62)
* xtickangle:                            Axis Configuration. (line  278)
* xtickangle <1>:                        Axis Configuration. (line  279)
* xtickangle <2>:                        Axis Configuration. (line  280)
* xtickangle <3>:                        Axis Configuration. (line  281)
* xticklabels:                           Axis Configuration. (line  241)
* xticklabels <1>:                       Axis Configuration. (line  242)
* xticklabels <2>:                       Axis Configuration. (line  243)
* xticklabels <3>:                       Axis Configuration. (line  244)
* xticklabels <4>:                       Axis Configuration. (line  245)
* xticklabels <5>:                       Axis Configuration. (line  246)
* xticks:                                Axis Configuration. (line  206)
* xticks <1>:                            Axis Configuration. (line  207)
* xticks <2>:                            Axis Configuration. (line  208)
* xticks <3>:                            Axis Configuration. (line  209)
* xticks <4>:                            Axis Configuration. (line  210)
* xticks <5>:                            Axis Configuration. (line  211)
* yes_or_no:                             Terminal Input.     (line   66)
* ylabel:                                Plot Annotations.   (line  243)
* ylim:                                  Axis Configuration. (line  167)
* ytickangle:                            Axis Configuration. (line  278)
* yticklabels:                           Axis Configuration. (line  241)
* yticks:                                Axis Configuration. (line  206)
* yulewalker:                            Signal Processing.  (line  787)
* zeros:                                 Special Utility Matrices.
                                                             (line   74)
* zeros <1>:                             Special Utility Matrices.
                                                             (line   75)
* zeros <2>:                             Special Utility Matrices.
                                                             (line   76)
* zeros <3>:                             Special Utility Matrices.
                                                             (line   77)
* zeros <4>:                             Special Utility Matrices.
                                                             (line   78)
* zeros <5>:                             Special Utility Matrices.
                                                             (line   79)
* zip:                                   File Archiving Utilities.
                                                             (line   94)
* zip <1>:                               File Archiving Utilities.
                                                             (line   95)
* zlabel:                                Plot Annotations.   (line  243)
* zlim:                                  Axis Configuration. (line  167)
* zoom:                                  Manipulation of Plot Objects.
                                                             (line   57)
* zoom <1>:                              Manipulation of Plot Objects.
                                                             (line   58)
* zoom <2>:                              Manipulation of Plot Objects.
                                                             (line   59)
* zoom <3>:                              Manipulation of Plot Objects.
                                                             (line   60)
* zoom <4>:                              Manipulation of Plot Objects.
                                                             (line   61)
* zoom <5>:                              Manipulation of Plot Objects.
                                                             (line   62)
* zoom <6>:                              Manipulation of Plot Objects.
                                                             (line   63)
* zoom <7>:                              Manipulation of Plot Objects.
                                                             (line   64)
* zoom <8>:                              Manipulation of Plot Objects.
                                                             (line   65)
* zscore:                                Basic Statistical Functions.
                                                             (line   31)
* zscore <1>:                            Basic Statistical Functions.
                                                             (line   32)
* zscore <2>:                            Basic Statistical Functions.
                                                             (line   33)
* zscore <3>:                            Basic Statistical Functions.
                                                             (line   34)
* ztickangle:                            Axis Configuration. (line  278)
* zticklabels:                           Axis Configuration. (line  241)
* zticks:                                Axis Configuration. (line  206)

